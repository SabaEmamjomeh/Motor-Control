
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800a5b8  0800a5b8  0001a5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a984  0800a984  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a98c  0800a98c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a98c  0800a98c  0001a98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a990  0800a990  0001a990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  200001e4  0800ab78  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aec  0800ab78  00020aec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017056  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ba4  00000000  00000000  000372ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  00039e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001054  00000000  00000000  0003b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004590  00000000  00000000  0003c364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d28  00000000  00000000  000408f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107bd0  00000000  00000000  0005961c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006724  00000000  00000000  001611ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00167910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a5a0 	.word	0x0800a5a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800a5a0 	.word	0x0800a5a0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	2b00      	cmp	r3, #0
 8000602:	d013      	beq.n	800062c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000604:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000608:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800060c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000610:	2b00      	cmp	r3, #0
 8000612:	d00b      	beq.n	800062c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000614:	e000      	b.n	8000618 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000616:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000618:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0f9      	beq.n	8000616 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000622:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	0000      	movs	r0, r0
 800063c:	0000      	movs	r0, r0
	...

08000640 <update_encoder>:
PIDInstance pid_B;
PIDInstance pid_line;


void update_encoder(EncoderInstance *encoder_value, TIM_HandleTypeDef *htim)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	// __HAL_TIM_GET_AUTORELOAD(htim) retrieves the value of the auto-reload register (ARR). Professor used "ARR - 1" in the function given by him. Check if we need -1 when using the HAL macro.

	uint32_t TIM_CurrentCount = __HAL_TIM_GET_COUNTER(htim);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	60fb      	str	r3, [r7, #12]
	static bool first_time = 1;
	//For the first call of the function assume velocity is zero
	if(first_time)
 8000652:	4b43      	ldr	r3, [pc, #268]	; (8000760 <update_encoder+0x120>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d007      	beq.n	800066a <update_encoder+0x2a>
	{
		encoder_value ->velocity = 0;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f04f 0200 	mov.w	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
		first_time = 0;
 8000662:	4b3f      	ldr	r3, [pc, #252]	; (8000760 <update_encoder+0x120>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	e053      	b.n	8000712 <update_encoder+0xd2>
	}
	else
	{
		// This one is self explanatory, if the current counter is the same as the previous the velocity is 0
		if(TIM_CurrentCount == encoder_value->previous_count)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	429a      	cmp	r2, r3
 8000672:	d104      	bne.n	800067e <update_encoder+0x3e>
		{
			encoder_value->velocity = 0;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	e049      	b.n	8000712 <update_encoder+0xd2>
		}
		// Moving FORWARD; evaluate increment of TIM counter from previous count
		else if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f003 0310 	and.w	r3, r3, #16
 8000688:	2b10      	cmp	r3, #16
 800068a:	d121      	bne.n	80006d0 <update_encoder+0x90>
		{
			// check for counter underflow
			if (TIM_CurrentCount < encoder_value->previous_count)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	429a      	cmp	r2, r3
 8000694:	d20b      	bcs.n	80006ae <update_encoder+0x6e>
				encoder_value->velocity = TIM_CurrentCount - encoder_value->previous_count;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	ee07 3a90 	vmov	s15, r3
 80006a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	edc3 7a00 	vstr	s15, [r3]
 80006ac:	e031      	b.n	8000712 <update_encoder+0xd2>
			else
				encoder_value->velocity = -((__HAL_TIM_GET_AUTORELOAD(htim)+1) - TIM_CurrentCount) - encoder_value->previous_count;//__HAL_TIM_GET_AUTORELOAD(htim)+1
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	1ad2      	subs	r2, r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	3b01      	subs	r3, #1
 80006c0:	ee07 3a90 	vmov	s15, r3
 80006c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	edc3 7a00 	vstr	s15, [r3]
 80006ce:	e020      	b.n	8000712 <update_encoder+0xd2>
		}
		// Moving BACKWARDS
		else
		{
			/* check for counter overflow */
			if (TIM_CurrentCount > encoder_value->previous_count)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d90b      	bls.n	80006f2 <update_encoder+0xb2>
				encoder_value->velocity = TIM_CurrentCount - encoder_value->previous_count;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	ee07 3a90 	vmov	s15, r3
 80006e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	edc3 7a00 	vstr	s15, [r3]
 80006f0:	e00f      	b.n	8000712 <update_encoder+0xd2>
			else
				encoder_value->velocity = ((__HAL_TIM_GET_AUTORELOAD(htim)+1) - encoder_value->previous_count) + TIM_CurrentCount;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	1ad2      	subs	r2, r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	4413      	add	r3, r2
 8000702:	3301      	adds	r3, #1
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	encoder_value->radians_second = (((encoder_value->velocity)/3840)/TS)*(2*M_PI);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	ed93 7a00 	vldr	s14, [r3]
 8000718:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000764 <update_encoder+0x124>
 800071c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000720:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000724:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000750 <update_encoder+0x110>
 8000728:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800072c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000758 <update_encoder+0x118>
 8000730:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000734:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	edc3 7a01 	vstr	s15, [r3, #4]
	encoder_value->previous_count = TIM_CurrentCount;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	609a      	str	r2, [r3, #8]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	47ae147b 	.word	0x47ae147b
 8000754:	3f847ae1 	.word	0x3f847ae1
 8000758:	54442d18 	.word	0x54442d18
 800075c:	401921fb 	.word	0x401921fb
 8000760:	2000000d 	.word	0x2000000d
 8000764:	45700000 	.word	0x45700000

08000768 <set_pid_gains>:


void set_pid_gains(PIDInstance *pid, float p, float i, float d) {
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	ed87 0a02 	vstr	s0, [r7, #8]
 8000774:	edc7 0a01 	vstr	s1, [r7, #4]
 8000778:	ed87 1a00 	vstr	s2, [r7]
	pid->p_gain = p;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	601a      	str	r2, [r3, #0]
	pid->i_gain = i;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	605a      	str	r2, [r3, #4]
	pid->d_gain = d;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	609a      	str	r2, [r3, #8]
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <reset_pid>:

void reset_pid(PIDInstance *pid) {
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
	pid->error_integral = 0;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f04f 0200 	mov.w	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
	pid->last_error = 0;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f04f 0200 	mov.w	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
	pid->output = 0;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <apply_pid>:

void apply_pid(PIDInstance *pid, float input_error, int8_t PID_MAX, int16_t sampling_rate) {
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80007d4:	460b      	mov	r3, r1
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	80bb      	strh	r3, [r7, #4]
	// Accumulate error for integral control
	pid->error_integral += input_error;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	ed93 7a03 	vldr	s14, [r3, #12]
 80007e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80007e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	edc3 7a03 	vstr	s15, [r3, #12]

	// Bound integral term
	if (pid->error_integral > INTEGRAL_MAX_GAIN)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80007f6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000900 <apply_pid+0x138>
 80007fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000802:	dd03      	ble.n	800080c <apply_pid+0x44>
		pid->error_integral = INTEGRAL_MAX_GAIN;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4a3f      	ldr	r2, [pc, #252]	; (8000904 <apply_pid+0x13c>)
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	e00c      	b.n	8000826 <apply_pid+0x5e>
	else if (pid->error_integral < -INTEGRAL_MAX_GAIN)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000812:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000908 <apply_pid+0x140>
 8000816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800081a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081e:	d502      	bpl.n	8000826 <apply_pid+0x5e>
		pid->error_integral = -INTEGRAL_MAX_GAIN;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4a3a      	ldr	r2, [pc, #232]	; (800090c <apply_pid+0x144>)
 8000824:	60da      	str	r2, [r3, #12]

	// Compute PID output
	pid->output = (float)(
			pid->p_gain * input_error +
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	ed93 7a00 	vldr	s14, [r3]
 800082c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000830:	ee27 7a27 	vmul.f32	s14, s14, s15
			pid->i_gain * (pid->error_integral) / sampling_rate +
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	edd3 6a01 	vldr	s13, [r3, #4]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000840:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000844:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000848:	ee07 3a90 	vmov	s15, r3
 800084c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000850:	eec6 7a26 	vdiv.f32	s15, s12, s13
			pid->p_gain * input_error +
 8000854:	ee37 7a27 	vadd.f32	s14, s14, s15
			pid->d_gain * sampling_rate * (input_error - pid->last_error)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	edd3 6a02 	vldr	s13, [r3, #8]
 800085e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800086a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	edd3 7a04 	vldr	s15, [r3, #16]
 8000874:	ed97 6a02 	vldr	s12, [r7, #8]
 8000878:	ee76 7a67 	vsub.f32	s15, s12, s15
 800087c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->output = (float)(
 8000880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	edc3 7a05 	vstr	s15, [r3, #20]
	);
	// sampling_rate in Hz, that s why in Integral is '/' instead of '*' and in Derivative '*' instead of '/' (Hz = 1/s)

	// Bound output
	if (pid->output > PID_MAX)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800089c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a4:	dd09      	ble.n	80008ba <apply_pid+0xf2>
		pid->output = PID_MAX;
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	ee07 3a90 	vmov	s15, r3
 80008ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	edc3 7a05 	vstr	s15, [r3, #20]
 80008b8:	e018      	b.n	80008ec <apply_pid+0x124>
	else if (pid->output < -PID_MAX)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	425b      	negs	r3, r3
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d509      	bpl.n	80008ec <apply_pid+0x124>
		pid->output = -PID_MAX;
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	425b      	negs	r3, r3
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	edc3 7a05 	vstr	s15, [r3, #20]

	// Update last error for derivative control
	pid->last_error = input_error;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	611a      	str	r2, [r3, #16]
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	44fa0000 	.word	0x44fa0000
 8000904:	44fa0000 	.word	0x44fa0000
 8000908:	c4fa0000 	.word	0xc4fa0000
 800090c:	c4fa0000 	.word	0xc4fa0000

08000910 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af04      	add	r7, sp, #16
 8000916:	6078      	str	r0, [r7, #4]
	/* Speed control routine */
	if(htim->Instance == TIM6)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a9d      	ldr	r2, [pc, #628]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800091e:	4293      	cmp	r3, r2
 8000920:	f040 8133 	bne.w	8000b8a <HAL_TIM_PeriodElapsedCallback+0x27a>
	{

		// ------------ ENCODER READING ------------
		update_encoder(&encoder_instance_motA, &htim3);
 8000924:	499c      	ldr	r1, [pc, #624]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000926:	489d      	ldr	r0, [pc, #628]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000928:	f7ff fe8a 	bl	8000640 <update_encoder>
		update_encoder(&encoder_instance_motB, &htim4);
 800092c:	499c      	ldr	r1, [pc, #624]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800092e:	489d      	ldr	r0, [pc, #628]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000930:	f7ff fe86 	bl	8000640 <update_encoder>


		// ------- LINE SENSOR ERROR READING -------

		static uint8_t line_data[1];
		HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, 0x10, 1, line_data, 1, 100);
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	2301      	movs	r3, #1
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	4b9a      	ldr	r3, [pc, #616]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2301      	movs	r3, #1
 8000942:	2210      	movs	r2, #16
 8000944:	217c      	movs	r1, #124	; 0x7c
 8000946:	4899      	ldr	r0, [pc, #612]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000948:	f003 f890 	bl	8003a6c <HAL_I2C_Mem_Read>
		//printf("Reflectance Sensor reading: %d \n", (uint8_t)line_data[0]);
		int sum_of_bits = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 8; i++) {
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	e023      	b.n	800099e <HAL_TIM_PeriodElapsedCallback+0x8e>
			// take the i-th bit of sensor
			uint8_t bit_i = (line_data[0] >> i) & 1;
 8000956:	4b94      	ldr	r3, [pc, #592]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	fa42 f303 	asr.w	r3, r2, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
			// compute the sum of the denominator in the error formula
			sum_of_bits += bit_i;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	4413      	add	r3, r2
 8000970:	617b      	str	r3, [r7, #20]
			// compute the sum of the numerator in the error formula
			e += bit_i * w[i];
 8000972:	4a8f      	ldr	r2, [pc, #572]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	4413      	add	r3, r2
 8000978:	f993 3000 	ldrsb.w	r3, [r3]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	fb12 f303 	smulbb	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b8b      	ldr	r3, [pc, #556]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000988:	f993 3000 	ldrsb.w	r3, [r3]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4413      	add	r3, r2
 8000990:	b2db      	uxtb	r3, r3
 8000992:	b25a      	sxtb	r2, r3
 8000994:	4b87      	ldr	r3, [pc, #540]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000996:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	3301      	adds	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	ddd8      	ble.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x46>
		}

		if (sum_of_bits != 0)	 // avoiding division by zero
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d00a      	beq.n	80009c0 <HAL_TIM_PeriodElapsedCallback+0xb0>
			e = e / sum_of_bits;
 80009aa:	4b82      	ldr	r3, [pc, #520]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009ac:	f993 3000 	ldrsb.w	r3, [r3]
 80009b0:	461a      	mov	r2, r3
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80009b8:	b25a      	sxtb	r2, r3
 80009ba:	4b7e      	ldr	r3, [pc, #504]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e010      	b.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0xd2>

		// if previous values were not zero, and current value is zero, then increase the error to correct the YAW
		else if (prev_error < 0) // if previous error was negative
 80009c0:	4b7d      	ldr	r3, [pc, #500]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80009c2:	f993 3000 	ldrsb.w	r3, [r3]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	da03      	bge.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0xc2>
			e = -40;
 80009ca:	4b7a      	ldr	r3, [pc, #488]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009cc:	22d8      	movs	r2, #216	; 0xd8
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	e007      	b.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0xd2>
		else if (prev_error > 0) // if was positive
 80009d2:	4b79      	ldr	r3, [pc, #484]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80009d4:	f993 3000 	ldrsb.w	r3, [r3]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	dd02      	ble.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0xd2>
			e = 40;
 80009dc:	4b75      	ldr	r3, [pc, #468]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009de:	2228      	movs	r2, #40	; 0x28
 80009e0:	701a      	strb	r2, [r3, #0]

		//printf("Error:%d",e);
		// store current error for next iteration
		prev_error = e;
 80009e2:	4b74      	ldr	r3, [pc, #464]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009e4:	f993 2000 	ldrsb.w	r2, [r3]
 80009e8:	4b73      	ldr	r3, [pc, #460]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80009ea:	701a      	strb	r2, [r3, #0]
		// ------ END LINE SENSOR ERROR READING ------



		// ---------- PID LINE SENSOR ERROR  ----------
		apply_pid(&pid_line, e, 3, 100); // 3 is the pid_line.output limit
 80009ec:	4b71      	ldr	r3, [pc, #452]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009ee:	f993 3000 	ldrsb.w	r3, [r3]
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009fa:	2264      	movs	r2, #100	; 0x64
 80009fc:	2103      	movs	r1, #3
 80009fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000a02:	486e      	ldr	r0, [pc, #440]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a04:	f7ff fee0 	bl	80007c8 <apply_pid>
		SPEED_REFERENCE_A = BASE_SPEED + pid_line.output;
 8000a08:	4b6c      	ldr	r3, [pc, #432]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a0a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000a0e:	4b6c      	ldr	r3, [pc, #432]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a10:	edd3 7a00 	vldr	s15, [r3]
 8000a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a18:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a1a:	edc3 7a00 	vstr	s15, [r3]
		SPEED_REFERENCE_B = BASE_SPEED - pid_line.output;
 8000a1e:	4b68      	ldr	r3, [pc, #416]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a20:	ed93 7a00 	vldr	s14, [r3]
 8000a24:	4b65      	ldr	r3, [pc, #404]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a26:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a2e:	4b66      	ldr	r3, [pc, #408]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a30:	edc3 7a00 	vstr	s15, [r3]



		// ---------- PID TO RUN MOTOR ------------

		if(pid_A.p_gain != 0 || pid_A.i_gain != 0 || pid_A.d_gain != 0)
 8000a34:	4b65      	ldr	r3, [pc, #404]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a36:	edd3 7a00 	vldr	s15, [r3]
 8000a3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	d10f      	bne.n	8000a64 <HAL_TIM_PeriodElapsedCallback+0x154>
 8000a44:	4b61      	ldr	r3, [pc, #388]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a46:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a52:	d107      	bne.n	8000a64 <HAL_TIM_PeriodElapsedCallback+0x154>
 8000a54:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a56:	edd3 7a02 	vldr	s15, [r3, #8]
 8000a5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a62:	d034      	beq.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x1be>
		{
			apply_pid(&pid_A, SPEED_REFERENCE_A - encoder_instance_motA.radians_second, 100, 100); //96000000/(960*1000) = 100
 8000a64:	4b57      	ldr	r3, [pc, #348]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a66:	ed93 7a00 	vldr	s14, [r3]
 8000a6a:	4b4c      	ldr	r3, [pc, #304]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a74:	2264      	movs	r2, #100	; 0x64
 8000a76:	2164      	movs	r1, #100	; 0x64
 8000a78:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7c:	4853      	ldr	r0, [pc, #332]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a7e:	f7ff fea3 	bl	80007c8 <apply_pid>
			if(pid_A.output > 0)
 8000a82:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a84:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a90:	dd0e      	ble.n	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			{
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (int32_t)pid_A.output);
 8000a92:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a94:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a9c:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	ee17 2a90 	vmov	r2, s15
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000aa6:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	639a      	str	r2, [r3, #56]	; 0x38
			if(pid_A.output > 0)
 8000aae:	e016      	b.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x1ce>
			}
			else
			{
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (int32_t)pid_A.output);
 8000ab8:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000aba:	edd3 7a05 	vldr	s15, [r3, #20]
 8000abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac2:	4b43      	ldr	r3, [pc, #268]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	ee17 2a90 	vmov	r2, s15
 8000aca:	639a      	str	r2, [r3, #56]	; 0x38
			if(pid_A.output > 0)
 8000acc:	e007      	b.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x1ce>
			}
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // value between 0 and ARR (in our case, for TIM8, ARR = 399)
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2200      	movs	r2, #0
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
		}

		if(pid_B.p_gain != 0 || pid_B.i_gain != 0 || pid_B.d_gain != 0)
 8000ade:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ae0:	edd3 7a00 	vldr	s15, [r3]
 8000ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aec:	d10f      	bne.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x1fe>
 8000aee:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000af4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afc:	d107      	bne.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x1fe>
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000b00:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b0c:	d034      	beq.n	8000b78 <HAL_TIM_PeriodElapsedCallback+0x268>
		{
			apply_pid(&pid_B, SPEED_REFERENCE_B - encoder_instance_motB.radians_second, 100,100); //96000000/(960*1000) = 100
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b10:	ed93 7a00 	vldr	s14, [r3]
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000b16:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b1e:	2264      	movs	r2, #100	; 0x64
 8000b20:	2164      	movs	r1, #100	; 0x64
 8000b22:	eeb0 0a67 	vmov.f32	s0, s15
 8000b26:	482b      	ldr	r0, [pc, #172]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000b28:	f7ff fe4e 	bl	80007c8 <apply_pid>

			if(pid_B.output > 0)
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000b2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3a:	dd0e      	ble.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x24a>
			{
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (int32_t)pid_B.output);
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000b3e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	ee17 2a90 	vmov	r2, s15
 8000b4e:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
			if(pid_B.output > 0)
 8000b58:	e017      	b.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x27a>
			}
			else
			{
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (int32_t)pid_B.output);
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000b64:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	ee17 2a90 	vmov	r2, s15
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
			if(pid_B.output > 0)
 8000b76:	e008      	b.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x27a>
			}
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0); // value between 0 and ARR (in our case, for TIM8, ARR = 399)
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2200      	movs	r2, #0
 8000b86:	641a      	str	r2, [r3, #64]	; 0x40

		// ---------- END PID TO RUN MOTOR ------------


	}
}
 8000b88:	e7ff      	b.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x27a>
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40001000 	.word	0x40001000
 8000b98:	200003ec 	.word	0x200003ec
 8000b9c:	20000934 	.word	0x20000934
 8000ba0:	20000438 	.word	0x20000438
 8000ba4:	20000940 	.word	0x20000940
 8000ba8:	20000994 	.word	0x20000994
 8000bac:	20000248 	.word	0x20000248
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	20000930 	.word	0x20000930
 8000bb8:	2000000c 	.word	0x2000000c
 8000bbc:	2000097c 	.word	0x2000097c
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000928 	.word	0x20000928
 8000bc8:	2000092c 	.word	0x2000092c
 8000bcc:	2000094c 	.word	0x2000094c
 8000bd0:	2000051c 	.word	0x2000051c
 8000bd4:	20000964 	.word	0x20000964

08000bd8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be8:	d102      	bne.n	8000bf0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		printf("INTERUPT \n");
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x20>)
 8000bec:	f007 fdc2 	bl	8008774 <puts>
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	0800a5b8 	.word	0x0800a5b8

08000bfc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c02:	f001 ff8a 	bl	8002b1a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c06:	f000 f96d 	bl	8000ee4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c0a:	f000 ffc5 	bl	8001b98 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000c0e:	f000 ff93 	bl	8001b38 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000c12:	f000 f9d9 	bl	8000fc8 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000c16:	f000 fa29 	bl	800106c <MX_I2C1_Init>
	MX_I2C2_Init();
 8000c1a:	f000 fa67 	bl	80010ec <MX_I2C2_Init>
	MX_SPI1_Init();
 8000c1e:	f000 faa5 	bl	800116c <MX_SPI1_Init>
	MX_TIM1_Init();
 8000c22:	f000 fae1 	bl	80011e8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000c26:	f000 fbaf 	bl	8001388 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000c2a:	f000 fc47 	bl	80014bc <MX_TIM3_Init>
	MX_TIM4_Init();
 8000c2e:	f000 fc9b 	bl	8001568 <MX_TIM4_Init>
	MX_TIM5_Init();
 8000c32:	f000 fcef 	bl	8001614 <MX_TIM5_Init>
	MX_TIM8_Init();
 8000c36:	f000 fd9d 	bl	8001774 <MX_TIM8_Init>
	MX_UART4_Init();
 8000c3a:	f000 febd 	bl	80019b8 <MX_UART4_Init>
	MX_UART5_Init();
 8000c3e:	f000 feeb 	bl	8001a18 <MX_UART5_Init>
	MX_USART1_UART_Init();
 8000c42:	f000 ff19 	bl	8001a78 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000c46:	f000 ff47 	bl	8001ad8 <MX_USART2_UART_Init>
	MX_TIM9_Init();
 8000c4a:	f000 fe65 	bl	8001918 <MX_TIM9_Init>
	MX_TIM6_Init();
 8000c4e:	f000 fd59 	bl	8001704 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	//--------------------------------------------------------------------------------------------

	/* Disable LCD SPI SS */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2110      	movs	r1, #16
 8000c56:	4892      	ldr	r0, [pc, #584]	; (8000ea0 <main+0x2a4>)
 8000c58:	f002 fd32 	bl	80036c0 <HAL_GPIO_WritePin>
	/* Disable EXTI2_IRQ during SX1509 initialization */
	//HAL_NVIC_DisableIRQ(EXTI2_IRQn);

	/* Software reset */
	data = 0x12;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000c60:	23c8      	movs	r3, #200	; 0xc8
 8000c62:	9302      	str	r3, [sp, #8]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	227d      	movs	r2, #125	; 0x7d
 8000c70:	217c      	movs	r1, #124	; 0x7c
 8000c72:	488c      	ldr	r0, [pc, #560]	; (8000ea4 <main+0x2a8>)
 8000c74:	f002 fde6 	bl	8003844 <HAL_I2C_Mem_Write>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d004      	beq.n	8000c8c <main+0x90>
		printf("I2C communication error (%X).\n", status);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4888      	ldr	r0, [pc, #544]	; (8000ea8 <main+0x2ac>)
 8000c88:	f007 fd0e 	bl	80086a8 <iprintf>

	data = 0x34;
 8000c8c:	2334      	movs	r3, #52	; 0x34
 8000c8e:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000c90:	23c8      	movs	r3, #200	; 0xc8
 8000c92:	9302      	str	r3, [sp, #8]
 8000c94:	2301      	movs	r3, #1
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	1dbb      	adds	r3, r7, #6
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	227d      	movs	r2, #125	; 0x7d
 8000ca0:	217c      	movs	r1, #124	; 0x7c
 8000ca2:	4880      	ldr	r0, [pc, #512]	; (8000ea4 <main+0x2a8>)
 8000ca4:	f002 fdce 	bl	8003844 <HAL_I2C_Mem_Write>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d004      	beq.n	8000cbc <main+0xc0>
		printf("I2C communication error (%X).\n", status);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	487c      	ldr	r0, [pc, #496]	; (8000ea8 <main+0x2ac>)
 8000cb8:	f007 fcf6 	bl	80086a8 <iprintf>

	HAL_Delay(100);
 8000cbc:	2064      	movs	r0, #100	; 0x64
 8000cbe:	f001 ff89 	bl	8002bd4 <HAL_Delay>

	/* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8000cc2:	23ff      	movs	r3, #255	; 0xff
 8000cc4:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000cc6:	23c8      	movs	r3, #200	; 0xc8
 8000cc8:	9302      	str	r3, [sp, #8]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	1dbb      	adds	r3, r7, #6
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	217c      	movs	r1, #124	; 0x7c
 8000cd8:	4872      	ldr	r0, [pc, #456]	; (8000ea4 <main+0x2a8>)
 8000cda:	f002 fdb3 	bl	8003844 <HAL_I2C_Mem_Write>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d004      	beq.n	8000cf2 <main+0xf6>
		printf("I2C communication error (%X).\n", status);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4619      	mov	r1, r3
 8000cec:	486e      	ldr	r0, [pc, #440]	; (8000ea8 <main+0x2ac>)
 8000cee:	f007 fcdb 	bl	80086a8 <iprintf>

	/* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8000cf2:	23ff      	movs	r3, #255	; 0xff
 8000cf4:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000cf6:	23c8      	movs	r3, #200	; 0xc8
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	1dbb      	adds	r3, r7, #6
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2301      	movs	r3, #1
 8000d04:	220e      	movs	r2, #14
 8000d06:	217c      	movs	r1, #124	; 0x7c
 8000d08:	4866      	ldr	r0, [pc, #408]	; (8000ea4 <main+0x2a8>)
 8000d0a:	f002 fd9b 	bl	8003844 <HAL_I2C_Mem_Write>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <main+0x126>
		printf("I2C communication error (%X).\n", status);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4862      	ldr	r0, [pc, #392]	; (8000ea8 <main+0x2ac>)
 8000d1e:	f007 fcc3 	bl	80086a8 <iprintf>

	/* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
	data = 0x00;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000d26:	23c8      	movs	r3, #200	; 0xc8
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	2213      	movs	r2, #19
 8000d36:	217c      	movs	r1, #124	; 0x7c
 8000d38:	485a      	ldr	r0, [pc, #360]	; (8000ea4 <main+0x2a8>)
 8000d3a:	f002 fd83 	bl	8003844 <HAL_I2C_Mem_Write>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d004      	beq.n	8000d52 <main+0x156>
		printf("I2C communication error (%X).\n", status);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4856      	ldr	r0, [pc, #344]	; (8000ea8 <main+0x2ac>)
 8000d4e:	f007 fcab 	bl	80086a8 <iprintf>

	/* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 8000d52:	23aa      	movs	r3, #170	; 0xaa
 8000d54:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000d56:	23c8      	movs	r3, #200	; 0xc8
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	1dbb      	adds	r3, r7, #6
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2301      	movs	r3, #1
 8000d64:	2216      	movs	r2, #22
 8000d66:	217c      	movs	r1, #124	; 0x7c
 8000d68:	484e      	ldr	r0, [pc, #312]	; (8000ea4 <main+0x2a8>)
 8000d6a:	f002 fd6b 	bl	8003844 <HAL_I2C_Mem_Write>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <main+0x186>
		printf("I2C communication error (%X).\n", status);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	484a      	ldr	r0, [pc, #296]	; (8000ea8 <main+0x2ac>)
 8000d7e:	f007 fc93 	bl	80086a8 <iprintf>

	/* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 8000d82:	23aa      	movs	r3, #170	; 0xaa
 8000d84:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000d86:	23c8      	movs	r3, #200	; 0xc8
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	1dbb      	adds	r3, r7, #6
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	2217      	movs	r2, #23
 8000d96:	217c      	movs	r1, #124	; 0x7c
 8000d98:	4842      	ldr	r0, [pc, #264]	; (8000ea4 <main+0x2a8>)
 8000d9a:	f002 fd53 	bl	8003844 <HAL_I2C_Mem_Write>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <main+0x1b6>
		printf("I2C communication error (%X).\n", status);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	4619      	mov	r1, r3
 8000dac:	483e      	ldr	r0, [pc, #248]	; (8000ea8 <main+0x2ac>)
 8000dae:	f007 fc7b 	bl	80086a8 <iprintf>

	/* Enable EXTI2_IRQ after SX1509 initialization */
	HAL_Delay(100);
 8000db2:	2064      	movs	r0, #100	; 0x64
 8000db4:	f001 ff0e 	bl	8002bd4 <HAL_Delay>
	//HAL_NVIC_EnableIRQ(EXTI2_IRQn);


	printf("Read line sensor \n");
 8000db8:	483c      	ldr	r0, [pc, #240]	; (8000eac <main+0x2b0>)
 8000dba:	f007 fcdb 	bl	8008774 <puts>





	logger.uart_handle = huart3; // for serial
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <main+0x2b4>)
 8000dc0:	4a3c      	ldr	r2, [pc, #240]	; (8000eb4 <main+0x2b8>)
 8000dc2:	3344      	adds	r3, #68	; 0x44
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	2288      	movs	r2, #136	; 0x88
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f007 fe32 	bl	8008a32 <memcpy>
	//logger.uart_handle = huart2; // for wifi

	/* Reset LCD */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	4833      	ldr	r0, [pc, #204]	; (8000ea0 <main+0x2a4>)
 8000dd4:	f002 fc74 	bl	80036c0 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ddc:	f001 fefa 	bl	8002bd4 <HAL_Delay>

	/* Start encoders timers */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000de0:	213c      	movs	r1, #60	; 0x3c
 8000de2:	4835      	ldr	r0, [pc, #212]	; (8000eb8 <main+0x2bc>)
 8000de4:	f005 f81e 	bl	8005e24 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000de8:	213c      	movs	r1, #60	; 0x3c
 8000dea:	4834      	ldr	r0, [pc, #208]	; (8000ebc <main+0x2c0>)
 8000dec:	f005 f81a 	bl	8005e24 <HAL_TIM_Encoder_Start>

	/* Start servomotors PWM (avoid floating inputs to servomotors) */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000df0:	2100      	movs	r1, #0
 8000df2:	4833      	ldr	r0, [pc, #204]	; (8000ec0 <main+0x2c4>)
 8000df4:	f004 fe14 	bl	8005a20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4831      	ldr	r0, [pc, #196]	; (8000ec0 <main+0x2c4>)
 8000dfc:	f004 fe10 	bl	8005a20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000e00:	2108      	movs	r1, #8
 8000e02:	482f      	ldr	r0, [pc, #188]	; (8000ec0 <main+0x2c4>)
 8000e04:	f004 fe0c 	bl	8005a20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000e08:	210c      	movs	r1, #12
 8000e0a:	482d      	ldr	r0, [pc, #180]	; (8000ec0 <main+0x2c4>)
 8000e0c:	f004 fe08 	bl	8005a20 <HAL_TIM_PWM_Start>

	/* Start motor PWM */
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000e10:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <main+0x2c8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000e18:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <main+0x2c8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <main+0x2c8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <main+0x2c8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000e30:	2100      	movs	r1, #0
 8000e32:	4824      	ldr	r0, [pc, #144]	; (8000ec4 <main+0x2c8>)
 8000e34:	f004 fdf4 	bl	8005a20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4822      	ldr	r0, [pc, #136]	; (8000ec4 <main+0x2c8>)
 8000e3c:	f004 fdf0 	bl	8005a20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000e40:	2108      	movs	r1, #8
 8000e42:	4820      	ldr	r0, [pc, #128]	; (8000ec4 <main+0x2c8>)
 8000e44:	f004 fdec 	bl	8005a20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000e48:	210c      	movs	r1, #12
 8000e4a:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <main+0x2c8>)
 8000e4c:	f004 fde8 	bl	8005a20 <HAL_TIM_PWM_Start>

	/* Start speed ctrl ISR */
	HAL_TIM_Base_Start_IT(&htim6);
 8000e50:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <main+0x2cc>)
 8000e52:	f004 fcb5 	bl	80057c0 <HAL_TIM_Base_Start_IT>


	// ########## SET UP HERE THE PID #######################################################################################################################

	// ------------------------- PID MOTOR A (right) -------------------------
	reset_pid(&pid_A);
 8000e56:	481d      	ldr	r0, [pc, #116]	; (8000ecc <main+0x2d0>)
 8000e58:	f7ff fc9f 	bl	800079a <reset_pid>
	set_pid_gains(&pid_A,90,0,0);
 8000e5c:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8000ed0 <main+0x2d4>
 8000e60:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8000ed0 <main+0x2d4>
 8000e64:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8000ed4 <main+0x2d8>
 8000e68:	4818      	ldr	r0, [pc, #96]	; (8000ecc <main+0x2d0>)
 8000e6a:	f7ff fc7d 	bl	8000768 <set_pid_gains>

	// ------------------------- PID MOTOR B (left) --------------------------
	reset_pid(&pid_B);
 8000e6e:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <main+0x2dc>)
 8000e70:	f7ff fc93 	bl	800079a <reset_pid>
	set_pid_gains(&pid_B,90,0,0);
 8000e74:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000ed0 <main+0x2d4>
 8000e78:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000ed0 <main+0x2d4>
 8000e7c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000ed4 <main+0x2d8>
 8000e80:	4815      	ldr	r0, [pc, #84]	; (8000ed8 <main+0x2dc>)
 8000e82:	f7ff fc71 	bl	8000768 <set_pid_gains>

	// -------------------------- PID line sensor ----------------------------
	reset_pid(&pid_line);
 8000e86:	4815      	ldr	r0, [pc, #84]	; (8000edc <main+0x2e0>)
 8000e88:	f7ff fc87 	bl	800079a <reset_pid>
	//I choosed 0.05 bcz for error=40 we have BASE_SPEED - Kp*40 = BASE_SPEED - 2 => a change of 2rad/s in speed
	set_pid_gains(&pid_line,0.05,0,0);
 8000e8c:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8000ed0 <main+0x2d4>
 8000e90:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8000ed0 <main+0x2d4>
 8000e94:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000ee0 <main+0x2e4>
 8000e98:	4810      	ldr	r0, [pc, #64]	; (8000edc <main+0x2e0>)
 8000e9a:	f7ff fc65 	bl	8000768 <set_pid_gains>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000e9e:	e7fe      	b.n	8000e9e <main+0x2a2>
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	20000248 	.word	0x20000248
 8000ea8:	0800a5c4 	.word	0x0800a5c4
 8000eac:	0800a5e4 	.word	0x0800a5e4
 8000eb0:	2000085c 	.word	0x2000085c
 8000eb4:	200007d4 	.word	0x200007d4
 8000eb8:	200003ec 	.word	0x200003ec
 8000ebc:	20000438 	.word	0x20000438
 8000ec0:	20000354 	.word	0x20000354
 8000ec4:	2000051c 	.word	0x2000051c
 8000ec8:	200004d0 	.word	0x200004d0
 8000ecc:	2000094c 	.word	0x2000094c
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	42b40000 	.word	0x42b40000
 8000ed8:	20000964 	.word	0x20000964
 8000edc:	2000097c 	.word	0x2000097c
 8000ee0:	3d4ccccd 	.word	0x3d4ccccd

08000ee4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b094      	sub	sp, #80	; 0x50
 8000ee8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2234      	movs	r2, #52	; 0x34
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f007 fd1e 	bl	8008934 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000f08:	f003 f9fc 	bl	8004304 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <SystemClock_Config+0xdc>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	4a2b      	ldr	r2, [pc, #172]	; (8000fc0 <SystemClock_Config+0xdc>)
 8000f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f16:	6413      	str	r3, [r2, #64]	; 0x40
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <SystemClock_Config+0xdc>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <SystemClock_Config+0xe0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f2c:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <SystemClock_Config+0xe0>)
 8000f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <SystemClock_Config+0xe0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f48:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000f54:	2304      	movs	r3, #4
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000f58:	2360      	movs	r3, #96	; 0x60
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f60:	2304      	movs	r3, #4
 8000f62:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 fa29 	bl	80043c4 <HAL_RCC_OscConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000f78:	f000 ff64 	bl	8001e44 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f7c:	f003 f9d2 	bl	8004324 <HAL_PWREx_EnableOverDrive>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000f86:	f000 ff5d 	bl	8001e44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	2103      	movs	r1, #3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fcba 	bl	8004920 <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000fb2:	f000 ff47 	bl	8001e44 <Error_Handler>
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	3750      	adds	r7, #80	; 0x50
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40007000 	.word	0x40007000

08000fc8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_ADC1_Init+0x98>)
 8000fdc:	4a21      	ldr	r2, [pc, #132]	; (8001064 <MX_ADC1_Init+0x9c>)
 8000fde:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_ADC1_Init+0x98>)
 8000fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fe6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_ADC1_Init+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_ADC1_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_ADC1_Init+0x98>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_ADC1_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_ADC1_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_ADC1_Init+0x98>)
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <MX_ADC1_Init+0xa0>)
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_ADC1_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_ADC1_Init+0x98>)
 8001016:	2201      	movs	r2, #1
 8001018:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_ADC1_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_ADC1_Init+0x98>)
 8001024:	2201      	movs	r2, #1
 8001026:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_ADC1_Init+0x98>)
 800102a:	f001 fdf7 	bl	8002c1c <HAL_ADC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001034:	f000 ff06 	bl	8001e44 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001038:	2303      	movs	r3, #3
 800103a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800103c:	2301      	movs	r3, #1
 800103e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_ADC1_Init+0x98>)
 800104a:	f001 fe2b 	bl	8002ca4 <HAL_ADC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001054:	f000 fef6 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000200 	.word	0x20000200
 8001064:	40012000 	.word	0x40012000
 8001068:	0f000001 	.word	0x0f000001

0800106c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <MX_I2C1_Init+0x78>)
 8001074:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <MX_I2C1_Init+0x7c>)
 800107a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_I2C1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001084:	2201      	movs	r2, #1
 8001086:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_I2C1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_I2C1_Init+0x74>)
 80010a8:	f002 fb3c 	bl	8003724 <HAL_I2C_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80010b2:	f000 fec7 	bl	8001e44 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4809      	ldr	r0, [pc, #36]	; (80010e0 <MX_I2C1_Init+0x74>)
 80010ba:	f003 f88b 	bl	80041d4 <HAL_I2CEx_ConfigAnalogFilter>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80010c4:	f000 febe 	bl	8001e44 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c8:	2100      	movs	r1, #0
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_I2C1_Init+0x74>)
 80010cc:	f003 f8cd 	bl	800426a <HAL_I2CEx_ConfigDigitalFilter>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80010d6:	f000 feb5 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000248 	.word	0x20000248
 80010e4:	40005400 	.word	0x40005400
 80010e8:	20303e5d 	.word	0x20303e5d

080010ec <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_I2C2_Init+0x74>)
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <MX_I2C2_Init+0x78>)
 80010f4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_I2C2_Init+0x74>)
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <MX_I2C2_Init+0x7c>)
 80010fa:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_I2C2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_I2C2_Init+0x74>)
 8001104:	2201      	movs	r2, #1
 8001106:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_I2C2_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_I2C2_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C2_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C2_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C2_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <MX_I2C2_Init+0x74>)
 8001128:	f002 fafc 	bl	8003724 <HAL_I2C_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8001132:	f000 fe87 	bl	8001e44 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <MX_I2C2_Init+0x74>)
 800113a:	f003 f84b 	bl	80041d4 <HAL_I2CEx_ConfigAnalogFilter>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001144:	f000 fe7e 	bl	8001e44 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_I2C2_Init+0x74>)
 800114c:	f003 f88d 	bl	800426a <HAL_I2CEx_ConfigDigitalFilter>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001156:	f000 fe75 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000029c 	.word	0x2000029c
 8001164:	40005800 	.word	0x40005800
 8001168:	20303e5d 	.word	0x20303e5d

0800116c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_SPI1_Init+0x74>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <MX_SPI1_Init+0x78>)
 8001174:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_SPI1_Init+0x74>)
 8001178:	f44f 7282 	mov.w	r2, #260	; 0x104
 800117c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_SPI1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_SPI1_Init+0x74>)
 8001186:	f44f 7240 	mov.w	r2, #768	; 0x300
 800118a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_SPI1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_SPI1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_SPI1_Init+0x74>)
 800119a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_SPI1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_SPI1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_SPI1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_SPI1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_SPI1_Init+0x74>)
 80011ba:	2207      	movs	r2, #7
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_SPI1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_SPI1_Init+0x74>)
 80011c6:	2208      	movs	r2, #8
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_SPI1_Init+0x74>)
 80011cc:	f004 f9f6 	bl	80055bc <HAL_SPI_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 80011d6:	f000 fe35 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002f0 	.word	0x200002f0
 80011e4:	40013000 	.word	0x40013000

080011e8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b09a      	sub	sp, #104	; 0x68
 80011ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	222c      	movs	r2, #44	; 0x2c
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f007 fb86 	bl	8008934 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001228:	4b55      	ldr	r3, [pc, #340]	; (8001380 <MX_TIM1_Init+0x198>)
 800122a:	4a56      	ldr	r2, [pc, #344]	; (8001384 <MX_TIM1_Init+0x19c>)
 800122c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800122e:	4b54      	ldr	r3, [pc, #336]	; (8001380 <MX_TIM1_Init+0x198>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b52      	ldr	r3, [pc, #328]	; (8001380 <MX_TIM1_Init+0x198>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 800123a:	4b51      	ldr	r3, [pc, #324]	; (8001380 <MX_TIM1_Init+0x198>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <MX_TIM1_Init+0x198>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001246:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <MX_TIM1_Init+0x198>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <MX_TIM1_Init+0x198>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001252:	484b      	ldr	r0, [pc, #300]	; (8001380 <MX_TIM1_Init+0x198>)
 8001254:	f004 fa5d 	bl	8005712 <HAL_TIM_Base_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 800125e:	f000 fdf1 	bl	8001e44 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001268:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800126c:	4619      	mov	r1, r3
 800126e:	4844      	ldr	r0, [pc, #272]	; (8001380 <MX_TIM1_Init+0x198>)
 8001270:	f005 f9b0 	bl	80065d4 <HAL_TIM_ConfigClockSource>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 800127a:	f000 fde3 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800127e:	4840      	ldr	r0, [pc, #256]	; (8001380 <MX_TIM1_Init+0x198>)
 8001280:	f004 fb16 	bl	80058b0 <HAL_TIM_OC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 800128a:	f000 fddb 	bl	8001e44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800129e:	4619      	mov	r1, r3
 80012a0:	4837      	ldr	r0, [pc, #220]	; (8001380 <MX_TIM1_Init+0x198>)
 80012a2:	f005 ff71 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xc8>
	{
		Error_Handler();
 80012ac:	f000 fdca 	bl	8001e44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80012b0:	2350      	movs	r3, #80	; 0x50
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80012b8:	2302      	movs	r3, #2
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	482a      	ldr	r0, [pc, #168]	; (8001380 <MX_TIM1_Init+0x198>)
 80012d6:	f004 ff53 	bl	8006180 <HAL_TIM_OC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0xfc>
	{
		Error_Handler();
 80012e0:	f000 fdb0 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e8:	2204      	movs	r2, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4824      	ldr	r0, [pc, #144]	; (8001380 <MX_TIM1_Init+0x198>)
 80012ee:	f004 ff47 	bl	8006180 <HAL_TIM_OC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x114>
	{
		Error_Handler();
 80012f8:	f000 fda4 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001300:	2208      	movs	r2, #8
 8001302:	4619      	mov	r1, r3
 8001304:	481e      	ldr	r0, [pc, #120]	; (8001380 <MX_TIM1_Init+0x198>)
 8001306:	f004 ff3b 	bl	8006180 <HAL_TIM_OC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x12c>
	{
		Error_Handler();
 8001310:	f000 fd98 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001314:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001318:	220c      	movs	r2, #12
 800131a:	4619      	mov	r1, r3
 800131c:	4818      	ldr	r0, [pc, #96]	; (8001380 <MX_TIM1_Init+0x198>)
 800131e:	f004 ff2f 	bl	8006180 <HAL_TIM_OC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x144>
	{
		Error_Handler();
 8001328:	f000 fd8c 	bl	8001e44 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001344:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800134e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM1_Init+0x198>)
 8001362:	f005 ff9f 	bl	80072a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0x188>
	{
		Error_Handler();
 800136c:	f000 fd6a 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM1_Init+0x198>)
 8001372:	f001 f829 	bl	80023c8 <HAL_TIM_MspPostInit>

}
 8001376:	bf00      	nop
 8001378:	3768      	adds	r7, #104	; 0x68
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000354 	.word	0x20000354
 8001384:	40010000 	.word	0x40010000

08001388 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b092      	sub	sp, #72	; 0x48
 800138c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <MX_TIM2_Init+0x130>)
 80013ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ce:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80013d0:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <MX_TIM2_Init+0x130>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <MX_TIM2_Init+0x130>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80013dc:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <MX_TIM2_Init+0x130>)
 80013de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013e2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <MX_TIM2_Init+0x130>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MX_TIM2_Init+0x130>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f0:	4831      	ldr	r0, [pc, #196]	; (80014b8 <MX_TIM2_Init+0x130>)
 80013f2:	f004 f98e 	bl	8005712 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 80013fc:	f000 fd22 	bl	8001e44 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001406:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800140a:	4619      	mov	r1, r3
 800140c:	482a      	ldr	r0, [pc, #168]	; (80014b8 <MX_TIM2_Init+0x130>)
 800140e:	f005 f8e1 	bl	80065d4 <HAL_TIM_ConfigClockSource>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8001418:	f000 fd14 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800141c:	4826      	ldr	r0, [pc, #152]	; (80014b8 <MX_TIM2_Init+0x130>)
 800141e:	f004 faa8 	bl	8005972 <HAL_TIM_PWM_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0xa4>
	{
		Error_Handler();
 8001428:	f000 fd0c 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800142c:	4822      	ldr	r0, [pc, #136]	; (80014b8 <MX_TIM2_Init+0x130>)
 800142e:	f004 fbf1 	bl	8005c14 <HAL_TIM_IC_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001438:	f000 fd04 	bl	8001e44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001448:	4619      	mov	r1, r3
 800144a:	481b      	ldr	r0, [pc, #108]	; (80014b8 <MX_TIM2_Init+0x130>)
 800144c:	f005 fe9c 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0xd2>
	{
		Error_Handler();
 8001456:	f000 fcf5 	bl	8001e44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145a:	2360      	movs	r3, #96	; 0x60
 800145c:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	4811      	ldr	r0, [pc, #68]	; (80014b8 <MX_TIM2_Init+0x130>)
 8001474:	f004 ff9a 	bl	80063ac <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0xfa>
	{
		Error_Handler();
 800147e:	f000 fce1 	bl	8001e44 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001486:	2301      	movs	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	2208      	movs	r2, #8
 8001496:	4619      	mov	r1, r3
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <MX_TIM2_Init+0x130>)
 800149a:	f004 feeb 	bl	8006274 <HAL_TIM_IC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x120>
	{
		Error_Handler();
 80014a4:	f000 fcce 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <MX_TIM2_Init+0x130>)
 80014aa:	f000 ff8d 	bl	80023c8 <HAL_TIM_MspPostInit>

}
 80014ae:	bf00      	nop
 80014b0:	3748      	adds	r7, #72	; 0x48
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200003a0 	.word	0x200003a0

080014bc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	2224      	movs	r2, #36	; 0x24
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f007 fa32 	bl	8008934 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_TIM3_Init+0xa4>)
 80014dc:	4a21      	ldr	r2, [pc, #132]	; (8001564 <MX_TIM3_Init+0xa8>)
 80014de:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <MX_TIM3_Init+0xa4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <MX_TIM3_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = TIM3_ARR_VALUE;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MX_TIM3_Init+0xa4>)
 80014ee:	f640 62ff 	movw	r2, #3839	; 0xeff
 80014f2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_TIM3_Init+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_TIM3_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001500:	2303      	movs	r3, #3
 8001502:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001508:	2301      	movs	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8001510:	230f      	movs	r3, #15
 8001512:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001518:	2301      	movs	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 8001520:	230f      	movs	r3, #15
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_TIM3_Init+0xa4>)
 800152c:	f004 fbd4 	bl	8005cd8 <HAL_TIM_Encoder_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 8001536:	f000 fc85 	bl	8001e44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_TIM3_Init+0xa4>)
 8001548:	f005 fe1e 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8001552:	f000 fc77 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3730      	adds	r7, #48	; 0x30
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200003ec 	.word	0x200003ec
 8001564:	40000400 	.word	0x40000400

08001568 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	; 0x30
 800156c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2224      	movs	r2, #36	; 0x24
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f007 f9dc 	bl	8008934 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_TIM4_Init+0xa4>)
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <MX_TIM4_Init+0xa8>)
 800158a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_TIM4_Init+0xa4>)
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_TIM4_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = TIM4_ARR_VALUE;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_TIM4_Init+0xa4>)
 800159a:	f640 62ff 	movw	r2, #3839	; 0xeff
 800159e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_TIM4_Init+0xa4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_TIM4_Init+0xa4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ac:	2303      	movs	r3, #3
 80015ae:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015b4:	2301      	movs	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 80015bc:	230f      	movs	r3, #15
 80015be:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015c4:	2301      	movs	r3, #1
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 80015cc:	230f      	movs	r3, #15
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_TIM4_Init+0xa4>)
 80015d8:	f004 fb7e 	bl	8005cd8 <HAL_TIM_Encoder_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM4_Init+0x7e>
	{
		Error_Handler();
 80015e2:	f000 fc2f 	bl	8001e44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_TIM4_Init+0xa4>)
 80015f4:	f005 fdc8 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM4_Init+0x9a>
	{
		Error_Handler();
 80015fe:	f000 fc21 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000438 	.word	0x20000438
 8001610:	40000800 	.word	0x40000800

08001614 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <MX_TIM5_Init+0xe8>)
 8001648:	4a2d      	ldr	r2, [pc, #180]	; (8001700 <MX_TIM5_Init+0xec>)
 800164a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <MX_TIM5_Init+0xe8>)
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <MX_TIM5_Init+0xe8>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_TIM5_Init+0xe8>)
 800165a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800165e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b26      	ldr	r3, [pc, #152]	; (80016fc <MX_TIM5_Init+0xe8>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <MX_TIM5_Init+0xe8>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800166c:	4823      	ldr	r0, [pc, #140]	; (80016fc <MX_TIM5_Init+0xe8>)
 800166e:	f004 f850 	bl	8005712 <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 8001678:	f000 fbe4 	bl	8001e44 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001686:	4619      	mov	r1, r3
 8001688:	481c      	ldr	r0, [pc, #112]	; (80016fc <MX_TIM5_Init+0xe8>)
 800168a:	f004 ffa3 	bl	80065d4 <HAL_TIM_ConfigClockSource>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 8001694:	f000 fbd6 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001698:	4818      	ldr	r0, [pc, #96]	; (80016fc <MX_TIM5_Init+0xe8>)
 800169a:	f004 f96a 	bl	8005972 <HAL_TIM_PWM_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 80016a4:	f000 fbce 	bl	8001e44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	4811      	ldr	r0, [pc, #68]	; (80016fc <MX_TIM5_Init+0xe8>)
 80016b8:	f005 fd66 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 80016c2:	f000 fbbf 	bl	8001e44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c6:	2360      	movs	r3, #96	; 0x60
 80016c8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d6:	463b      	mov	r3, r7
 80016d8:	2200      	movs	r2, #0
 80016da:	4619      	mov	r1, r3
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <MX_TIM5_Init+0xe8>)
 80016de:	f004 fe65 	bl	80063ac <HAL_TIM_PWM_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 80016e8:	f000 fbac 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <MX_TIM5_Init+0xe8>)
 80016ee:	f000 fe6b 	bl	80023c8 <HAL_TIM_MspPostInit>

}
 80016f2:	bf00      	nop
 80016f4:	3738      	adds	r7, #56	; 0x38
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000484 	.word	0x20000484
 8001700:	40000c00 	.word	0x40000c00

08001704 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_TIM6_Init+0x68>)
 8001716:	4a16      	ldr	r2, [pc, #88]	; (8001770 <MX_TIM6_Init+0x6c>)
 8001718:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = TIM6_PSC_VALUE;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_TIM6_Init+0x68>)
 800171c:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001720:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_TIM6_Init+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = TIM6_ARR_VALUE;
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <MX_TIM6_Init+0x68>)
 800172a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800172e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_TIM6_Init+0x68>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <MX_TIM6_Init+0x68>)
 8001738:	f003 ffeb 	bl	8005712 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM6_Init+0x42>
	{
		Error_Handler();
 8001742:	f000 fb7f 	bl	8001e44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_TIM6_Init+0x68>)
 8001754:	f005 fd18 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM6_Init+0x5e>
	{
		Error_Handler();
 800175e:	f000 fb71 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200004d0 	.word	0x200004d0
 8001770:	40001000 	.word	0x40001000

08001774 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b09a      	sub	sp, #104	; 0x68
 8001778:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	222c      	movs	r2, #44	; 0x2c
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f007 f8c0 	bl	8008934 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80017b4:	4b56      	ldr	r3, [pc, #344]	; (8001910 <MX_TIM8_Init+0x19c>)
 80017b6:	4a57      	ldr	r2, [pc, #348]	; (8001914 <MX_TIM8_Init+0x1a0>)
 80017b8:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80017ba:	4b55      	ldr	r3, [pc, #340]	; (8001910 <MX_TIM8_Init+0x19c>)
 80017bc:	f240 32bf 	movw	r2, #959	; 0x3bf
 80017c0:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b53      	ldr	r3, [pc, #332]	; (8001910 <MX_TIM8_Init+0x19c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = TIM8_ARR_VALUE;
 80017c8:	4b51      	ldr	r3, [pc, #324]	; (8001910 <MX_TIM8_Init+0x19c>)
 80017ca:	f240 128f 	movw	r2, #399	; 0x18f
 80017ce:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <MX_TIM8_Init+0x19c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80017d6:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <MX_TIM8_Init+0x19c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <MX_TIM8_Init+0x19c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017e2:	484b      	ldr	r0, [pc, #300]	; (8001910 <MX_TIM8_Init+0x19c>)
 80017e4:	f003 ff95 	bl	8005712 <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM8_Init+0x7e>
	{
		Error_Handler();
 80017ee:	f000 fb29 	bl	8001e44 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f6:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017fc:	4619      	mov	r1, r3
 80017fe:	4844      	ldr	r0, [pc, #272]	; (8001910 <MX_TIM8_Init+0x19c>)
 8001800:	f004 fee8 	bl	80065d4 <HAL_TIM_ConfigClockSource>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM8_Init+0x9a>
	{
		Error_Handler();
 800180a:	f000 fb1b 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800180e:	4840      	ldr	r0, [pc, #256]	; (8001910 <MX_TIM8_Init+0x19c>)
 8001810:	f004 f8af 	bl	8005972 <HAL_TIM_PWM_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM8_Init+0xaa>
	{
		Error_Handler();
 800181a:	f000 fb13 	bl	8001e44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800182a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800182e:	4619      	mov	r1, r3
 8001830:	4837      	ldr	r0, [pc, #220]	; (8001910 <MX_TIM8_Init+0x19c>)
 8001832:	f005 fca9 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM8_Init+0xcc>
	{
		Error_Handler();
 800183c:	f000 fb02 	bl	8001e44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001840:	2360      	movs	r3, #96	; 0x60
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800184c:	2300      	movs	r3, #0
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	482a      	ldr	r0, [pc, #168]	; (8001910 <MX_TIM8_Init+0x19c>)
 8001866:	f004 fda1 	bl	80063ac <HAL_TIM_PWM_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM8_Init+0x100>
	{
		Error_Handler();
 8001870:	f000 fae8 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001878:	2204      	movs	r2, #4
 800187a:	4619      	mov	r1, r3
 800187c:	4824      	ldr	r0, [pc, #144]	; (8001910 <MX_TIM8_Init+0x19c>)
 800187e:	f004 fd95 	bl	80063ac <HAL_TIM_PWM_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM8_Init+0x118>
	{
		Error_Handler();
 8001888:	f000 fadc 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800188c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001890:	2208      	movs	r2, #8
 8001892:	4619      	mov	r1, r3
 8001894:	481e      	ldr	r0, [pc, #120]	; (8001910 <MX_TIM8_Init+0x19c>)
 8001896:	f004 fd89 	bl	80063ac <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM8_Init+0x130>
	{
		Error_Handler();
 80018a0:	f000 fad0 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a8:	220c      	movs	r2, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM8_Init+0x19c>)
 80018ae:	f004 fd7d 	bl	80063ac <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM8_Init+0x148>
	{
		Error_Handler();
 80018b8:	f000 fac4 	bl	8001e44 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM8_Init+0x19c>)
 80018f2:	f005 fcd7 	bl	80072a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM8_Init+0x18c>
	{
		Error_Handler();
 80018fc:	f000 faa2 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM8_Init+0x19c>)
 8001902:	f000 fd61 	bl	80023c8 <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3768      	adds	r7, #104	; 0x68
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000051c 	.word	0x2000051c
 8001914:	40010400 	.word	0x40010400

08001918 <MX_TIM9_Init>:
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_TIM9_Init+0x98>)
 8001932:	4a20      	ldr	r2, [pc, #128]	; (80019b4 <MX_TIM9_Init+0x9c>)
 8001934:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_TIM9_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_TIM9_Init+0x98>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_TIM9_Init+0x98>)
 8001944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001948:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_TIM9_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_TIM9_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001956:	4816      	ldr	r0, [pc, #88]	; (80019b0 <MX_TIM9_Init+0x98>)
 8001958:	f004 f80b 	bl	8005972 <HAL_TIM_PWM_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM9_Init+0x4e>
	{
		Error_Handler();
 8001962:	f000 fa6f 	bl	8001e44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001966:	2360      	movs	r3, #96	; 0x60
 8001968:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_TIM9_Init+0x98>)
 800197e:	f004 fd15 	bl	80063ac <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM9_Init+0x74>
	{
		Error_Handler();
 8001988:	f000 fa5c 	bl	8001e44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2204      	movs	r2, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_TIM9_Init+0x98>)
 8001994:	f004 fd0a 	bl	80063ac <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM9_Init+0x8a>
	{
		Error_Handler();
 800199e:	f000 fa51 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 80019a2:	4803      	ldr	r0, [pc, #12]	; (80019b0 <MX_TIM9_Init+0x98>)
 80019a4:	f000 fd10 	bl	80023c8 <HAL_TIM_MspPostInit>

}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000568 	.word	0x20000568
 80019b4:	40014000 	.word	0x40014000

080019b8 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_UART4_Init+0x58>)
 80019be:	4a15      	ldr	r2, [pc, #84]	; (8001a14 <MX_UART4_Init+0x5c>)
 80019c0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_UART4_Init+0x58>)
 80019c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019c8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_UART4_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_UART4_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_UART4_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_UART4_Init+0x58>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <MX_UART4_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_UART4_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_UART4_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_UART4_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_UART4_Init+0x58>)
 80019fc:	f005 fcee 	bl	80073dc <HAL_UART_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_UART4_Init+0x52>
	{
		Error_Handler();
 8001a06:	f000 fa1d 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200005b4 	.word	0x200005b4
 8001a14:	40004c00 	.word	0x40004c00

08001a18 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <MX_UART5_Init+0x5c>)
 8001a20:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a28:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_UART5_Init+0x58>)
 8001a5c:	f005 fcbe 	bl	80073dc <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_UART5_Init+0x52>
	{
		Error_Handler();
 8001a66:	f000 f9ed 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000063c 	.word	0x2000063c
 8001a74:	40005000 	.word	0x40005000

08001a78 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <MX_USART1_UART_Init+0x5c>)
 8001a80:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_USART1_UART_Init+0x58>)
 8001abc:	f005 fc8e 	bl	80073dc <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8001ac6:	f000 f9bd 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200006c4 	.word	0x200006c4
 8001ad4:	40011000 	.word	0x40011000

08001ad8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <MX_USART2_UART_Init+0x58>)
 8001ae0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 1000000;
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001ae4:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <MX_USART2_UART_Init+0x5c>)
 8001ae6:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001afc:	220c      	movs	r2, #12
 8001afe:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <MX_USART2_UART_Init+0x54>)
 8001b1a:	f005 fc5f 	bl	80073dc <HAL_UART_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_USART2_UART_Init+0x50>
	{
		Error_Handler();
 8001b24:	f000 f98e 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000074c 	.word	0x2000074c
 8001b30:	40004400 	.word	0x40004400
 8001b34:	000f4240 	.word	0x000f4240

08001b38 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <MX_USART3_UART_Init+0x5c>)
 8001b40:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b48:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART3_UART_Init+0x58>)
 8001b7c:	f005 fc2e 	bl	80073dc <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8001b86:	f000 f95d 	bl	8001e44 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200007d4 	.word	0x200007d4
 8001b94:	40004800 	.word	0x40004800

08001b98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08e      	sub	sp, #56	; 0x38
 8001b9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001bae:	4b90      	ldr	r3, [pc, #576]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a8f      	ldr	r2, [pc, #572]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001bb4:	f043 0310 	orr.w	r3, r3, #16
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b8d      	ldr	r3, [pc, #564]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc6:	4b8a      	ldr	r3, [pc, #552]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a89      	ldr	r2, [pc, #548]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b87      	ldr	r3, [pc, #540]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001bde:	4b84      	ldr	r3, [pc, #528]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a83      	ldr	r2, [pc, #524]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001be4:	f043 0320 	orr.w	r3, r3, #32
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b81      	ldr	r3, [pc, #516]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0320 	and.w	r3, r3, #32
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf6:	4b7e      	ldr	r3, [pc, #504]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a7d      	ldr	r2, [pc, #500]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b78      	ldr	r3, [pc, #480]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a77      	ldr	r2, [pc, #476]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b75      	ldr	r3, [pc, #468]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	4b72      	ldr	r3, [pc, #456]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a71      	ldr	r2, [pc, #452]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b6f      	ldr	r3, [pc, #444]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3e:	4b6c      	ldr	r3, [pc, #432]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a6b      	ldr	r2, [pc, #428]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b69      	ldr	r3, [pc, #420]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001c56:	4b66      	ldr	r3, [pc, #408]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a65      	ldr	r2, [pc, #404]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <MX_GPIO_Init+0x258>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2118      	movs	r1, #24
 8001c72:	4860      	ldr	r0, [pc, #384]	; (8001df4 <MX_GPIO_Init+0x25c>)
 8001c74:	f001 fd24 	bl	80036c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c7e:	485e      	ldr	r0, [pc, #376]	; (8001df8 <MX_GPIO_Init+0x260>)
 8001c80:	f001 fd1e 	bl	80036c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2140      	movs	r1, #64	; 0x40
 8001c88:	485c      	ldr	r0, [pc, #368]	; (8001dfc <MX_GPIO_Init+0x264>)
 8001c8a:	f001 fd19 	bl	80036c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
	GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001c8e:	2318      	movs	r3, #24
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4853      	ldr	r0, [pc, #332]	; (8001df4 <MX_GPIO_Init+0x25c>)
 8001ca6:	f001 fb5f 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001caa:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
			|GPIO_EXTI13_BUMP4_IRQ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	484f      	ldr	r0, [pc, #316]	; (8001e00 <MX_GPIO_Init+0x268>)
 8001cc2:	f001 fb51 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cc6:	2332      	movs	r3, #50	; 0x32
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cd6:	230b      	movs	r3, #11
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4848      	ldr	r0, [pc, #288]	; (8001e04 <MX_GPIO_Init+0x26c>)
 8001ce2:	f001 fb41 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ce6:	2386      	movs	r3, #134	; 0x86
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cf6:	230b      	movs	r3, #11
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4841      	ldr	r0, [pc, #260]	; (8001e08 <MX_GPIO_Init+0x270>)
 8001d02:	f001 fb31 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001d06:	f244 0381 	movw	r3, #16513	; 0x4081
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4836      	ldr	r0, [pc, #216]	; (8001df8 <MX_GPIO_Init+0x260>)
 8001d20:	f001 fb22 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d36:	230b      	movs	r3, #11
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3e:	4619      	mov	r1, r3
 8001d40:	482d      	ldr	r0, [pc, #180]	; (8001df8 <MX_GPIO_Init+0x260>)
 8001d42:	f001 fb11 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4827      	ldr	r0, [pc, #156]	; (8001dfc <MX_GPIO_Init+0x264>)
 8001d5e:	f001 fb03 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	4619      	mov	r1, r3
 8001d74:	4821      	ldr	r0, [pc, #132]	; (8001dfc <MX_GPIO_Init+0x264>)
 8001d76:	f001 faf7 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d7a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d94:	4619      	mov	r1, r3
 8001d96:	481c      	ldr	r0, [pc, #112]	; (8001e08 <MX_GPIO_Init+0x270>)
 8001d98:	f001 fae6 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	4815      	ldr	r0, [pc, #84]	; (8001e08 <MX_GPIO_Init+0x270>)
 8001db2:	f001 fad9 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001db6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc8:	230b      	movs	r3, #11
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480a      	ldr	r0, [pc, #40]	; (8001dfc <MX_GPIO_Init+0x264>)
 8001dd4:	f001 fac8 	bl	8003368 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2017      	movs	r0, #23
 8001dde:	f001 fa8c 	bl	80032fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001de2:	2017      	movs	r0, #23
 8001de4:	f001 faa5 	bl	8003332 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001de8:	bf00      	nop
 8001dea:	3738      	adds	r7, #56	; 0x38
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40020800 	.word	0x40020800
 8001e08:	40020000 	.word	0x40020000

08001e0c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e009      	b.n	8001e32 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	60ba      	str	r2, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fbe0 	bl	80005ec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dbf1      	blt.n	8001e1e <_write+0x12>
	}
	return len;
 8001e3a:	687b      	ldr	r3, [r7, #4]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e4c:	e7fe      	b.n	8001e4c <Error_Handler+0x8>
	...

08001e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_MspInit+0x44>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_MspInit+0x44>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_MspInit+0x44>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_MspInit+0x44>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_MspInit+0x44>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_MspInit+0x44>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_ADC_MspInit+0x74>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d123      	bne.n	8001f02 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_ADC_MspInit+0x78>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001eea:	2308      	movs	r3, #8
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_ADC_MspInit+0x7c>)
 8001efe:	f001 fa33 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40012000 	.word	0x40012000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000

08001f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0b0      	sub	sp, #192	; 0xc0
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	2290      	movs	r2, #144	; 0x90
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f006 fcfb 	bl	8008934 <memset>
  if(hi2c->Instance==I2C1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a44      	ldr	r2, [pc, #272]	; (8002054 <HAL_I2C_MspInit+0x13c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d13e      	bne.n	8001fc6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 ff07 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001f64:	f7ff ff6e 	bl	8001e44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	6313      	str	r3, [r2, #48]	; 0x30
 8001f74:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f88:	2312      	movs	r3, #18
 8001f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	482d      	ldr	r0, [pc, #180]	; (800205c <HAL_I2C_MspInit+0x144>)
 8001fa8:	f001 f9de 	bl	8003368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fac:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4a29      	ldr	r2, [pc, #164]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fc4:	e041      	b.n	800204a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_I2C_MspInit+0x148>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d13c      	bne.n	800204a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fec3 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001fec:	f7ff ff2a 	bl	8001e44 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002008:	2303      	movs	r3, #3
 800200a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200e:	2312      	movs	r3, #18
 8002010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002014:	2301      	movs	r3, #1
 8002016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002020:	2304      	movs	r3, #4
 8002022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002026:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800202a:	4619      	mov	r1, r3
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <HAL_I2C_MspInit+0x14c>)
 800202e:	f001 f99b 	bl	8003368 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8002038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_I2C_MspInit+0x140>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
}
 800204a:	bf00      	nop
 800204c:	37c0      	adds	r7, #192	; 0xc0
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40005400 	.word	0x40005400
 8002058:	40023800 	.word	0x40023800
 800205c:	40020400 	.word	0x40020400
 8002060:	40005800 	.word	0x40005800
 8002064:	40021400 	.word	0x40021400

08002068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a33      	ldr	r2, [pc, #204]	; (8002154 <HAL_SPI_MspInit+0xec>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d160      	bne.n	800214c <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 8002090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a26      	ldr	r2, [pc, #152]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a20      	ldr	r2, [pc, #128]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 80020d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_SPI_MspInit+0xf0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020ea:	2320      	movs	r3, #32
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020fa:	2305      	movs	r3, #5
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	4815      	ldr	r0, [pc, #84]	; (800215c <HAL_SPI_MspInit+0xf4>)
 8002106:	f001 f92f 	bl	8003368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800211a:	2305      	movs	r3, #5
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	480e      	ldr	r0, [pc, #56]	; (8002160 <HAL_SPI_MspInit+0xf8>)
 8002126:	f001 f91f 	bl	8003368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800212a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800213c:	2305      	movs	r3, #5
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	4807      	ldr	r0, [pc, #28]	; (8002164 <HAL_SPI_MspInit+0xfc>)
 8002148:	f001 f90e 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800214c:	bf00      	nop
 800214e:	3730      	adds	r7, #48	; 0x30
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40013000 	.word	0x40013000
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020c00 	.word	0x40020c00
 8002164:	40021800 	.word	0x40021800

08002168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	; 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a3f      	ldr	r2, [pc, #252]	; (8002284 <HAL_TIM_Base_MspInit+0x11c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10c      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218a:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a3e      	ldr	r2, [pc, #248]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	623b      	str	r3, [r7, #32]
 80021a0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80021a2:	e06b      	b.n	800227c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ac:	d129      	bne.n	8002202 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ae:	4b36      	ldr	r3, [pc, #216]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a35      	ldr	r2, [pc, #212]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	4b30      	ldr	r3, [pc, #192]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 80021de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021f0:	2301      	movs	r3, #1
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f8:	4619      	mov	r1, r3
 80021fa:	4824      	ldr	r0, [pc, #144]	; (800228c <HAL_TIM_Base_MspInit+0x124>)
 80021fc:	f001 f8b4 	bl	8003368 <HAL_GPIO_Init>
}
 8002200:	e03c      	b.n	800227c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_TIM_Base_MspInit+0x128>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d10c      	bne.n	8002226 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800220c:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	6413      	str	r3, [r2, #64]	; 0x40
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
}
 8002224:	e02a      	b.n	800227c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1a      	ldr	r2, [pc, #104]	; (8002294 <HAL_TIM_Base_MspInit+0x12c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d114      	bne.n	800225a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2101      	movs	r1, #1
 800224c:	2036      	movs	r0, #54	; 0x36
 800224e:	f001 f854 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002252:	2036      	movs	r0, #54	; 0x36
 8002254:	f001 f86d 	bl	8003332 <HAL_NVIC_EnableIRQ>
}
 8002258:	e010      	b.n	800227c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_TIM_Base_MspInit+0x130>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d10b      	bne.n	800227c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	6453      	str	r3, [r2, #68]	; 0x44
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_TIM_Base_MspInit+0x120>)
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	bf00      	nop
 800227e:	3738      	adds	r7, #56	; 0x38
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010000 	.word	0x40010000
 8002288:	40023800 	.word	0x40023800
 800228c:	40020400 	.word	0x40020400
 8002290:	40000c00 	.word	0x40000c00
 8002294:	40001000 	.word	0x40001000
 8002298:	40010400 	.word	0x40010400

0800229c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a2e      	ldr	r2, [pc, #184]	; (8002374 <HAL_TIM_Encoder_MspInit+0xd8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d128      	bne.n	8002310 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022be:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a2d      	ldr	r2, [pc, #180]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a27      	ldr	r2, [pc, #156]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 80022ee:	2330      	movs	r3, #48	; 0x30
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022fe:	2302      	movs	r3, #2
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4619      	mov	r1, r3
 8002308:	481c      	ldr	r0, [pc, #112]	; (800237c <HAL_TIM_Encoder_MspInit+0xe0>)
 800230a:	f001 f82d 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800230e:	e02d      	b.n	800236c <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1a      	ldr	r2, [pc, #104]	; (8002380 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d128      	bne.n	800236c <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 800234a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800235c:	2302      	movs	r3, #2
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	4807      	ldr	r0, [pc, #28]	; (8002384 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002368:	f000 fffe 	bl	8003368 <HAL_GPIO_Init>
}
 800236c:	bf00      	nop
 800236e:	3730      	adds	r7, #48	; 0x30
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40000400 	.word	0x40000400
 8002378:	40023800 	.word	0x40023800
 800237c:	40020400 	.word	0x40020400
 8002380:	40000800 	.word	0x40000800
 8002384:	40020c00 	.word	0x40020c00

08002388 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_TIM_PWM_MspInit+0x38>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10b      	bne.n	80023b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_TIM_PWM_MspInit+0x3c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40014000 	.word	0x40014000
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a56      	ldr	r2, [pc, #344]	; (8002540 <HAL_TIM_MspPostInit+0x178>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d11d      	bne.n	8002426 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ea:	4b56      	ldr	r3, [pc, #344]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a55      	ldr	r2, [pc, #340]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 80023f0:	f043 0310 	orr.w	r3, r3, #16
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8002402:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002414:	2301      	movs	r3, #1
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4619      	mov	r1, r3
 800241e:	484a      	ldr	r0, [pc, #296]	; (8002548 <HAL_TIM_MspPostInit+0x180>)
 8002420:	f000 ffa2 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002424:	e088      	b.n	8002538 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242e:	d11d      	bne.n	800246c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a43      	ldr	r2, [pc, #268]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800245a:	2301      	movs	r3, #1
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4619      	mov	r1, r3
 8002464:	4839      	ldr	r0, [pc, #228]	; (800254c <HAL_TIM_MspPostInit+0x184>)
 8002466:	f000 ff7f 	bl	8003368 <HAL_GPIO_Init>
}
 800246a:	e065      	b.n	8002538 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a37      	ldr	r2, [pc, #220]	; (8002550 <HAL_TIM_MspPostInit+0x188>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d11c      	bne.n	80024b0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	4b33      	ldr	r3, [pc, #204]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a32      	ldr	r2, [pc, #200]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 800248e:	2301      	movs	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800249e:	2302      	movs	r3, #2
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4828      	ldr	r0, [pc, #160]	; (800254c <HAL_TIM_MspPostInit+0x184>)
 80024aa:	f000 ff5d 	bl	8003368 <HAL_GPIO_Init>
}
 80024ae:	e043      	b.n	8002538 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <HAL_TIM_MspPostInit+0x18c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d11d      	bne.n	80024f6 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a21      	ldr	r2, [pc, #132]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 80024d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024e4:	2303      	movs	r3, #3
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	481a      	ldr	r0, [pc, #104]	; (8002558 <HAL_TIM_MspPostInit+0x190>)
 80024f0:	f000 ff3a 	bl	8003368 <HAL_GPIO_Init>
}
 80024f4:	e020      	b.n	8002538 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a18      	ldr	r2, [pc, #96]	; (800255c <HAL_TIM_MspPostInit+0x194>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 8002506:	f043 0310 	orr.w	r3, r3, #16
 800250a:	6313      	str	r3, [r2, #48]	; 0x30
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_TIM_MspPostInit+0x17c>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8002518:	2360      	movs	r3, #96	; 0x60
 800251a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002528:	2303      	movs	r3, #3
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <HAL_TIM_MspPostInit+0x180>)
 8002534:	f000 ff18 	bl	8003368 <HAL_GPIO_Init>
}
 8002538:	bf00      	nop
 800253a:	3730      	adds	r7, #48	; 0x30
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40010000 	.word	0x40010000
 8002544:	40023800 	.word	0x40023800
 8002548:	40021000 	.word	0x40021000
 800254c:	40020000 	.word	0x40020000
 8002550:	40000c00 	.word	0x40000c00
 8002554:	40010400 	.word	0x40010400
 8002558:	40020800 	.word	0x40020800
 800255c:	40014000 	.word	0x40014000

08002560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0b6      	sub	sp, #216	; 0xd8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002578:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800257c:	2290      	movs	r2, #144	; 0x90
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f006 f9d7 	bl	8008934 <memset>
  if(huart->Instance==UART4)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4aa0      	ldr	r2, [pc, #640]	; (800280c <HAL_UART_MspInit+0x2ac>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d13e      	bne.n	800260e <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800259c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fbe3 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80025ac:	f7ff fc4a 	bl	8001e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025b0:	4b97      	ldr	r3, [pc, #604]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	4a96      	ldr	r2, [pc, #600]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80025b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025ba:	6413      	str	r3, [r2, #64]	; 0x40
 80025bc:	4b94      	ldr	r3, [pc, #592]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c8:	4b91      	ldr	r3, [pc, #580]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	4a90      	ldr	r2, [pc, #576]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6313      	str	r3, [r2, #48]	; 0x30
 80025d4:	4b8e      	ldr	r3, [pc, #568]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80025e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f4:	2303      	movs	r3, #3
 80025f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025fa:	2308      	movs	r3, #8
 80025fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002600:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002604:	4619      	mov	r1, r3
 8002606:	4883      	ldr	r0, [pc, #524]	; (8002814 <HAL_UART_MspInit+0x2b4>)
 8002608:	f000 feae 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800260c:	e151      	b.n	80028b2 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a81      	ldr	r2, [pc, #516]	; (8002818 <HAL_UART_MspInit+0x2b8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d160      	bne.n	80026da <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fb9f 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002634:	f7ff fc06 	bl	8001e44 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002638:	4b75      	ldr	r3, [pc, #468]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a74      	ldr	r2, [pc, #464]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 800263e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
 8002644:	4b72      	ldr	r3, [pc, #456]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002650:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4a6e      	ldr	r2, [pc, #440]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	6313      	str	r3, [r2, #48]	; 0x30
 800265c:	4b6c      	ldr	r3, [pc, #432]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	623b      	str	r3, [r7, #32]
 800267e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002684:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800269a:	2308      	movs	r3, #8
 800269c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026a4:	4619      	mov	r1, r3
 80026a6:	485d      	ldr	r0, [pc, #372]	; (800281c <HAL_UART_MspInit+0x2bc>)
 80026a8:	f000 fe5e 	bl	8003368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026c6:	2308      	movs	r3, #8
 80026c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4850      	ldr	r0, [pc, #320]	; (8002814 <HAL_UART_MspInit+0x2b4>)
 80026d4:	f000 fe48 	bl	8003368 <HAL_GPIO_Init>
}
 80026d8:	e0eb      	b.n	80028b2 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a50      	ldr	r2, [pc, #320]	; (8002820 <HAL_UART_MspInit+0x2c0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d151      	bne.n	8002788 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026e4:	2340      	movs	r3, #64	; 0x40
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026e8:	2300      	movs	r3, #0
 80026ea:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fb3b 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80026fc:	f7ff fba2 	bl	8001e44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002700:	4b43      	ldr	r3, [pc, #268]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	4a42      	ldr	r2, [pc, #264]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	6453      	str	r3, [r2, #68]	; 0x44
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002718:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	4a3c      	ldr	r2, [pc, #240]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	6313      	str	r3, [r2, #48]	; 0x30
 8002724:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002734:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800274a:	2304      	movs	r3, #4
 800274c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002750:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002754:	4619      	mov	r1, r3
 8002756:	4831      	ldr	r0, [pc, #196]	; (800281c <HAL_UART_MspInit+0x2bc>)
 8002758:	f000 fe06 	bl	8003368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800275c:	2340      	movs	r3, #64	; 0x40
 800275e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002774:	2307      	movs	r3, #7
 8002776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800277e:	4619      	mov	r1, r3
 8002780:	4826      	ldr	r0, [pc, #152]	; (800281c <HAL_UART_MspInit+0x2bc>)
 8002782:	f000 fdf1 	bl	8003368 <HAL_GPIO_Init>
}
 8002786:	e094      	b.n	80028b2 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <HAL_UART_MspInit+0x2c4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d14c      	bne.n	800282c <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002796:	2300      	movs	r3, #0
 8002798:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800279a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fae4 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_UART_MspInit+0x24e>
      Error_Handler();
 80027aa:	f7ff fb4b 	bl	8001e44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a17      	ldr	r2, [pc, #92]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_UART_MspInit+0x2b0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027de:	2360      	movs	r3, #96	; 0x60
 80027e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027f6:	2307      	movs	r3, #7
 80027f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002800:	4619      	mov	r1, r3
 8002802:	4809      	ldr	r0, [pc, #36]	; (8002828 <HAL_UART_MspInit+0x2c8>)
 8002804:	f000 fdb0 	bl	8003368 <HAL_GPIO_Init>
}
 8002808:	e053      	b.n	80028b2 <HAL_UART_MspInit+0x352>
 800280a:	bf00      	nop
 800280c:	40004c00 	.word	0x40004c00
 8002810:	40023800 	.word	0x40023800
 8002814:	40020800 	.word	0x40020800
 8002818:	40005000 	.word	0x40005000
 800281c:	40020400 	.word	0x40020400
 8002820:	40011000 	.word	0x40011000
 8002824:	40004400 	.word	0x40004400
 8002828:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_UART_MspInit+0x35c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d13d      	bne.n	80028b2 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002842:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fa90 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002852:	f7ff faf7 	bl	8001e44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_UART_MspInit+0x360>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_UART_MspInit+0x360>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_UART_MspInit+0x360>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_UART_MspInit+0x360>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <HAL_UART_MspInit+0x360>)
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_UART_MspInit+0x360>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002886:	f44f 7340 	mov.w	r3, #768	; 0x300
 800288a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028a0:	2307      	movs	r3, #7
 80028a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	; (80028c4 <HAL_UART_MspInit+0x364>)
 80028ae:	f000 fd5b 	bl	8003368 <HAL_GPIO_Init>
}
 80028b2:	bf00      	nop
 80028b4:	37d8      	adds	r7, #216	; 0xd8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40004800 	.word	0x40004800
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020c00 	.word	0x40020c00

080028c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <NMI_Handler+0x4>

080028ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <HardFault_Handler+0x4>

080028d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <MemManage_Handler+0x4>

080028da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028de:	e7fe      	b.n	80028de <BusFault_Handler+0x4>

080028e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <UsageFault_Handler+0x4>

080028e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002914:	f000 f93e 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}

0800291c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI8_USER_BUT1_IRQ_Pin);
 8002920:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002924:	f000 fee6 	bl	80036f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI9_USER_BUT2_IRQ_Pin);
 8002928:	f44f 7000 	mov.w	r0, #512	; 0x200
 800292c:	f000 fee2 	bl	80036f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <TIM6_DAC_IRQHandler+0x10>)
 800293a:	f003 fb01 	bl	8005f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200004d0 	.word	0x200004d0

08002948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	return 1;
 800294c:	2301      	movs	r3, #1
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_kill>:

int _kill(int pid, int sig)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002962:	f006 f839 	bl	80089d8 <__errno>
 8002966:	4603      	mov	r3, r0
 8002968:	2216      	movs	r2, #22
 800296a:	601a      	str	r2, [r3, #0]
	return -1;
 800296c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_exit>:

void _exit (int status)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ffe7 	bl	8002958 <_kill>
	while (1) {}		/* Make sure we hang here */
 800298a:	e7fe      	b.n	800298a <_exit+0x12>

0800298c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e00a      	b.n	80029b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800299e:	f3af 8000 	nop.w
 80029a2:	4601      	mov	r1, r0
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	60ba      	str	r2, [r7, #8]
 80029aa:	b2ca      	uxtb	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	dbf0      	blt.n	800299e <_read+0x12>
	}

return len;
 80029bc:	687b      	ldr	r3, [r7, #4]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	return -1;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ee:	605a      	str	r2, [r3, #4]
	return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <_isatty>:

int _isatty(int file)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
	return 1;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a38:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <_sbrk+0x5c>)
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <_sbrk+0x60>)
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a44:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <_sbrk+0x64>)
 8002a4e:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <_sbrk+0x68>)
 8002a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <_sbrk+0x64>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d207      	bcs.n	8002a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a60:	f005 ffba 	bl	80089d8 <__errno>
 8002a64:	4603      	mov	r3, r0
 8002a66:	220c      	movs	r2, #12
 8002a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a6e:	e009      	b.n	8002a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a70:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <_sbrk+0x64>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <_sbrk+0x64>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <_sbrk+0x64>)
 8002a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20080000 	.word	0x20080000
 8002a90:	00000400 	.word	0x00000400
 8002a94:	20000998 	.word	0x20000998
 8002a98:	20000af0 	.word	0x20000af0

08002a9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <SystemInit+0x28>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <SystemInit+0x28>)
 8002aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SystemInit+0x28>)
 8002ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ab6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002acc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ace:	e003      	b.n	8002ad8 <LoopCopyDataInit>

08002ad0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ad2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ad4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ad6:	3104      	adds	r1, #4

08002ad8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ad8:	480b      	ldr	r0, [pc, #44]	; (8002b08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002adc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ade:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ae0:	d3f6      	bcc.n	8002ad0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ae4:	e002      	b.n	8002aec <LoopFillZerobss>

08002ae6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ae6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ae8:	f842 3b04 	str.w	r3, [r2], #4

08002aec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002aee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002af0:	d3f9      	bcc.n	8002ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002af2:	f7ff ffd3 	bl	8002a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af6:	f005 ff75 	bl	80089e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002afa:	f7fe f87f 	bl	8000bfc <main>
  bx  lr    
 8002afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b00:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002b04:	0800a994 	.word	0x0800a994
  ldr  r0, =_sdata
 8002b08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b0c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002b10:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002b14:	20000aec 	.word	0x20000aec

08002b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC_IRQHandler>

08002b1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b1e:	2003      	movs	r0, #3
 8002b20:	f000 fbe0 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f000 f805 	bl	8002b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b2a:	f7ff f991 	bl	8001e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_InitTick+0x54>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fbfb 	bl	800334e <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00e      	b.n	8002b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d80a      	bhi.n	8002b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b70:	f000 fbc3 	bl	80032fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <HAL_InitTick+0x5c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	20000018 	.word	0x20000018
 8002b90:	20000014 	.word	0x20000014

08002b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000018 	.word	0x20000018
 8002bb8:	2000099c 	.word	0x2000099c

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	2000099c 	.word	0x2000099c

08002bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff ffee 	bl	8002bbc <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bfa:	bf00      	nop
 8002bfc:	f7ff ffde 	bl	8002bbc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000018 	.word	0x20000018

08002c1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e031      	b.n	8002c96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff f92c 	bl	8001e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d116      	bne.n	8002c88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_ADC_Init+0x84>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f970 	bl	8002f50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
 8002c86:	e001      	b.n	8002c8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	ffffeefd 	.word	0xffffeefd

08002ca4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x1c>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e136      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x28a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d93a      	bls.n	8002d46 <HAL_ADC_ConfigChannel+0xa2>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd8:	d035      	beq.n	8002d46 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68d9      	ldr	r1, [r3, #12]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	3b1e      	subs	r3, #30
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a8d      	ldr	r2, [pc, #564]	; (8002f3c <HAL_ADC_ConfigChannel+0x298>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10a      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68d9      	ldr	r1, [r3, #12]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	061a      	lsls	r2, r3, #24
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d1e:	e035      	b.n	8002d8c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68d9      	ldr	r1, [r3, #12]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4618      	mov	r0, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4403      	add	r3, r0
 8002d38:	3b1e      	subs	r3, #30
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d44:	e022      	b.n	8002d8c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6919      	ldr	r1, [r3, #16]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43da      	mvns	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	400a      	ands	r2, r1
 8002d68:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6919      	ldr	r1, [r3, #16]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4403      	add	r3, r0
 8002d82:	409a      	lsls	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b06      	cmp	r3, #6
 8002d92:	d824      	bhi.n	8002dde <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	3b05      	subs	r3, #5
 8002da6:	221f      	movs	r2, #31
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43da      	mvns	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	400a      	ands	r2, r1
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b05      	subs	r3, #5
 8002dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	635a      	str	r2, [r3, #52]	; 0x34
 8002ddc:	e04c      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d824      	bhi.n	8002e30 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	3b23      	subs	r3, #35	; 0x23
 8002df8:	221f      	movs	r2, #31
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	400a      	ands	r2, r1
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b23      	subs	r3, #35	; 0x23
 8002e22:	fa00 f203 	lsl.w	r2, r0, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e2e:	e023      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b41      	subs	r3, #65	; 0x41
 8002e42:	221f      	movs	r2, #31
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	400a      	ands	r2, r1
 8002e50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b41      	subs	r3, #65	; 0x41
 8002e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <HAL_ADC_ConfigChannel+0x29c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10a      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1f4>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e92:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e96:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_ADC_ConfigChannel+0x29c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x21e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002eb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eb4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ebc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ec0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <HAL_ADC_ConfigChannel+0x29c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d12b      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x280>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <HAL_ADC_ConfigChannel+0x298>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d003      	beq.n	8002ede <HAL_ADC_ConfigChannel+0x23a>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b11      	cmp	r3, #17
 8002edc:	d122      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ee8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ef4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a10      	ldr	r2, [pc, #64]	; (8002f3c <HAL_ADC_ConfigChannel+0x298>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d111      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_ADC_ConfigChannel+0x2a8>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0c9a      	lsrs	r2, r3, #18
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f16:	e002      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f9      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	10000012 	.word	0x10000012
 8002f40:	40012000 	.word	0x40012000
 8002f44:	40012300 	.word	0x40012300
 8002f48:	20000010 	.word	0x20000010
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f58:	4b78      	ldr	r3, [pc, #480]	; (800313c <ADC_Init+0x1ec>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a77      	ldr	r2, [pc, #476]	; (800313c <ADC_Init+0x1ec>)
 8002f5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f62:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f64:	4b75      	ldr	r3, [pc, #468]	; (800313c <ADC_Init+0x1ec>)
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4973      	ldr	r1, [pc, #460]	; (800313c <ADC_Init+0x1ec>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	021a      	lsls	r2, r3, #8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	4a58      	ldr	r2, [pc, #352]	; (8003140 <ADC_Init+0x1f0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6899      	ldr	r1, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	e00f      	b.n	800304a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003048:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0202 	bic.w	r2, r2, #2
 8003058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6899      	ldr	r1, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	005a      	lsls	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	3b01      	subs	r3, #1
 80030a4:	035a      	lsls	r2, r3, #13
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	e007      	b.n	80030c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	3b01      	subs	r3, #1
 80030dc:	051a      	lsls	r2, r3, #20
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6899      	ldr	r1, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003102:	025a      	lsls	r2, r3, #9
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6899      	ldr	r1, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	029a      	lsls	r2, r3, #10
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40012300 	.word	0x40012300
 8003140:	0f000001 	.word	0x0f000001

08003144 <__NVIC_SetPriorityGrouping>:
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <__NVIC_SetPriorityGrouping+0x40>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003160:	4013      	ands	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 800316e:	4313      	orrs	r3, r2
 8003170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003172:	4a04      	ldr	r2, [pc, #16]	; (8003184 <__NVIC_SetPriorityGrouping+0x40>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00
 8003188:	05fa0000 	.word	0x05fa0000

0800318c <__NVIC_GetPriorityGrouping>:
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 0307 	and.w	r3, r3, #7
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <__NVIC_EnableIRQ>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db0b      	blt.n	80031d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	4907      	ldr	r1, [pc, #28]	; (80031e0 <__NVIC_EnableIRQ+0x38>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2001      	movs	r0, #1
 80031ca:	fa00 f202 	lsl.w	r2, r0, r2
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	; (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <SysTick_Config>:
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b0:	d301      	bcc.n	80032b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <SysTick_Config+0x40>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032be:	210f      	movs	r1, #15
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032c4:	f7ff ff8e 	bl	80031e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <SysTick_Config+0x40>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <SysTick_Config+0x40>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff29 	bl	8003144 <__NVIC_SetPriorityGrouping>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330c:	f7ff ff3e 	bl	800318c <__NVIC_GetPriorityGrouping>
 8003310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff8e 	bl	8003238 <NVIC_EncodePriority>
 800331c:	4602      	mov	r2, r0
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff5d 	bl	80031e4 <__NVIC_SetPriority>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff31 	bl	80031a8 <__NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffa2 	bl	80032a0 <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e175      	b.n	8003674 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003388:	2201      	movs	r2, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f040 8164 	bne.w	800366e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d005      	beq.n	80033be <HAL_GPIO_Init+0x56>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d130      	bne.n	8003420 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 0201 	and.w	r2, r3, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b03      	cmp	r3, #3
 800342a:	d017      	beq.n	800345c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d123      	bne.n	80034b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	220f      	movs	r2, #15
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	08da      	lsrs	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3208      	adds	r2, #8
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0203 	and.w	r2, r3, #3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80be 	beq.w	800366e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	4b66      	ldr	r3, [pc, #408]	; (800368c <HAL_GPIO_Init+0x324>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a65      	ldr	r2, [pc, #404]	; (800368c <HAL_GPIO_Init+0x324>)
 80034f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_GPIO_Init+0x324>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800350a:	4a61      	ldr	r2, [pc, #388]	; (8003690 <HAL_GPIO_Init+0x328>)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3302      	adds	r3, #2
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	220f      	movs	r2, #15
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a58      	ldr	r2, [pc, #352]	; (8003694 <HAL_GPIO_Init+0x32c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d037      	beq.n	80035a6 <HAL_GPIO_Init+0x23e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a57      	ldr	r2, [pc, #348]	; (8003698 <HAL_GPIO_Init+0x330>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d031      	beq.n	80035a2 <HAL_GPIO_Init+0x23a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a56      	ldr	r2, [pc, #344]	; (800369c <HAL_GPIO_Init+0x334>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d02b      	beq.n	800359e <HAL_GPIO_Init+0x236>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a55      	ldr	r2, [pc, #340]	; (80036a0 <HAL_GPIO_Init+0x338>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d025      	beq.n	800359a <HAL_GPIO_Init+0x232>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a54      	ldr	r2, [pc, #336]	; (80036a4 <HAL_GPIO_Init+0x33c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01f      	beq.n	8003596 <HAL_GPIO_Init+0x22e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a53      	ldr	r2, [pc, #332]	; (80036a8 <HAL_GPIO_Init+0x340>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d019      	beq.n	8003592 <HAL_GPIO_Init+0x22a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_GPIO_Init+0x344>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_GPIO_Init+0x226>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a51      	ldr	r2, [pc, #324]	; (80036b0 <HAL_GPIO_Init+0x348>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00d      	beq.n	800358a <HAL_GPIO_Init+0x222>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a50      	ldr	r2, [pc, #320]	; (80036b4 <HAL_GPIO_Init+0x34c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <HAL_GPIO_Init+0x21e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4f      	ldr	r2, [pc, #316]	; (80036b8 <HAL_GPIO_Init+0x350>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_GPIO_Init+0x21a>
 800357e:	2309      	movs	r3, #9
 8003580:	e012      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 8003582:	230a      	movs	r3, #10
 8003584:	e010      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 8003586:	2308      	movs	r3, #8
 8003588:	e00e      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 800358a:	2307      	movs	r3, #7
 800358c:	e00c      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 800358e:	2306      	movs	r3, #6
 8003590:	e00a      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 8003592:	2305      	movs	r3, #5
 8003594:	e008      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 8003596:	2304      	movs	r3, #4
 8003598:	e006      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 800359a:	2303      	movs	r3, #3
 800359c:	e004      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 800359e:	2302      	movs	r3, #2
 80035a0:	e002      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_GPIO_Init+0x240>
 80035a6:	2300      	movs	r3, #0
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f002 0203 	and.w	r2, r2, #3
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	4093      	lsls	r3, r2
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035b8:	4935      	ldr	r1, [pc, #212]	; (8003690 <HAL_GPIO_Init+0x328>)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	3302      	adds	r3, #2
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <HAL_GPIO_Init+0x354>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ea:	4a34      	ldr	r2, [pc, #208]	; (80036bc <HAL_GPIO_Init+0x354>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f0:	4b32      	ldr	r3, [pc, #200]	; (80036bc <HAL_GPIO_Init+0x354>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003614:	4a29      	ldr	r2, [pc, #164]	; (80036bc <HAL_GPIO_Init+0x354>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800361a:	4b28      	ldr	r3, [pc, #160]	; (80036bc <HAL_GPIO_Init+0x354>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800363e:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_GPIO_Init+0x354>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_GPIO_Init+0x354>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003668:	4a14      	ldr	r2, [pc, #80]	; (80036bc <HAL_GPIO_Init+0x354>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3301      	adds	r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	f67f ae86 	bls.w	8003388 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	3724      	adds	r7, #36	; 0x24
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	40013800 	.word	0x40013800
 8003694:	40020000 	.word	0x40020000
 8003698:	40020400 	.word	0x40020400
 800369c:	40020800 	.word	0x40020800
 80036a0:	40020c00 	.word	0x40020c00
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40021400 	.word	0x40021400
 80036ac:	40021800 	.word	0x40021800
 80036b0:	40021c00 	.word	0x40021c00
 80036b4:	40022000 	.word	0x40022000
 80036b8:	40022400 	.word	0x40022400
 80036bc:	40013c00 	.word	0x40013c00

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
 80036cc:	4613      	mov	r3, r2
 80036ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d0:	787b      	ldrb	r3, [r7, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036dc:	e003      	b.n	80036e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	041a      	lsls	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	619a      	str	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fa60 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07f      	b.n	8003836 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fe fbe4 	bl	8001f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	e006      	b.n	80037ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d104      	bne.n	80037be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_I2C_Init+0x11c>)
 80037ca:	430b      	orrs	r3, r1
 80037cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69d9      	ldr	r1, [r3, #28]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	02008000 	.word	0x02008000

08003844 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	461a      	mov	r2, r3
 8003852:	4603      	mov	r3, r0
 8003854:	817b      	strh	r3, [r7, #10]
 8003856:	460b      	mov	r3, r1
 8003858:	813b      	strh	r3, [r7, #8]
 800385a:	4613      	mov	r3, r2
 800385c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b20      	cmp	r3, #32
 8003868:	f040 80f9 	bne.w	8003a5e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_I2C_Mem_Write+0x34>
 8003872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0ed      	b.n	8003a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Mem_Write+0x4e>
 800388e:	2302      	movs	r3, #2
 8003890:	e0e6      	b.n	8003a60 <HAL_I2C_Mem_Write+0x21c>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800389a:	f7ff f98f 	bl	8002bbc <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	2319      	movs	r3, #25
 80038a6:	2201      	movs	r2, #1
 80038a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fac3 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0d1      	b.n	8003a60 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2221      	movs	r2, #33	; 0x21
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2240      	movs	r2, #64	; 0x40
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038e4:	88f8      	ldrh	r0, [r7, #6]
 80038e6:	893a      	ldrh	r2, [r7, #8]
 80038e8:	8979      	ldrh	r1, [r7, #10]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	4603      	mov	r3, r0
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f9d3 	bl	8003ca0 <I2C_RequestMemoryWrite>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0a9      	b.n	8003a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2bff      	cmp	r3, #255	; 0xff
 8003914:	d90e      	bls.n	8003934 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	b2da      	uxtb	r2, r3
 8003922:	8979      	ldrh	r1, [r7, #10]
 8003924:	2300      	movs	r3, #0
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fc1f 	bl	8004170 <I2C_TransferConfig>
 8003932:	e00f      	b.n	8003954 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	b2da      	uxtb	r2, r3
 8003944:	8979      	ldrh	r1, [r7, #10]
 8003946:	2300      	movs	r3, #0
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fc0e 	bl	8004170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 faad 	bl	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e07b      	b.n	8003a60 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d034      	beq.n	8003a0c <HAL_I2C_Mem_Write+0x1c8>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d130      	bne.n	8003a0c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	2200      	movs	r2, #0
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fa3f 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e04d      	b.n	8003a60 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2bff      	cmp	r3, #255	; 0xff
 80039cc:	d90e      	bls.n	80039ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	22ff      	movs	r2, #255	; 0xff
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	8979      	ldrh	r1, [r7, #10]
 80039dc:	2300      	movs	r3, #0
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fbc3 	bl	8004170 <I2C_TransferConfig>
 80039ea:	e00f      	b.n	8003a0c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	8979      	ldrh	r1, [r7, #10]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fbb2 	bl	8004170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d19e      	bne.n	8003954 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fa8c 	bl	8003f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e01a      	b.n	8003a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_I2C_Mem_Write+0x224>)
 8003a3e:	400b      	ands	r3, r1
 8003a40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	fe00e800 	.word	0xfe00e800

08003a6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	817b      	strh	r3, [r7, #10]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	813b      	strh	r3, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	f040 80fd 	bne.w	8003c8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x34>
 8003a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0f1      	b.n	8003c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_Mem_Read+0x4e>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0ea      	b.n	8003c90 <HAL_I2C_Mem_Read+0x224>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ac2:	f7ff f87b 	bl	8002bbc <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2319      	movs	r3, #25
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f9af 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0d5      	b.n	8003c90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2222      	movs	r2, #34	; 0x22
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b0c:	88f8      	ldrh	r0, [r7, #6]
 8003b0e:	893a      	ldrh	r2, [r7, #8]
 8003b10:	8979      	ldrh	r1, [r7, #10]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f913 	bl	8003d48 <I2C_RequestMemoryRead>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0ad      	b.n	8003c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2bff      	cmp	r3, #255	; 0xff
 8003b3c:	d90e      	bls.n	8003b5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	22ff      	movs	r2, #255	; 0xff
 8003b42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	8979      	ldrh	r1, [r7, #10]
 8003b4c:	4b52      	ldr	r3, [pc, #328]	; (8003c98 <HAL_I2C_Mem_Read+0x22c>)
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fb0b 	bl	8004170 <I2C_TransferConfig>
 8003b5a:	e00f      	b.n	8003b7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	8979      	ldrh	r1, [r7, #10]
 8003b6e:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <HAL_I2C_Mem_Read+0x22c>)
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fafa 	bl	8004170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	2200      	movs	r2, #0
 8003b84:	2104      	movs	r1, #4
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f956 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e07c      	b.n	8003c90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d034      	beq.n	8003c3c <HAL_I2C_Mem_Read+0x1d0>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d130      	bne.n	8003c3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	2200      	movs	r2, #0
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f927 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e04d      	b.n	8003c90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2bff      	cmp	r3, #255	; 0xff
 8003bfc:	d90e      	bls.n	8003c1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	22ff      	movs	r2, #255	; 0xff
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	8979      	ldrh	r1, [r7, #10]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 faab 	bl	8004170 <I2C_TransferConfig>
 8003c1a:	e00f      	b.n	8003c3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	8979      	ldrh	r1, [r7, #10]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fa9a 	bl	8004170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d19a      	bne.n	8003b7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f974 	bl	8003f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e01a      	b.n	8003c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_I2C_Mem_Read+0x230>)
 8003c6e:	400b      	ands	r3, r1
 8003c70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e000      	b.n	8003c90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	80002400 	.word	0x80002400
 8003c9c:	fe00e800 	.word	0xfe00e800

08003ca0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	817b      	strh	r3, [r7, #10]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	813b      	strh	r3, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	8979      	ldrh	r1, [r7, #10]
 8003cc0:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <I2C_RequestMemoryWrite+0xa4>)
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fa51 	bl	8004170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	69b9      	ldr	r1, [r7, #24]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f8f0 	bl	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e02c      	b.n	8003d3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce8:	893b      	ldrh	r3, [r7, #8]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf2:	e015      	b.n	8003d20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cf4:	893b      	ldrh	r3, [r7, #8]
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	69b9      	ldr	r1, [r7, #24]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f8d6 	bl	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e012      	b.n	8003d3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d16:	893b      	ldrh	r3, [r7, #8]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f884 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	80002000 	.word	0x80002000

08003d48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	461a      	mov	r2, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	817b      	strh	r3, [r7, #10]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	813b      	strh	r3, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	8979      	ldrh	r1, [r7, #10]
 8003d68:	4b20      	ldr	r3, [pc, #128]	; (8003dec <I2C_RequestMemoryRead+0xa4>)
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f9fe 	bl	8004170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	69b9      	ldr	r1, [r7, #24]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f89d 	bl	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e02c      	b.n	8003de2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8e:	893b      	ldrh	r3, [r7, #8]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
 8003d98:	e015      	b.n	8003dc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d9a:	893b      	ldrh	r3, [r7, #8]
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	69b9      	ldr	r1, [r7, #24]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f883 	bl	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e012      	b.n	8003de2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dbc:	893b      	ldrh	r3, [r7, #8]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2140      	movs	r1, #64	; 0x40
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f831 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	80002000 	.word	0x80002000

08003df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d103      	bne.n	8003e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d007      	beq.n	8003e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	619a      	str	r2, [r3, #24]
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e48:	e022      	b.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e50:	d01e      	beq.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e52:	f7fe feb3 	bl	8002bbc <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d113      	bne.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	f043 0220 	orr.w	r2, r3, #32
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e00f      	b.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d0cd      	beq.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ec4:	e02c      	b.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f870 	bl	8003fb0 <I2C_IsErrorOccurred>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e02a      	b.n	8003f30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee0:	d01e      	beq.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7fe fe6b 	bl	8002bbc <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d113      	bne.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e007      	b.n	8003f30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d1cb      	bne.n	8003ec6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f44:	e028      	b.n	8003f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f830 	bl	8003fb0 <I2C_IsErrorOccurred>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e026      	b.n	8003fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fe fe2f 	bl	8002bbc <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d113      	bne.n	8003f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e007      	b.n	8003fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d1cf      	bne.n	8003f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d068      	beq.n	80040ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fe4:	e049      	b.n	800407a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fec:	d045      	beq.n	800407a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fee:	f7fe fde5 	bl	8002bbc <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d302      	bcc.n	8004004 <I2C_IsErrorOccurred+0x54>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d13a      	bne.n	800407a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004016:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d121      	bne.n	800406c <I2C_IsErrorOccurred+0xbc>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800402e:	d01d      	beq.n	800406c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	2b20      	cmp	r3, #32
 8004034:	d01a      	beq.n	800406c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004044:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004046:	f7fe fdb9 	bl	8002bbc <HAL_GetTick>
 800404a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800404c:	e00e      	b.n	800406c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800404e:	f7fe fdb5 	bl	8002bbc <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b19      	cmp	r3, #25
 800405a:	d907      	bls.n	800406c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	f043 0320 	orr.w	r3, r3, #32
 8004062:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800406a:	e006      	b.n	800407a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b20      	cmp	r3, #32
 8004078:	d1e9      	bne.n	800404e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b20      	cmp	r3, #32
 8004086:	d003      	beq.n	8004090 <I2C_IsErrorOccurred+0xe0>
 8004088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0aa      	beq.n	8003fe6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2220      	movs	r2, #32
 800409e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	f043 0308 	orr.w	r3, r3, #8
 80040e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00b      	beq.n	800411c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004114:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800411c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01c      	beq.n	800415e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff fe63 	bl	8003df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b0d      	ldr	r3, [pc, #52]	; (800416c <I2C_IsErrorOccurred+0x1bc>)
 8004136:	400b      	ands	r3, r1
 8004138:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	431a      	orrs	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800415e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004162:	4618      	mov	r0, r3
 8004164:	3728      	adds	r7, #40	; 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	fe00e800 	.word	0xfe00e800

08004170 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	817b      	strh	r3, [r7, #10]
 800417e:	4613      	mov	r3, r2
 8004180:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004182:	897b      	ldrh	r3, [r7, #10]
 8004184:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004188:	7a7b      	ldrb	r3, [r7, #9]
 800418a:	041b      	lsls	r3, r3, #16
 800418c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004190:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	4313      	orrs	r3, r2
 800419a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800419e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	0d5b      	lsrs	r3, r3, #21
 80041aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <I2C_TransferConfig+0x60>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	43db      	mvns	r3, r3
 80041b4:	ea02 0103 	and.w	r1, r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	03ff63ff 	.word	0x03ff63ff

080041d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d138      	bne.n	800425c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e032      	b.n	800425e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004226:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6819      	ldr	r1, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b20      	cmp	r3, #32
 800427e:	d139      	bne.n	80042f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800428a:	2302      	movs	r3, #2
 800428c:	e033      	b.n	80042f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2224      	movs	r2, #36	; 0x24
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e000      	b.n	80042f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
  }
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a04      	ldr	r2, [pc, #16]	; (8004320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004312:	6013      	str	r3, [r2, #0]
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40007000 	.word	0x40007000

08004324 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	4b23      	ldr	r3, [pc, #140]	; (80043bc <HAL_PWREx_EnableOverDrive+0x98>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	4a22      	ldr	r2, [pc, #136]	; (80043bc <HAL_PWREx_EnableOverDrive+0x98>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004338:	6413      	str	r3, [r2, #64]	; 0x40
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <HAL_PWREx_EnableOverDrive+0x98>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004346:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004352:	f7fe fc33 	bl	8002bbc <HAL_GetTick>
 8004356:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004358:	e009      	b.n	800436e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800435a:	f7fe fc2f 	bl	8002bbc <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004368:	d901      	bls.n	800436e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e022      	b.n	80043b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437a:	d1ee      	bne.n	800435a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800437c:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004388:	f7fe fc18 	bl	8002bbc <HAL_GetTick>
 800438c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800438e:	e009      	b.n	80043a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004390:	f7fe fc14 	bl	8002bbc <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800439e:	d901      	bls.n	80043a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e007      	b.n	80043b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b0:	d1ee      	bne.n	8004390 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40007000 	.word	0x40007000

080043c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043cc:	2300      	movs	r3, #0
 80043ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e29b      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 8087 	beq.w	80044f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043e8:	4b96      	ldr	r3, [pc, #600]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 030c 	and.w	r3, r3, #12
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d00c      	beq.n	800440e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f4:	4b93      	ldr	r3, [pc, #588]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d112      	bne.n	8004426 <HAL_RCC_OscConfig+0x62>
 8004400:	4b90      	ldr	r3, [pc, #576]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440c:	d10b      	bne.n	8004426 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440e:	4b8d      	ldr	r3, [pc, #564]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d06c      	beq.n	80044f4 <HAL_RCC_OscConfig+0x130>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d168      	bne.n	80044f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e275      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442e:	d106      	bne.n	800443e <HAL_RCC_OscConfig+0x7a>
 8004430:	4b84      	ldr	r3, [pc, #528]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a83      	ldr	r2, [pc, #524]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e02e      	b.n	800449c <HAL_RCC_OscConfig+0xd8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10c      	bne.n	8004460 <HAL_RCC_OscConfig+0x9c>
 8004446:	4b7f      	ldr	r3, [pc, #508]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7e      	ldr	r2, [pc, #504]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 800444c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b7c      	ldr	r3, [pc, #496]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a7b      	ldr	r2, [pc, #492]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e01d      	b.n	800449c <HAL_RCC_OscConfig+0xd8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0xc0>
 800446a:	4b76      	ldr	r3, [pc, #472]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a75      	ldr	r2, [pc, #468]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b73      	ldr	r3, [pc, #460]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a72      	ldr	r2, [pc, #456]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e00b      	b.n	800449c <HAL_RCC_OscConfig+0xd8>
 8004484:	4b6f      	ldr	r3, [pc, #444]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a6e      	ldr	r2, [pc, #440]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 800448a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b6c      	ldr	r3, [pc, #432]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a6b      	ldr	r2, [pc, #428]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fe fb8a 	bl	8002bbc <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fe fb86 	bl	8002bbc <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e229      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0xe8>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fe fb76 	bl	8002bbc <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fe fb72 	bl	8002bbc <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e215      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	4b57      	ldr	r3, [pc, #348]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x110>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d069      	beq.n	80045d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004502:	4b50      	ldr	r3, [pc, #320]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450e:	4b4d      	ldr	r3, [pc, #308]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	2b08      	cmp	r3, #8
 8004518:	d11c      	bne.n	8004554 <HAL_RCC_OscConfig+0x190>
 800451a:	4b4a      	ldr	r3, [pc, #296]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d116      	bne.n	8004554 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004526:	4b47      	ldr	r3, [pc, #284]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d005      	beq.n	800453e <HAL_RCC_OscConfig+0x17a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e1e9      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453e:	4b41      	ldr	r3, [pc, #260]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	493d      	ldr	r1, [pc, #244]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004552:	e040      	b.n	80045d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d023      	beq.n	80045a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800455c:	4b39      	ldr	r3, [pc, #228]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a38      	ldr	r2, [pc, #224]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fe fb28 	bl	8002bbc <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004570:	f7fe fb24 	bl	8002bbc <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1c7      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	4b30      	ldr	r3, [pc, #192]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458e:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4929      	ldr	r1, [pc, #164]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
 80045a2:	e018      	b.n	80045d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a26      	ldr	r2, [pc, #152]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fe fb04 	bl	8002bbc <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b8:	f7fe fb00 	bl	8002bbc <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e1a3      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d038      	beq.n	8004654 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d019      	beq.n	800461e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 80045ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ee:	4a15      	ldr	r2, [pc, #84]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fe fae1 	bl	8002bbc <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fe:	f7fe fadd 	bl	8002bbc <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e180      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x23a>
 800461c:	e01a      	b.n	8004654 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004622:	4a08      	ldr	r2, [pc, #32]	; (8004644 <HAL_RCC_OscConfig+0x280>)
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462a:	f7fe fac7 	bl	8002bbc <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004632:	f7fe fac3 	bl	8002bbc <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d903      	bls.n	8004648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e166      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
 8004644:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004648:	4b92      	ldr	r3, [pc, #584]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 800464a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1ee      	bne.n	8004632 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80a4 	beq.w	80047aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004662:	4b8c      	ldr	r3, [pc, #560]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10d      	bne.n	800468a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	4b89      	ldr	r3, [pc, #548]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a88      	ldr	r2, [pc, #544]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b86      	ldr	r3, [pc, #536]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800468a:	4b83      	ldr	r3, [pc, #524]	; (8004898 <HAL_RCC_OscConfig+0x4d4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d118      	bne.n	80046c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004696:	4b80      	ldr	r3, [pc, #512]	; (8004898 <HAL_RCC_OscConfig+0x4d4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a7f      	ldr	r2, [pc, #508]	; (8004898 <HAL_RCC_OscConfig+0x4d4>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a2:	f7fe fa8b 	bl	8002bbc <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046aa:	f7fe fa87 	bl	8002bbc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b64      	cmp	r3, #100	; 0x64
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e12a      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046bc:	4b76      	ldr	r3, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x4d4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d106      	bne.n	80046de <HAL_RCC_OscConfig+0x31a>
 80046d0:	4b70      	ldr	r3, [pc, #448]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a6f      	ldr	r2, [pc, #444]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	e02d      	b.n	800473a <HAL_RCC_OscConfig+0x376>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10c      	bne.n	8004700 <HAL_RCC_OscConfig+0x33c>
 80046e6:	4b6b      	ldr	r3, [pc, #428]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a6a      	ldr	r2, [pc, #424]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	4b68      	ldr	r3, [pc, #416]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a67      	ldr	r2, [pc, #412]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	f023 0304 	bic.w	r3, r3, #4
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
 80046fe:	e01c      	b.n	800473a <HAL_RCC_OscConfig+0x376>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b05      	cmp	r3, #5
 8004706:	d10c      	bne.n	8004722 <HAL_RCC_OscConfig+0x35e>
 8004708:	4b62      	ldr	r3, [pc, #392]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a61      	ldr	r2, [pc, #388]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 800470e:	f043 0304 	orr.w	r3, r3, #4
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
 8004714:	4b5f      	ldr	r3, [pc, #380]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	4a5e      	ldr	r2, [pc, #376]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6713      	str	r3, [r2, #112]	; 0x70
 8004720:	e00b      	b.n	800473a <HAL_RCC_OscConfig+0x376>
 8004722:	4b5c      	ldr	r3, [pc, #368]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a5b      	ldr	r2, [pc, #364]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
 800472e:	4b59      	ldr	r3, [pc, #356]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	4a58      	ldr	r2, [pc, #352]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d015      	beq.n	800476e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004742:	f7fe fa3b 	bl	8002bbc <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004748:	e00a      	b.n	8004760 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fe fa37 	bl	8002bbc <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	; 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e0d8      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004760:	4b4c      	ldr	r3, [pc, #304]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0ee      	beq.n	800474a <HAL_RCC_OscConfig+0x386>
 800476c:	e014      	b.n	8004798 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476e:	f7fe fa25 	bl	8002bbc <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004774:	e00a      	b.n	800478c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004776:	f7fe fa21 	bl	8002bbc <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f241 3288 	movw	r2, #5000	; 0x1388
 8004784:	4293      	cmp	r3, r2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e0c2      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478c:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1ee      	bne.n	8004776 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d105      	bne.n	80047aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479e:	4b3d      	ldr	r3, [pc, #244]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	4a3c      	ldr	r2, [pc, #240]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80047a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80ae 	beq.w	8004910 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047b4:	4b37      	ldr	r3, [pc, #220]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 030c 	and.w	r3, r3, #12
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d06d      	beq.n	800489c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d14b      	bne.n	8004860 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c8:	4b32      	ldr	r3, [pc, #200]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a31      	ldr	r2, [pc, #196]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80047ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fe f9f2 	bl	8002bbc <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe f9ee 	bl	8002bbc <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e091      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b29      	ldr	r3, [pc, #164]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69da      	ldr	r2, [r3, #28]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	3b01      	subs	r3, #1
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	071b      	lsls	r3, r3, #28
 8004826:	491b      	ldr	r1, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800482c:	4b19      	ldr	r3, [pc, #100]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fe f9c0 	bl	8002bbc <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004840:	f7fe f9bc 	bl	8002bbc <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e05f      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x47c>
 800485e:	e057      	b.n	8004910 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0b      	ldr	r2, [pc, #44]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800486a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fe f9a6 	bl	8002bbc <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004874:	f7fe f9a2 	bl	8002bbc <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e045      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	4b03      	ldr	r3, [pc, #12]	; (8004894 <HAL_RCC_OscConfig+0x4d0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x4b0>
 8004892:	e03d      	b.n	8004910 <HAL_RCC_OscConfig+0x54c>
 8004894:	40023800 	.word	0x40023800
 8004898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800489c:	4b1f      	ldr	r3, [pc, #124]	; (800491c <HAL_RCC_OscConfig+0x558>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d030      	beq.n	800490c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d129      	bne.n	800490c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d122      	bne.n	800490c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048cc:	4013      	ands	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d119      	bne.n	800490c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	3b01      	subs	r3, #1
 80048e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d10f      	bne.n	800490c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d107      	bne.n	800490c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800

08004920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0d0      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004938:	4b6a      	ldr	r3, [pc, #424]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d910      	bls.n	8004968 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b67      	ldr	r3, [pc, #412]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 020f 	bic.w	r2, r3, #15
 800494e:	4965      	ldr	r1, [pc, #404]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b63      	ldr	r3, [pc, #396]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0b8      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004980:	4b59      	ldr	r3, [pc, #356]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a58      	ldr	r2, [pc, #352]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800498a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004998:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a52      	ldr	r2, [pc, #328]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800499e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a4:	4b50      	ldr	r3, [pc, #320]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	494d      	ldr	r1, [pc, #308]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d040      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d115      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e07f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e2:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e073      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f2:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e06b      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f023 0203 	bic.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4936      	ldr	r1, [pc, #216]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a14:	f7fe f8d2 	bl	8002bbc <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a1c:	f7fe f8ce 	bl	8002bbc <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e053      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a32:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 020c 	and.w	r2, r3, #12
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d1eb      	bne.n	8004a1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a44:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d210      	bcs.n	8004a74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f023 020f 	bic.w	r2, r3, #15
 8004a5a:	4922      	ldr	r1, [pc, #136]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a62:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e032      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a80:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4916      	ldr	r1, [pc, #88]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	490e      	ldr	r1, [pc, #56]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ab2:	f000 f821 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	490a      	ldr	r1, [pc, #40]	; (8004aec <HAL_RCC_ClockConfig+0x1cc>)
 8004ac4:	5ccb      	ldrb	r3, [r1, r3]
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <HAL_RCC_ClockConfig+0x1d0>)
 8004acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ace:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <HAL_RCC_ClockConfig+0x1d4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fe f82e 	bl	8002b34 <HAL_InitTick>

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023c00 	.word	0x40023c00
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	0800a5f8 	.word	0x0800a5f8
 8004af0:	20000010 	.word	0x20000010
 8004af4:	20000014 	.word	0x20000014

08004af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004afc:	b094      	sub	sp, #80	; 0x50
 8004afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	647b      	str	r3, [r7, #68]	; 0x44
 8004b04:	2300      	movs	r3, #0
 8004b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b08:	2300      	movs	r3, #0
 8004b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b10:	4b79      	ldr	r3, [pc, #484]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 030c 	and.w	r3, r3, #12
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d00d      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0x40>
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	f200 80e1 	bhi.w	8004ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x34>
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b2a:	e0db      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b2c:	4b73      	ldr	r3, [pc, #460]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004b2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b30:	e0db      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b32:	4b73      	ldr	r3, [pc, #460]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b36:	e0d8      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b38:	4b6f      	ldr	r3, [pc, #444]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b40:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b42:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d063      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	2200      	movs	r2, #0
 8004b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
 8004b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	462b      	mov	r3, r5
 8004b6e:	f04f 0000 	mov.w	r0, #0
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	0159      	lsls	r1, r3, #5
 8004b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b7c:	0150      	lsls	r0, r2, #5
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4621      	mov	r1, r4
 8004b84:	1a51      	subs	r1, r2, r1
 8004b86:	6139      	str	r1, [r7, #16]
 8004b88:	4629      	mov	r1, r5
 8004b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b9c:	4659      	mov	r1, fp
 8004b9e:	018b      	lsls	r3, r1, #6
 8004ba0:	4651      	mov	r1, sl
 8004ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ba6:	4651      	mov	r1, sl
 8004ba8:	018a      	lsls	r2, r1, #6
 8004baa:	4651      	mov	r1, sl
 8004bac:	ebb2 0801 	subs.w	r8, r2, r1
 8004bb0:	4659      	mov	r1, fp
 8004bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bca:	4690      	mov	r8, r2
 8004bcc:	4699      	mov	r9, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	eb18 0303 	adds.w	r3, r8, r3
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	462b      	mov	r3, r5
 8004bd8:	eb49 0303 	adc.w	r3, r9, r3
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bea:	4629      	mov	r1, r5
 8004bec:	024b      	lsls	r3, r1, #9
 8004bee:	4621      	mov	r1, r4
 8004bf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	024a      	lsls	r2, r1, #9
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfe:	2200      	movs	r2, #0
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c08:	f7fb fb72 	bl	80002f0 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4613      	mov	r3, r2
 8004c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c14:	e058      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c16:	4b38      	ldr	r3, [pc, #224]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	4611      	mov	r1, r2
 8004c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c26:	623b      	str	r3, [r7, #32]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	f04f 0000 	mov.w	r0, #0
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	0159      	lsls	r1, r3, #5
 8004c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c42:	0150      	lsls	r0, r2, #5
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4641      	mov	r1, r8
 8004c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c4e:	4649      	mov	r1, r9
 8004c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c68:	ebb2 040a 	subs.w	r4, r2, sl
 8004c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	00eb      	lsls	r3, r5, #3
 8004c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c7e:	00e2      	lsls	r2, r4, #3
 8004c80:	4614      	mov	r4, r2
 8004c82:	461d      	mov	r5, r3
 8004c84:	4643      	mov	r3, r8
 8004c86:	18e3      	adds	r3, r4, r3
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	eb45 0303 	adc.w	r3, r5, r3
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	028b      	lsls	r3, r1, #10
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ca8:	4621      	mov	r1, r4
 8004caa:	028a      	lsls	r2, r1, #10
 8004cac:	4610      	mov	r0, r2
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	61fa      	str	r2, [r7, #28]
 8004cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cbc:	f7fb fb18 	bl	80002f0 <__aeabi_uldivmod>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ce2:	e002      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ce6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3750      	adds	r7, #80	; 0x50
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	00f42400 	.word	0x00f42400
 8004d00:	007a1200 	.word	0x007a1200

08004d04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000010 	.word	0x20000010

08004d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d20:	f7ff fff0 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0a9b      	lsrs	r3, r3, #10
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4903      	ldr	r1, [pc, #12]	; (8004d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	0800a608 	.word	0x0800a608

08004d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d48:	f7ff ffdc 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	0b5b      	lsrs	r3, r3, #13
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	4903      	ldr	r1, [pc, #12]	; (8004d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d5a:	5ccb      	ldrb	r3, [r1, r3]
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40023800 	.word	0x40023800
 8004d68:	0800a608 	.word	0x0800a608

08004d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d012      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d94:	4b69      	ldr	r3, [pc, #420]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4a68      	ldr	r2, [pc, #416]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d9e:	6093      	str	r3, [r2, #8]
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da8:	4964      	ldr	r1, [pc, #400]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004db6:	2301      	movs	r3, #1
 8004db8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d017      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dc6:	4b5d      	ldr	r3, [pc, #372]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	4959      	ldr	r1, [pc, #356]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de4:	d101      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d017      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e02:	4b4e      	ldr	r3, [pc, #312]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	494a      	ldr	r1, [pc, #296]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e20:	d101      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 808b 	beq.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e50:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	4a39      	ldr	r2, [pc, #228]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5c:	4b37      	ldr	r3, [pc, #220]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e68:	4b35      	ldr	r3, [pc, #212]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a34      	ldr	r2, [pc, #208]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e74:	f7fd fea2 	bl	8002bbc <HAL_GetTick>
 8004e78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7c:	f7fd fe9e 	bl	8002bbc <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	; 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e38f      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e8e:	4b2c      	ldr	r3, [pc, #176]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e9a:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d035      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d02e      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eb8:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ec2:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ecc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ece:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004eda:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ee0:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d114      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fd fe66 	bl	8002bbc <HAL_GetTick>
 8004ef0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fd fe62 	bl	8002bbc <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e351      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0ee      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f22:	d111      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f32:	400b      	ands	r3, r1
 8004f34:	4901      	ldr	r1, [pc, #4]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40007000 	.word	0x40007000
 8004f44:	0ffffcff 	.word	0x0ffffcff
 8004f48:	4bac      	ldr	r3, [pc, #688]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4aab      	ldr	r2, [pc, #684]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f52:	6093      	str	r3, [r2, #8]
 8004f54:	4ba9      	ldr	r3, [pc, #676]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f60:	49a6      	ldr	r1, [pc, #664]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d010      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f72:	4ba2      	ldr	r3, [pc, #648]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f78:	4aa0      	ldr	r2, [pc, #640]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f82:	4b9e      	ldr	r3, [pc, #632]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	499b      	ldr	r1, [pc, #620]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fa0:	4b96      	ldr	r3, [pc, #600]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fae:	4993      	ldr	r1, [pc, #588]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fc2:	4b8e      	ldr	r3, [pc, #568]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fd0:	498a      	ldr	r1, [pc, #552]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fe4:	4b85      	ldr	r3, [pc, #532]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff2:	4982      	ldr	r1, [pc, #520]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005006:	4b7d      	ldr	r3, [pc, #500]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	4979      	ldr	r1, [pc, #484]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005028:	4b74      	ldr	r3, [pc, #464]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	f023 0203 	bic.w	r2, r3, #3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	4971      	ldr	r1, [pc, #452]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800504a:	4b6c      	ldr	r3, [pc, #432]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	f023 020c 	bic.w	r2, r3, #12
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005058:	4968      	ldr	r1, [pc, #416]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800506c:	4b63      	ldr	r3, [pc, #396]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507a:	4960      	ldr	r1, [pc, #384]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800508e:	4b5b      	ldr	r3, [pc, #364]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509c:	4957      	ldr	r1, [pc, #348]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050b0:	4b52      	ldr	r3, [pc, #328]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	494f      	ldr	r1, [pc, #316]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050d2:	4b4a      	ldr	r3, [pc, #296]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	4946      	ldr	r1, [pc, #280]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050f4:	4b41      	ldr	r3, [pc, #260]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005102:	493e      	ldr	r1, [pc, #248]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005116:	4b39      	ldr	r3, [pc, #228]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005124:	4935      	ldr	r1, [pc, #212]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005138:	4b30      	ldr	r3, [pc, #192]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005146:	492d      	ldr	r1, [pc, #180]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d011      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800515a:	4b28      	ldr	r3, [pc, #160]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005168:	4924      	ldr	r1, [pc, #144]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005178:	d101      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800517a:	2301      	movs	r3, #1
 800517c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800519a:	4b18      	ldr	r3, [pc, #96]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a8:	4914      	ldr	r1, [pc, #80]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00b      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051bc:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051cc:	490b      	ldr	r1, [pc, #44]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00f      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f0:	4902      	ldr	r1, [pc, #8]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051f8:	e002      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800520c:	4b8a      	ldr	r3, [pc, #552]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800520e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005212:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	4986      	ldr	r1, [pc, #536]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005230:	4b81      	ldr	r3, [pc, #516]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005236:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005240:	497d      	ldr	r1, [pc, #500]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d006      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80d6 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800525c:	4b76      	ldr	r3, [pc, #472]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a75      	ldr	r2, [pc, #468]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005262:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005268:	f7fd fca8 	bl	8002bbc <HAL_GetTick>
 800526c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005270:	f7fd fca4 	bl	8002bbc <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	; 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e195      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005282:	4b6d      	ldr	r3, [pc, #436]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d021      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x572>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d11d      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052a2:	4b65      	ldr	r3, [pc, #404]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a8:	0c1b      	lsrs	r3, r3, #16
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052b0:	4b61      	ldr	r3, [pc, #388]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b6:	0e1b      	lsrs	r3, r3, #24
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	019a      	lsls	r2, r3, #6
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	041b      	lsls	r3, r3, #16
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	061b      	lsls	r3, r3, #24
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	071b      	lsls	r3, r3, #28
 80052d6:	4958      	ldr	r1, [pc, #352]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d02e      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005308:	d129      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800530a:	4b4b      	ldr	r3, [pc, #300]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800530c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005318:	4b47      	ldr	r3, [pc, #284]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800531e:	0f1b      	lsrs	r3, r3, #28
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	019a      	lsls	r2, r3, #6
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	061b      	lsls	r3, r3, #24
 8005338:	431a      	orrs	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	071b      	lsls	r3, r3, #28
 800533e:	493e      	ldr	r1, [pc, #248]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005346:	4b3c      	ldr	r3, [pc, #240]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534c:	f023 021f 	bic.w	r2, r3, #31
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	3b01      	subs	r3, #1
 8005356:	4938      	ldr	r1, [pc, #224]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01d      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800536a:	4b33      	ldr	r3, [pc, #204]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005370:	0e1b      	lsrs	r3, r3, #24
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005378:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537e:	0f1b      	lsrs	r3, r3, #28
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	019a      	lsls	r2, r3, #6
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	431a      	orrs	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	061b      	lsls	r3, r3, #24
 8005398:	431a      	orrs	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	071b      	lsls	r3, r3, #28
 800539e:	4926      	ldr	r1, [pc, #152]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	019a      	lsls	r2, r3, #6
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	071b      	lsls	r3, r3, #28
 80053ce:	491a      	ldr	r1, [pc, #104]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053d6:	4b18      	ldr	r3, [pc, #96]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e2:	f7fd fbeb 	bl	8002bbc <HAL_GetTick>
 80053e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ea:	f7fd fbe7 	bl	8002bbc <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b64      	cmp	r3, #100	; 0x64
 80053f6:	d901      	bls.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e0d8      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053fc:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	2b01      	cmp	r3, #1
 800540c:	f040 80ce 	bne.w	80055ac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a08      	ldr	r2, [pc, #32]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800541c:	f7fd fbce 	bl	8002bbc <HAL_GetTick>
 8005420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005422:	e00b      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005424:	f7fd fbca 	bl	8002bbc <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	; 0x64
 8005430:	d904      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e0bb      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005436:	bf00      	nop
 8005438:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800543c:	4b5e      	ldr	r3, [pc, #376]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005448:	d0ec      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005466:	2b00      	cmp	r3, #0
 8005468:	d02e      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d12a      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005472:	4b51      	ldr	r3, [pc, #324]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005478:	0c1b      	lsrs	r3, r3, #16
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005480:	4b4d      	ldr	r3, [pc, #308]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	0f1b      	lsrs	r3, r3, #28
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	019a      	lsls	r2, r3, #6
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	061b      	lsls	r3, r3, #24
 80054a0:	431a      	orrs	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	071b      	lsls	r3, r3, #28
 80054a6:	4944      	ldr	r1, [pc, #272]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054ae:	4b42      	ldr	r3, [pc, #264]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	3b01      	subs	r3, #1
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	493d      	ldr	r1, [pc, #244]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d022      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054dc:	d11d      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054de:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	0e1b      	lsrs	r3, r3, #24
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054ec:	4b32      	ldr	r3, [pc, #200]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	0f1b      	lsrs	r3, r3, #28
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	019a      	lsls	r2, r3, #6
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	041b      	lsls	r3, r3, #16
 8005506:	431a      	orrs	r2, r3
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	061b      	lsls	r3, r3, #24
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	071b      	lsls	r3, r3, #28
 8005512:	4929      	ldr	r1, [pc, #164]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d028      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005526:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	0e1b      	lsrs	r3, r3, #24
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005534:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	0c1b      	lsrs	r3, r3, #16
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	019a      	lsls	r2, r3, #6
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	431a      	orrs	r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	071b      	lsls	r3, r3, #28
 800555a:	4917      	ldr	r1, [pc, #92]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	4911      	ldr	r1, [pc, #68]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005578:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a0e      	ldr	r2, [pc, #56]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800557e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005584:	f7fd fb1a 	bl	8002bbc <HAL_GetTick>
 8005588:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800558a:	e008      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800558c:	f7fd fb16 	bl	8002bbc <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d901      	bls.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e007      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055aa:	d1ef      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40023800 	.word	0x40023800

080055bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e09d      	b.n	800570a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d108      	bne.n	80055e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055de:	d009      	beq.n	80055f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	61da      	str	r2, [r3, #28]
 80055e6:	e005      	b.n	80055f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc fd2a 	bl	8002068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005634:	d902      	bls.n	800563c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e002      	b.n	8005642 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800563c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005640:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800564a:	d007      	beq.n	800565c <HAL_SPI_Init+0xa0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005654:	d002      	beq.n	800565c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	ea42 0103 	orr.w	r1, r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	0c1b      	lsrs	r3, r3, #16
 80056b8:	f003 0204 	and.w	r2, r3, #4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056d8:	ea42 0103 	orr.w	r1, r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e049      	b.n	80057b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fc fd15 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f001 f831 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d001      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e054      	b.n	8005882 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a26      	ldr	r2, [pc, #152]	; (8005890 <HAL_TIM_Base_Start_IT+0xd0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d022      	beq.n	8005840 <HAL_TIM_Base_Start_IT+0x80>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005802:	d01d      	beq.n	8005840 <HAL_TIM_Base_Start_IT+0x80>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a22      	ldr	r2, [pc, #136]	; (8005894 <HAL_TIM_Base_Start_IT+0xd4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d018      	beq.n	8005840 <HAL_TIM_Base_Start_IT+0x80>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a21      	ldr	r2, [pc, #132]	; (8005898 <HAL_TIM_Base_Start_IT+0xd8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <HAL_TIM_Base_Start_IT+0x80>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1f      	ldr	r2, [pc, #124]	; (800589c <HAL_TIM_Base_Start_IT+0xdc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00e      	beq.n	8005840 <HAL_TIM_Base_Start_IT+0x80>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d009      	beq.n	8005840 <HAL_TIM_Base_Start_IT+0x80>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1c      	ldr	r2, [pc, #112]	; (80058a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_TIM_Base_Start_IT+0x80>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d115      	bne.n	800586c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	4b19      	ldr	r3, [pc, #100]	; (80058ac <HAL_TIM_Base_Start_IT+0xec>)
 8005848:	4013      	ands	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b06      	cmp	r3, #6
 8005850:	d015      	beq.n	800587e <HAL_TIM_Base_Start_IT+0xbe>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005858:	d011      	beq.n	800587e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586a:	e008      	b.n	800587e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	e000      	b.n	8005880 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40010400 	.word	0x40010400
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40001800 	.word	0x40001800
 80058ac:	00010007 	.word	0x00010007

080058b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e049      	b.n	8005956 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f841 	bl	800595e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f000 ff62 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e049      	b.n	8005a18 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fc fcf5 	bl	8002388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f000 ff01 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <HAL_TIM_PWM_Start+0x24>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	bf14      	ite	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2300      	moveq	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	e03c      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d109      	bne.n	8005a5e <HAL_TIM_PWM_Start+0x3e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e02f      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d109      	bne.n	8005a78 <HAL_TIM_PWM_Start+0x58>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e022      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b0c      	cmp	r3, #12
 8005a7c:	d109      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x72>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e015      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	d109      	bne.n	8005aac <HAL_TIM_PWM_Start+0x8c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	e008      	b.n	8005abe <HAL_TIM_PWM_Start+0x9e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e092      	b.n	8005bec <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0xb6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad4:	e023      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0xc6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae4:	e01b      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_PWM_Start+0xd6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af4:	e013      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_PWM_Start+0xe6>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b04:	e00b      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_PWM_Start+0xf6>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b14:	e003      	b.n	8005b1e <HAL_TIM_PWM_Start+0xfe>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2201      	movs	r2, #1
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f001 fb08 	bl	800713c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a30      	ldr	r2, [pc, #192]	; (8005bf4 <HAL_TIM_PWM_Start+0x1d4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d004      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x120>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a2f      	ldr	r2, [pc, #188]	; (8005bf8 <HAL_TIM_PWM_Start+0x1d8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIM_PWM_Start+0x124>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <HAL_TIM_PWM_Start+0x126>
 8005b44:	2300      	movs	r3, #0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a25      	ldr	r2, [pc, #148]	; (8005bf4 <HAL_TIM_PWM_Start+0x1d4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <HAL_TIM_PWM_Start+0x18a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6c:	d01d      	beq.n	8005baa <HAL_TIM_PWM_Start+0x18a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <HAL_TIM_PWM_Start+0x1dc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <HAL_TIM_PWM_Start+0x18a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a20      	ldr	r2, [pc, #128]	; (8005c00 <HAL_TIM_PWM_Start+0x1e0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_TIM_PWM_Start+0x18a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1f      	ldr	r2, [pc, #124]	; (8005c04 <HAL_TIM_PWM_Start+0x1e4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_TIM_PWM_Start+0x18a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a19      	ldr	r2, [pc, #100]	; (8005bf8 <HAL_TIM_PWM_Start+0x1d8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_TIM_PWM_Start+0x18a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_TIM_PWM_Start+0x1e8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_TIM_PWM_Start+0x18a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <HAL_TIM_PWM_Start+0x1ec>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d115      	bne.n	8005bd6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <HAL_TIM_PWM_Start+0x1f0>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d015      	beq.n	8005be8 <HAL_TIM_PWM_Start+0x1c8>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc2:	d011      	beq.n	8005be8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd4:	e008      	b.n	8005be8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e000      	b.n	8005bea <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40010400 	.word	0x40010400
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40000800 	.word	0x40000800
 8005c04:	40000c00 	.word	0x40000c00
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40001800 	.word	0x40001800
 8005c10:	00010007 	.word	0x00010007

08005c14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e049      	b.n	8005cba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f841 	bl	8005cc2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	4619      	mov	r1, r3
 8005c52:	4610      	mov	r0, r2
 8005c54:	f000 fdb0 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e08f      	b.n	8005e0c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7fc facb 	bl	800229c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6899      	ldr	r1, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b3e      	ldr	r3, [pc, #248]	; (8005e14 <HAL_TIM_Encoder_Init+0x13c>)
 8005d1a:	400b      	ands	r3, r1
 8005d1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3304      	adds	r3, #4
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f000 fd45 	bl	80067b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4b31      	ldr	r3, [pc, #196]	; (8005e18 <HAL_TIM_Encoder_Init+0x140>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	4313      	orrs	r3, r2
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4b2b      	ldr	r3, [pc, #172]	; (8005e1c <HAL_TIM_Encoder_Init+0x144>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4b2a      	ldr	r3, [pc, #168]	; (8005e20 <HAL_TIM_Encoder_Init+0x148>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	4313      	orrs	r3, r2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	011a      	lsls	r2, r3, #4
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	031b      	lsls	r3, r3, #12
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	fffebff8 	.word	0xfffebff8
 8005e18:	fffffcfc 	.word	0xfffffcfc
 8005e1c:	fffff3f3 	.word	0xfffff3f3
 8005e20:	ffff0f0f 	.word	0xffff0f0f

08005e24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d110      	bne.n	8005e76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d102      	bne.n	8005e60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e5a:	7b7b      	ldrb	r3, [r7, #13]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d001      	beq.n	8005e64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e069      	b.n	8005f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e74:	e031      	b.n	8005eda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d110      	bne.n	8005e9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d102      	bne.n	8005e88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e82:	7b3b      	ldrb	r3, [r7, #12]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d001      	beq.n	8005e8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e055      	b.n	8005f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e9c:	e01d      	b.n	8005eda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d108      	bne.n	8005eb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d105      	bne.n	8005eb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eaa:	7b7b      	ldrb	r3, [r7, #13]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d102      	bne.n	8005eb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eb0:	7b3b      	ldrb	r3, [r7, #12]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d001      	beq.n	8005eba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e03e      	b.n	8005f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_TIM_Encoder_Start+0xc4>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d008      	beq.n	8005ef8 <HAL_TIM_Encoder_Start+0xd4>
 8005ee6:	e00f      	b.n	8005f08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2201      	movs	r2, #1
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 f923 	bl	800713c <TIM_CCxChannelCmd>
      break;
 8005ef6:	e016      	b.n	8005f26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2201      	movs	r2, #1
 8005efe:	2104      	movs	r1, #4
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 f91b 	bl	800713c <TIM_CCxChannelCmd>
      break;
 8005f06:	e00e      	b.n	8005f26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 f913 	bl	800713c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	2104      	movs	r1, #4
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 f90c 	bl	800713c <TIM_CCxChannelCmd>
      break;
 8005f24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0201 	orr.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d122      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d11b      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0202 	mvn.w	r2, #2
 8005f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fbfa 	bl	800677c <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fbec 	bl	8006768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fbfd 	bl	8006790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0204 	mvn.w	r2, #4
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fbd0 	bl	800677c <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fbc2 	bl	8006768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fbd3 	bl	8006790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d122      	bne.n	8006044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b08      	cmp	r3, #8
 800600a:	d11b      	bne.n	8006044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0208 	mvn.w	r2, #8
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2204      	movs	r2, #4
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fba6 	bl	800677c <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fb98 	bl	8006768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fba9 	bl	8006790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b10      	cmp	r3, #16
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b10      	cmp	r3, #16
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0210 	mvn.w	r2, #16
 8006068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2208      	movs	r2, #8
 800606e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fb7c 	bl	800677c <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fb6e 	bl	8006768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fb7f 	bl	8006790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10e      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d107      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0201 	mvn.w	r2, #1
 80060bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fa fc26 	bl	8000910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b80      	cmp	r3, #128	; 0x80
 80060d0:	d10e      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d107      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 f962 	bl	80073b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fe:	d10e      	bne.n	800611e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d107      	bne.n	800611e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 f955 	bl	80073c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	d10e      	bne.n	800614a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d107      	bne.n	800614a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fb2d 	bl	80067a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b20      	cmp	r3, #32
 8006156:	d10e      	bne.n	8006176 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b20      	cmp	r3, #32
 8006164:	d107      	bne.n	8006176 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f06f 0220 	mvn.w	r2, #32
 800616e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 f915 	bl	80073a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_TIM_OC_ConfigChannel+0x1e>
 800619a:	2302      	movs	r3, #2
 800619c:	e066      	b.n	800626c <HAL_TIM_OC_ConfigChannel+0xec>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b14      	cmp	r3, #20
 80061aa:	d857      	bhi.n	800625c <HAL_TIM_OC_ConfigChannel+0xdc>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	08006209 	.word	0x08006209
 80061b8:	0800625d 	.word	0x0800625d
 80061bc:	0800625d 	.word	0x0800625d
 80061c0:	0800625d 	.word	0x0800625d
 80061c4:	08006217 	.word	0x08006217
 80061c8:	0800625d 	.word	0x0800625d
 80061cc:	0800625d 	.word	0x0800625d
 80061d0:	0800625d 	.word	0x0800625d
 80061d4:	08006225 	.word	0x08006225
 80061d8:	0800625d 	.word	0x0800625d
 80061dc:	0800625d 	.word	0x0800625d
 80061e0:	0800625d 	.word	0x0800625d
 80061e4:	08006233 	.word	0x08006233
 80061e8:	0800625d 	.word	0x0800625d
 80061ec:	0800625d 	.word	0x0800625d
 80061f0:	0800625d 	.word	0x0800625d
 80061f4:	08006241 	.word	0x08006241
 80061f8:	0800625d 	.word	0x0800625d
 80061fc:	0800625d 	.word	0x0800625d
 8006200:	0800625d 	.word	0x0800625d
 8006204:	0800624f 	.word	0x0800624f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fb72 	bl	80068f8 <TIM_OC1_SetConfig>
      break;
 8006214:	e025      	b.n	8006262 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fbdd 	bl	80069dc <TIM_OC2_SetConfig>
      break;
 8006222:	e01e      	b.n	8006262 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fc4e 	bl	8006acc <TIM_OC3_SetConfig>
      break;
 8006230:	e017      	b.n	8006262 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fcbd 	bl	8006bb8 <TIM_OC4_SetConfig>
      break;
 800623e:	e010      	b.n	8006262 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fd0e 	bl	8006c68 <TIM_OC5_SetConfig>
      break;
 800624c:	e009      	b.n	8006262 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fd59 	bl	8006d0c <TIM_OC6_SetConfig>
      break;
 800625a:	e002      	b.n	8006262 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]
      break;
 8006260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_TIM_IC_ConfigChannel+0x1e>
 800628e:	2302      	movs	r3, #2
 8006290:	e088      	b.n	80063a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d11b      	bne.n	80062d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80062b0:	f000 fd80 	bl	8006db4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 020c 	bic.w	r2, r2, #12
 80062c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6999      	ldr	r1, [r3, #24]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	619a      	str	r2, [r3, #24]
 80062d6:	e060      	b.n	800639a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d11c      	bne.n	8006318 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80062ee:	f000 fe04 	bl	8006efa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006300:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6999      	ldr	r1, [r3, #24]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	021a      	lsls	r2, r3, #8
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	619a      	str	r2, [r3, #24]
 8006316:	e040      	b.n	800639a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b08      	cmp	r3, #8
 800631c:	d11b      	bne.n	8006356 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800632e:	f000 fe51 	bl	8006fd4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 020c 	bic.w	r2, r2, #12
 8006340:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69d9      	ldr	r1, [r3, #28]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	61da      	str	r2, [r3, #28]
 8006354:	e021      	b.n	800639a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d11c      	bne.n	8006396 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800636c:	f000 fe6e 	bl	800704c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69da      	ldr	r2, [r3, #28]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800637e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69d9      	ldr	r1, [r3, #28]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	021a      	lsls	r2, r3, #8
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	61da      	str	r2, [r3, #28]
 8006394:	e001      	b.n	800639a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e0ff      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b14      	cmp	r3, #20
 80063d6:	f200 80f0 	bhi.w	80065ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	08006435 	.word	0x08006435
 80063e4:	080065bb 	.word	0x080065bb
 80063e8:	080065bb 	.word	0x080065bb
 80063ec:	080065bb 	.word	0x080065bb
 80063f0:	08006475 	.word	0x08006475
 80063f4:	080065bb 	.word	0x080065bb
 80063f8:	080065bb 	.word	0x080065bb
 80063fc:	080065bb 	.word	0x080065bb
 8006400:	080064b7 	.word	0x080064b7
 8006404:	080065bb 	.word	0x080065bb
 8006408:	080065bb 	.word	0x080065bb
 800640c:	080065bb 	.word	0x080065bb
 8006410:	080064f7 	.word	0x080064f7
 8006414:	080065bb 	.word	0x080065bb
 8006418:	080065bb 	.word	0x080065bb
 800641c:	080065bb 	.word	0x080065bb
 8006420:	08006539 	.word	0x08006539
 8006424:	080065bb 	.word	0x080065bb
 8006428:	080065bb 	.word	0x080065bb
 800642c:	080065bb 	.word	0x080065bb
 8006430:	08006579 	.word	0x08006579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fa5c 	bl	80068f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0208 	orr.w	r2, r2, #8
 800644e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0204 	bic.w	r2, r2, #4
 800645e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6999      	ldr	r1, [r3, #24]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	619a      	str	r2, [r3, #24]
      break;
 8006472:	e0a5      	b.n	80065c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 faae 	bl	80069dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800648e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800649e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6999      	ldr	r1, [r3, #24]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	021a      	lsls	r2, r3, #8
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	619a      	str	r2, [r3, #24]
      break;
 80064b4:	e084      	b.n	80065c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fb05 	bl	8006acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0208 	orr.w	r2, r2, #8
 80064d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0204 	bic.w	r2, r2, #4
 80064e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69d9      	ldr	r1, [r3, #28]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	61da      	str	r2, [r3, #28]
      break;
 80064f4:	e064      	b.n	80065c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fb5b 	bl	8006bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69d9      	ldr	r1, [r3, #28]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	021a      	lsls	r2, r3, #8
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	61da      	str	r2, [r3, #28]
      break;
 8006536:	e043      	b.n	80065c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fb92 	bl	8006c68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0208 	orr.w	r2, r2, #8
 8006552:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0204 	bic.w	r2, r2, #4
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006576:	e023      	b.n	80065c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fbc4 	bl	8006d0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006592:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	021a      	lsls	r2, r3, #8
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065b8:	e002      	b.n	80065c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	75fb      	strb	r3, [r7, #23]
      break;
 80065be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop

080065d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIM_ConfigClockSource+0x1c>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e0b4      	b.n	800675a <HAL_TIM_ConfigClockSource+0x186>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	4b56      	ldr	r3, [pc, #344]	; (8006764 <HAL_TIM_ConfigClockSource+0x190>)
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006628:	d03e      	beq.n	80066a8 <HAL_TIM_ConfigClockSource+0xd4>
 800662a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662e:	f200 8087 	bhi.w	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006636:	f000 8086 	beq.w	8006746 <HAL_TIM_ConfigClockSource+0x172>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	d87f      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	2b70      	cmp	r3, #112	; 0x70
 8006642:	d01a      	beq.n	800667a <HAL_TIM_ConfigClockSource+0xa6>
 8006644:	2b70      	cmp	r3, #112	; 0x70
 8006646:	d87b      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b60      	cmp	r3, #96	; 0x60
 800664a:	d050      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x11a>
 800664c:	2b60      	cmp	r3, #96	; 0x60
 800664e:	d877      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b50      	cmp	r3, #80	; 0x50
 8006652:	d03c      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0xfa>
 8006654:	2b50      	cmp	r3, #80	; 0x50
 8006656:	d873      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	d058      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x13a>
 800665c:	2b40      	cmp	r3, #64	; 0x40
 800665e:	d86f      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b30      	cmp	r3, #48	; 0x30
 8006662:	d064      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 8006664:	2b30      	cmp	r3, #48	; 0x30
 8006666:	d86b      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b20      	cmp	r3, #32
 800666a:	d060      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 800666c:	2b20      	cmp	r3, #32
 800666e:	d867      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d05c      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b10      	cmp	r3, #16
 8006676:	d05a      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 8006678:	e062      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800668a:	f000 fd37 	bl	80070fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800669c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	609a      	str	r2, [r3, #8]
      break;
 80066a6:	e04f      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066b8:	f000 fd20 	bl	80070fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ca:	609a      	str	r2, [r3, #8]
      break;
 80066cc:	e03c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066da:	461a      	mov	r2, r3
 80066dc:	f000 fbde 	bl	8006e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2150      	movs	r1, #80	; 0x50
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fced 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 80066ec:	e02c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066fa:	461a      	mov	r2, r3
 80066fc:	f000 fc3a 	bl	8006f74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2160      	movs	r1, #96	; 0x60
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fcdd 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 800670c:	e01c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671a:	461a      	mov	r2, r3
 800671c:	f000 fbbe 	bl	8006e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2140      	movs	r1, #64	; 0x40
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fccd 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 800672c:	e00c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f000 fcc4 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 800673e:	e003      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
      break;
 8006744:	e000      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	fffeff88 	.word	0xfffeff88

08006768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a40      	ldr	r2, [pc, #256]	; (80068cc <TIM_Base_SetConfig+0x114>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d00f      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3d      	ldr	r2, [pc, #244]	; (80068d0 <TIM_Base_SetConfig+0x118>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3c      	ldr	r2, [pc, #240]	; (80068d4 <TIM_Base_SetConfig+0x11c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3b      	ldr	r2, [pc, #236]	; (80068d8 <TIM_Base_SetConfig+0x120>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a3a      	ldr	r2, [pc, #232]	; (80068dc <TIM_Base_SetConfig+0x124>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d108      	bne.n	800680a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <TIM_Base_SetConfig+0x114>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d02b      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006818:	d027      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2c      	ldr	r2, [pc, #176]	; (80068d0 <TIM_Base_SetConfig+0x118>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d023      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2b      	ldr	r2, [pc, #172]	; (80068d4 <TIM_Base_SetConfig+0x11c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01f      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <TIM_Base_SetConfig+0x120>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01b      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a29      	ldr	r2, [pc, #164]	; (80068dc <TIM_Base_SetConfig+0x124>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d017      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a28      	ldr	r2, [pc, #160]	; (80068e0 <TIM_Base_SetConfig+0x128>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <TIM_Base_SetConfig+0x12c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00f      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <TIM_Base_SetConfig+0x130>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00b      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a25      	ldr	r2, [pc, #148]	; (80068ec <TIM_Base_SetConfig+0x134>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a24      	ldr	r2, [pc, #144]	; (80068f0 <TIM_Base_SetConfig+0x138>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a23      	ldr	r2, [pc, #140]	; (80068f4 <TIM_Base_SetConfig+0x13c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d108      	bne.n	800687c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <TIM_Base_SetConfig+0x114>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a0c      	ldr	r2, [pc, #48]	; (80068dc <TIM_Base_SetConfig+0x124>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d103      	bne.n	80068b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	615a      	str	r2, [r3, #20]
}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40010400 	.word	0x40010400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800
 80068ec:	40001800 	.word	0x40001800
 80068f0:	40001c00 	.word	0x40001c00
 80068f4:	40002000 	.word	0x40002000

080068f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f023 0201 	bic.w	r2, r3, #1
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <TIM_OC1_SetConfig+0xd8>)
 8006924:	4013      	ands	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0303 	bic.w	r3, r3, #3
 800692e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 0302 	bic.w	r3, r3, #2
 8006940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a21      	ldr	r2, [pc, #132]	; (80069d4 <TIM_OC1_SetConfig+0xdc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC1_SetConfig+0x64>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a20      	ldr	r2, [pc, #128]	; (80069d8 <TIM_OC1_SetConfig+0xe0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d10c      	bne.n	8006976 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f023 0308 	bic.w	r3, r3, #8
 8006962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a16      	ldr	r2, [pc, #88]	; (80069d4 <TIM_OC1_SetConfig+0xdc>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_OC1_SetConfig+0x8e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a15      	ldr	r2, [pc, #84]	; (80069d8 <TIM_OC1_SetConfig+0xe0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d111      	bne.n	80069aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800698c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	621a      	str	r2, [r3, #32]
}
 80069c4:	bf00      	nop
 80069c6:	371c      	adds	r7, #28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	fffeff8f 	.word	0xfffeff8f
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400

080069dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f023 0210 	bic.w	r2, r3, #16
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4b2e      	ldr	r3, [pc, #184]	; (8006ac0 <TIM_OC2_SetConfig+0xe4>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f023 0320 	bic.w	r3, r3, #32
 8006a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a23      	ldr	r2, [pc, #140]	; (8006ac4 <TIM_OC2_SetConfig+0xe8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC2_SetConfig+0x68>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a22      	ldr	r2, [pc, #136]	; (8006ac8 <TIM_OC2_SetConfig+0xec>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d10d      	bne.n	8006a60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a18      	ldr	r2, [pc, #96]	; (8006ac4 <TIM_OC2_SetConfig+0xe8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC2_SetConfig+0x94>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <TIM_OC2_SetConfig+0xec>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d113      	bne.n	8006a98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	feff8fff 	.word	0xfeff8fff
 8006ac4:	40010000 	.word	0x40010000
 8006ac8:	40010400 	.word	0x40010400

08006acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <TIM_OC3_SetConfig+0xe0>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a22      	ldr	r2, [pc, #136]	; (8006bb0 <TIM_OC3_SetConfig+0xe4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_OC3_SetConfig+0x66>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a21      	ldr	r2, [pc, #132]	; (8006bb4 <TIM_OC3_SetConfig+0xe8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d10d      	bne.n	8006b4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <TIM_OC3_SetConfig+0xe4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_OC3_SetConfig+0x92>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a16      	ldr	r2, [pc, #88]	; (8006bb4 <TIM_OC3_SetConfig+0xe8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d113      	bne.n	8006b86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	621a      	str	r2, [r3, #32]
}
 8006ba0:	bf00      	nop
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	fffeff8f 	.word	0xfffeff8f
 8006bb0:	40010000 	.word	0x40010000
 8006bb4:	40010400 	.word	0x40010400

08006bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4b1e      	ldr	r3, [pc, #120]	; (8006c5c <TIM_OC4_SetConfig+0xa4>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a13      	ldr	r2, [pc, #76]	; (8006c60 <TIM_OC4_SetConfig+0xa8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC4_SetConfig+0x68>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a12      	ldr	r2, [pc, #72]	; (8006c64 <TIM_OC4_SetConfig+0xac>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d109      	bne.n	8006c34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	019b      	lsls	r3, r3, #6
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	feff8fff 	.word	0xfeff8fff
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40010400 	.word	0x40010400

08006c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4b1b      	ldr	r3, [pc, #108]	; (8006d00 <TIM_OC5_SetConfig+0x98>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	041b      	lsls	r3, r3, #16
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <TIM_OC5_SetConfig+0x9c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_OC5_SetConfig+0x5e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a11      	ldr	r2, [pc, #68]	; (8006d08 <TIM_OC5_SetConfig+0xa0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d109      	bne.n	8006cda <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	621a      	str	r2, [r3, #32]
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	fffeff8f 	.word	0xfffeff8f
 8006d04:	40010000 	.word	0x40010000
 8006d08:	40010400 	.word	0x40010400

08006d0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <TIM_OC6_SetConfig+0x9c>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	051b      	lsls	r3, r3, #20
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a13      	ldr	r2, [pc, #76]	; (8006dac <TIM_OC6_SetConfig+0xa0>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_OC6_SetConfig+0x60>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a12      	ldr	r2, [pc, #72]	; (8006db0 <TIM_OC6_SetConfig+0xa4>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d109      	bne.n	8006d80 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	029b      	lsls	r3, r3, #10
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	feff8fff 	.word	0xfeff8fff
 8006dac:	40010000 	.word	0x40010000
 8006db0:	40010400 	.word	0x40010400

08006db4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a28      	ldr	r2, [pc, #160]	; (8006e80 <TIM_TI1_SetConfig+0xcc>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01b      	beq.n	8006e1a <TIM_TI1_SetConfig+0x66>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de8:	d017      	beq.n	8006e1a <TIM_TI1_SetConfig+0x66>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4a25      	ldr	r2, [pc, #148]	; (8006e84 <TIM_TI1_SetConfig+0xd0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <TIM_TI1_SetConfig+0x66>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4a24      	ldr	r2, [pc, #144]	; (8006e88 <TIM_TI1_SetConfig+0xd4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00f      	beq.n	8006e1a <TIM_TI1_SetConfig+0x66>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4a23      	ldr	r2, [pc, #140]	; (8006e8c <TIM_TI1_SetConfig+0xd8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00b      	beq.n	8006e1a <TIM_TI1_SetConfig+0x66>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4a22      	ldr	r2, [pc, #136]	; (8006e90 <TIM_TI1_SetConfig+0xdc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d007      	beq.n	8006e1a <TIM_TI1_SetConfig+0x66>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4a21      	ldr	r2, [pc, #132]	; (8006e94 <TIM_TI1_SetConfig+0xe0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d003      	beq.n	8006e1a <TIM_TI1_SetConfig+0x66>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <TIM_TI1_SetConfig+0xe4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <TIM_TI1_SetConfig+0x6a>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <TIM_TI1_SetConfig+0x6c>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e003      	b.n	8006e3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f023 030a 	bic.w	r3, r3, #10
 8006e58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f003 030a 	and.w	r3, r3, #10
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40000400 	.word	0x40000400
 8006e88:	40000800 	.word	0x40000800
 8006e8c:	40000c00 	.word	0x40000c00
 8006e90:	40010400 	.word	0x40010400
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40001800 	.word	0x40001800

08006e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f023 0201 	bic.w	r2, r3, #1
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f023 030a 	bic.w	r3, r3, #10
 8006ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	621a      	str	r2, [r3, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b087      	sub	sp, #28
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
 8006f06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	f023 0210 	bic.w	r2, r3, #16
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	031b      	lsls	r3, r3, #12
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	621a      	str	r2, [r3, #32]
}
 8006f68:	bf00      	nop
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f023 0210 	bic.w	r2, r3, #16
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	031b      	lsls	r3, r3, #12
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 0303 	bic.w	r3, r3, #3
 8007000:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007010:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	b2db      	uxtb	r3, r3
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007024:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	621a      	str	r2, [r3, #32]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007078:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800708a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	031b      	lsls	r3, r3, #12
 8007090:	b29b      	uxth	r3, r3
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800709e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	031b      	lsls	r3, r3, #12
 80070a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	621a      	str	r2, [r3, #32]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f043 0307 	orr.w	r3, r3, #7
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	609a      	str	r2, [r3, #8]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	431a      	orrs	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4313      	orrs	r3, r2
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	609a      	str	r2, [r3, #8]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2201      	movs	r2, #1
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a1a      	ldr	r2, [r3, #32]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	43db      	mvns	r3, r3
 800715e:	401a      	ands	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a1a      	ldr	r2, [r3, #32]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	431a      	orrs	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800719c:	2302      	movs	r3, #2
 800719e:	e06d      	b.n	800727c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a30      	ldr	r2, [pc, #192]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2f      	ldr	r2, [pc, #188]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d108      	bne.n	80071e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a20      	ldr	r2, [pc, #128]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d022      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007212:	d01d      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d018      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1c      	ldr	r2, [pc, #112]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d013      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1a      	ldr	r2, [pc, #104]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00e      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d009      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a16      	ldr	r2, [pc, #88]	; (800729c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a15      	ldr	r2, [pc, #84]	; (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d10c      	bne.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	4313      	orrs	r3, r2
 8007260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	40010000 	.word	0x40010000
 800728c:	40010400 	.word	0x40010400
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40014000 	.word	0x40014000
 80072a0:	40001800 	.word	0x40001800

080072a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072bc:	2302      	movs	r3, #2
 80072be:	e065      	b.n	800738c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	041b      	lsls	r3, r3, #16
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a16      	ldr	r2, [pc, #88]	; (8007398 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d004      	beq.n	800734e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a14      	ldr	r2, [pc, #80]	; (800739c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d115      	bne.n	800737a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	051b      	lsls	r3, r3, #20
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400

080073a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e040      	b.n	8007470 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fb f8ae 	bl	8002560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2224      	movs	r2, #36	; 0x24
 8007408:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f82c 	bl	8007478 <UART_SetConfig>
 8007420:	4603      	mov	r3, r0
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e022      	b.n	8007470 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fa84 	bl	8007940 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fb0b 	bl	8007a84 <UART_CheckIdleState>
 800746e:	4603      	mov	r3, r0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4ba6      	ldr	r3, [pc, #664]	; (800773c <UART_SetConfig+0x2c4>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	6979      	ldr	r1, [r7, #20]
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a94      	ldr	r2, [pc, #592]	; (8007740 <UART_SetConfig+0x2c8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d120      	bne.n	8007536 <UART_SetConfig+0xbe>
 80074f4:	4b93      	ldr	r3, [pc, #588]	; (8007744 <UART_SetConfig+0x2cc>)
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d816      	bhi.n	8007530 <UART_SetConfig+0xb8>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <UART_SetConfig+0x90>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	08007519 	.word	0x08007519
 800750c:	08007525 	.word	0x08007525
 8007510:	0800751f 	.word	0x0800751f
 8007514:	0800752b 	.word	0x0800752b
 8007518:	2301      	movs	r3, #1
 800751a:	77fb      	strb	r3, [r7, #31]
 800751c:	e150      	b.n	80077c0 <UART_SetConfig+0x348>
 800751e:	2302      	movs	r3, #2
 8007520:	77fb      	strb	r3, [r7, #31]
 8007522:	e14d      	b.n	80077c0 <UART_SetConfig+0x348>
 8007524:	2304      	movs	r3, #4
 8007526:	77fb      	strb	r3, [r7, #31]
 8007528:	e14a      	b.n	80077c0 <UART_SetConfig+0x348>
 800752a:	2308      	movs	r3, #8
 800752c:	77fb      	strb	r3, [r7, #31]
 800752e:	e147      	b.n	80077c0 <UART_SetConfig+0x348>
 8007530:	2310      	movs	r3, #16
 8007532:	77fb      	strb	r3, [r7, #31]
 8007534:	e144      	b.n	80077c0 <UART_SetConfig+0x348>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a83      	ldr	r2, [pc, #524]	; (8007748 <UART_SetConfig+0x2d0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d132      	bne.n	80075a6 <UART_SetConfig+0x12e>
 8007540:	4b80      	ldr	r3, [pc, #512]	; (8007744 <UART_SetConfig+0x2cc>)
 8007542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007546:	f003 030c 	and.w	r3, r3, #12
 800754a:	2b0c      	cmp	r3, #12
 800754c:	d828      	bhi.n	80075a0 <UART_SetConfig+0x128>
 800754e:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <UART_SetConfig+0xdc>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	08007589 	.word	0x08007589
 8007558:	080075a1 	.word	0x080075a1
 800755c:	080075a1 	.word	0x080075a1
 8007560:	080075a1 	.word	0x080075a1
 8007564:	08007595 	.word	0x08007595
 8007568:	080075a1 	.word	0x080075a1
 800756c:	080075a1 	.word	0x080075a1
 8007570:	080075a1 	.word	0x080075a1
 8007574:	0800758f 	.word	0x0800758f
 8007578:	080075a1 	.word	0x080075a1
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075a1 	.word	0x080075a1
 8007584:	0800759b 	.word	0x0800759b
 8007588:	2300      	movs	r3, #0
 800758a:	77fb      	strb	r3, [r7, #31]
 800758c:	e118      	b.n	80077c0 <UART_SetConfig+0x348>
 800758e:	2302      	movs	r3, #2
 8007590:	77fb      	strb	r3, [r7, #31]
 8007592:	e115      	b.n	80077c0 <UART_SetConfig+0x348>
 8007594:	2304      	movs	r3, #4
 8007596:	77fb      	strb	r3, [r7, #31]
 8007598:	e112      	b.n	80077c0 <UART_SetConfig+0x348>
 800759a:	2308      	movs	r3, #8
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e10f      	b.n	80077c0 <UART_SetConfig+0x348>
 80075a0:	2310      	movs	r3, #16
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e10c      	b.n	80077c0 <UART_SetConfig+0x348>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a68      	ldr	r2, [pc, #416]	; (800774c <UART_SetConfig+0x2d4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d120      	bne.n	80075f2 <UART_SetConfig+0x17a>
 80075b0:	4b64      	ldr	r3, [pc, #400]	; (8007744 <UART_SetConfig+0x2cc>)
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075ba:	2b30      	cmp	r3, #48	; 0x30
 80075bc:	d013      	beq.n	80075e6 <UART_SetConfig+0x16e>
 80075be:	2b30      	cmp	r3, #48	; 0x30
 80075c0:	d814      	bhi.n	80075ec <UART_SetConfig+0x174>
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d009      	beq.n	80075da <UART_SetConfig+0x162>
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d810      	bhi.n	80075ec <UART_SetConfig+0x174>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <UART_SetConfig+0x15c>
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d006      	beq.n	80075e0 <UART_SetConfig+0x168>
 80075d2:	e00b      	b.n	80075ec <UART_SetConfig+0x174>
 80075d4:	2300      	movs	r3, #0
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	e0f2      	b.n	80077c0 <UART_SetConfig+0x348>
 80075da:	2302      	movs	r3, #2
 80075dc:	77fb      	strb	r3, [r7, #31]
 80075de:	e0ef      	b.n	80077c0 <UART_SetConfig+0x348>
 80075e0:	2304      	movs	r3, #4
 80075e2:	77fb      	strb	r3, [r7, #31]
 80075e4:	e0ec      	b.n	80077c0 <UART_SetConfig+0x348>
 80075e6:	2308      	movs	r3, #8
 80075e8:	77fb      	strb	r3, [r7, #31]
 80075ea:	e0e9      	b.n	80077c0 <UART_SetConfig+0x348>
 80075ec:	2310      	movs	r3, #16
 80075ee:	77fb      	strb	r3, [r7, #31]
 80075f0:	e0e6      	b.n	80077c0 <UART_SetConfig+0x348>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a56      	ldr	r2, [pc, #344]	; (8007750 <UART_SetConfig+0x2d8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d120      	bne.n	800763e <UART_SetConfig+0x1c6>
 80075fc:	4b51      	ldr	r3, [pc, #324]	; (8007744 <UART_SetConfig+0x2cc>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007602:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007606:	2bc0      	cmp	r3, #192	; 0xc0
 8007608:	d013      	beq.n	8007632 <UART_SetConfig+0x1ba>
 800760a:	2bc0      	cmp	r3, #192	; 0xc0
 800760c:	d814      	bhi.n	8007638 <UART_SetConfig+0x1c0>
 800760e:	2b80      	cmp	r3, #128	; 0x80
 8007610:	d009      	beq.n	8007626 <UART_SetConfig+0x1ae>
 8007612:	2b80      	cmp	r3, #128	; 0x80
 8007614:	d810      	bhi.n	8007638 <UART_SetConfig+0x1c0>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <UART_SetConfig+0x1a8>
 800761a:	2b40      	cmp	r3, #64	; 0x40
 800761c:	d006      	beq.n	800762c <UART_SetConfig+0x1b4>
 800761e:	e00b      	b.n	8007638 <UART_SetConfig+0x1c0>
 8007620:	2300      	movs	r3, #0
 8007622:	77fb      	strb	r3, [r7, #31]
 8007624:	e0cc      	b.n	80077c0 <UART_SetConfig+0x348>
 8007626:	2302      	movs	r3, #2
 8007628:	77fb      	strb	r3, [r7, #31]
 800762a:	e0c9      	b.n	80077c0 <UART_SetConfig+0x348>
 800762c:	2304      	movs	r3, #4
 800762e:	77fb      	strb	r3, [r7, #31]
 8007630:	e0c6      	b.n	80077c0 <UART_SetConfig+0x348>
 8007632:	2308      	movs	r3, #8
 8007634:	77fb      	strb	r3, [r7, #31]
 8007636:	e0c3      	b.n	80077c0 <UART_SetConfig+0x348>
 8007638:	2310      	movs	r3, #16
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	e0c0      	b.n	80077c0 <UART_SetConfig+0x348>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a44      	ldr	r2, [pc, #272]	; (8007754 <UART_SetConfig+0x2dc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d125      	bne.n	8007694 <UART_SetConfig+0x21c>
 8007648:	4b3e      	ldr	r3, [pc, #248]	; (8007744 <UART_SetConfig+0x2cc>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007656:	d017      	beq.n	8007688 <UART_SetConfig+0x210>
 8007658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800765c:	d817      	bhi.n	800768e <UART_SetConfig+0x216>
 800765e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007662:	d00b      	beq.n	800767c <UART_SetConfig+0x204>
 8007664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007668:	d811      	bhi.n	800768e <UART_SetConfig+0x216>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <UART_SetConfig+0x1fe>
 800766e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007672:	d006      	beq.n	8007682 <UART_SetConfig+0x20a>
 8007674:	e00b      	b.n	800768e <UART_SetConfig+0x216>
 8007676:	2300      	movs	r3, #0
 8007678:	77fb      	strb	r3, [r7, #31]
 800767a:	e0a1      	b.n	80077c0 <UART_SetConfig+0x348>
 800767c:	2302      	movs	r3, #2
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e09e      	b.n	80077c0 <UART_SetConfig+0x348>
 8007682:	2304      	movs	r3, #4
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e09b      	b.n	80077c0 <UART_SetConfig+0x348>
 8007688:	2308      	movs	r3, #8
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e098      	b.n	80077c0 <UART_SetConfig+0x348>
 800768e:	2310      	movs	r3, #16
 8007690:	77fb      	strb	r3, [r7, #31]
 8007692:	e095      	b.n	80077c0 <UART_SetConfig+0x348>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a2f      	ldr	r2, [pc, #188]	; (8007758 <UART_SetConfig+0x2e0>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d125      	bne.n	80076ea <UART_SetConfig+0x272>
 800769e:	4b29      	ldr	r3, [pc, #164]	; (8007744 <UART_SetConfig+0x2cc>)
 80076a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076ac:	d017      	beq.n	80076de <UART_SetConfig+0x266>
 80076ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076b2:	d817      	bhi.n	80076e4 <UART_SetConfig+0x26c>
 80076b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b8:	d00b      	beq.n	80076d2 <UART_SetConfig+0x25a>
 80076ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076be:	d811      	bhi.n	80076e4 <UART_SetConfig+0x26c>
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <UART_SetConfig+0x254>
 80076c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c8:	d006      	beq.n	80076d8 <UART_SetConfig+0x260>
 80076ca:	e00b      	b.n	80076e4 <UART_SetConfig+0x26c>
 80076cc:	2301      	movs	r3, #1
 80076ce:	77fb      	strb	r3, [r7, #31]
 80076d0:	e076      	b.n	80077c0 <UART_SetConfig+0x348>
 80076d2:	2302      	movs	r3, #2
 80076d4:	77fb      	strb	r3, [r7, #31]
 80076d6:	e073      	b.n	80077c0 <UART_SetConfig+0x348>
 80076d8:	2304      	movs	r3, #4
 80076da:	77fb      	strb	r3, [r7, #31]
 80076dc:	e070      	b.n	80077c0 <UART_SetConfig+0x348>
 80076de:	2308      	movs	r3, #8
 80076e0:	77fb      	strb	r3, [r7, #31]
 80076e2:	e06d      	b.n	80077c0 <UART_SetConfig+0x348>
 80076e4:	2310      	movs	r3, #16
 80076e6:	77fb      	strb	r3, [r7, #31]
 80076e8:	e06a      	b.n	80077c0 <UART_SetConfig+0x348>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a1b      	ldr	r2, [pc, #108]	; (800775c <UART_SetConfig+0x2e4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d138      	bne.n	8007766 <UART_SetConfig+0x2ee>
 80076f4:	4b13      	ldr	r3, [pc, #76]	; (8007744 <UART_SetConfig+0x2cc>)
 80076f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80076fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007702:	d017      	beq.n	8007734 <UART_SetConfig+0x2bc>
 8007704:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007708:	d82a      	bhi.n	8007760 <UART_SetConfig+0x2e8>
 800770a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800770e:	d00b      	beq.n	8007728 <UART_SetConfig+0x2b0>
 8007710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007714:	d824      	bhi.n	8007760 <UART_SetConfig+0x2e8>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <UART_SetConfig+0x2aa>
 800771a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800771e:	d006      	beq.n	800772e <UART_SetConfig+0x2b6>
 8007720:	e01e      	b.n	8007760 <UART_SetConfig+0x2e8>
 8007722:	2300      	movs	r3, #0
 8007724:	77fb      	strb	r3, [r7, #31]
 8007726:	e04b      	b.n	80077c0 <UART_SetConfig+0x348>
 8007728:	2302      	movs	r3, #2
 800772a:	77fb      	strb	r3, [r7, #31]
 800772c:	e048      	b.n	80077c0 <UART_SetConfig+0x348>
 800772e:	2304      	movs	r3, #4
 8007730:	77fb      	strb	r3, [r7, #31]
 8007732:	e045      	b.n	80077c0 <UART_SetConfig+0x348>
 8007734:	2308      	movs	r3, #8
 8007736:	77fb      	strb	r3, [r7, #31]
 8007738:	e042      	b.n	80077c0 <UART_SetConfig+0x348>
 800773a:	bf00      	nop
 800773c:	efff69f3 	.word	0xefff69f3
 8007740:	40011000 	.word	0x40011000
 8007744:	40023800 	.word	0x40023800
 8007748:	40004400 	.word	0x40004400
 800774c:	40004800 	.word	0x40004800
 8007750:	40004c00 	.word	0x40004c00
 8007754:	40005000 	.word	0x40005000
 8007758:	40011400 	.word	0x40011400
 800775c:	40007800 	.word	0x40007800
 8007760:	2310      	movs	r3, #16
 8007762:	77fb      	strb	r3, [r7, #31]
 8007764:	e02c      	b.n	80077c0 <UART_SetConfig+0x348>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a72      	ldr	r2, [pc, #456]	; (8007934 <UART_SetConfig+0x4bc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d125      	bne.n	80077bc <UART_SetConfig+0x344>
 8007770:	4b71      	ldr	r3, [pc, #452]	; (8007938 <UART_SetConfig+0x4c0>)
 8007772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007776:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800777a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800777e:	d017      	beq.n	80077b0 <UART_SetConfig+0x338>
 8007780:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007784:	d817      	bhi.n	80077b6 <UART_SetConfig+0x33e>
 8007786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800778a:	d00b      	beq.n	80077a4 <UART_SetConfig+0x32c>
 800778c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007790:	d811      	bhi.n	80077b6 <UART_SetConfig+0x33e>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <UART_SetConfig+0x326>
 8007796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800779a:	d006      	beq.n	80077aa <UART_SetConfig+0x332>
 800779c:	e00b      	b.n	80077b6 <UART_SetConfig+0x33e>
 800779e:	2300      	movs	r3, #0
 80077a0:	77fb      	strb	r3, [r7, #31]
 80077a2:	e00d      	b.n	80077c0 <UART_SetConfig+0x348>
 80077a4:	2302      	movs	r3, #2
 80077a6:	77fb      	strb	r3, [r7, #31]
 80077a8:	e00a      	b.n	80077c0 <UART_SetConfig+0x348>
 80077aa:	2304      	movs	r3, #4
 80077ac:	77fb      	strb	r3, [r7, #31]
 80077ae:	e007      	b.n	80077c0 <UART_SetConfig+0x348>
 80077b0:	2308      	movs	r3, #8
 80077b2:	77fb      	strb	r3, [r7, #31]
 80077b4:	e004      	b.n	80077c0 <UART_SetConfig+0x348>
 80077b6:	2310      	movs	r3, #16
 80077b8:	77fb      	strb	r3, [r7, #31]
 80077ba:	e001      	b.n	80077c0 <UART_SetConfig+0x348>
 80077bc:	2310      	movs	r3, #16
 80077be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c8:	d15b      	bne.n	8007882 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80077ca:	7ffb      	ldrb	r3, [r7, #31]
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d828      	bhi.n	8007822 <UART_SetConfig+0x3aa>
 80077d0:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0x360>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	080077fd 	.word	0x080077fd
 80077dc:	08007805 	.word	0x08007805
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	08007823 	.word	0x08007823
 80077e8:	08007813 	.word	0x08007813
 80077ec:	08007823 	.word	0x08007823
 80077f0:	08007823 	.word	0x08007823
 80077f4:	08007823 	.word	0x08007823
 80077f8:	0800781b 	.word	0x0800781b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077fc:	f7fd fa8e 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8007800:	61b8      	str	r0, [r7, #24]
        break;
 8007802:	e013      	b.n	800782c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007804:	f7fd fa9e 	bl	8004d44 <HAL_RCC_GetPCLK2Freq>
 8007808:	61b8      	str	r0, [r7, #24]
        break;
 800780a:	e00f      	b.n	800782c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800780c:	4b4b      	ldr	r3, [pc, #300]	; (800793c <UART_SetConfig+0x4c4>)
 800780e:	61bb      	str	r3, [r7, #24]
        break;
 8007810:	e00c      	b.n	800782c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007812:	f7fd f971 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 8007816:	61b8      	str	r0, [r7, #24]
        break;
 8007818:	e008      	b.n	800782c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800781e:	61bb      	str	r3, [r7, #24]
        break;
 8007820:	e004      	b.n	800782c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	77bb      	strb	r3, [r7, #30]
        break;
 800782a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d074      	beq.n	800791c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	005a      	lsls	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	085b      	lsrs	r3, r3, #1
 800783c:	441a      	add	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	fbb2 f3f3 	udiv	r3, r2, r3
 8007846:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2b0f      	cmp	r3, #15
 800784c:	d916      	bls.n	800787c <UART_SetConfig+0x404>
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007854:	d212      	bcs.n	800787c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	b29b      	uxth	r3, r3
 800785a:	f023 030f 	bic.w	r3, r3, #15
 800785e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	085b      	lsrs	r3, r3, #1
 8007864:	b29b      	uxth	r3, r3
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	b29a      	uxth	r2, r3
 800786c:	89fb      	ldrh	r3, [r7, #14]
 800786e:	4313      	orrs	r3, r2
 8007870:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	89fa      	ldrh	r2, [r7, #14]
 8007878:	60da      	str	r2, [r3, #12]
 800787a:	e04f      	b.n	800791c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	77bb      	strb	r3, [r7, #30]
 8007880:	e04c      	b.n	800791c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007882:	7ffb      	ldrb	r3, [r7, #31]
 8007884:	2b08      	cmp	r3, #8
 8007886:	d828      	bhi.n	80078da <UART_SetConfig+0x462>
 8007888:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <UART_SetConfig+0x418>)
 800788a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788e:	bf00      	nop
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078bd 	.word	0x080078bd
 8007898:	080078c5 	.word	0x080078c5
 800789c:	080078db 	.word	0x080078db
 80078a0:	080078cb 	.word	0x080078cb
 80078a4:	080078db 	.word	0x080078db
 80078a8:	080078db 	.word	0x080078db
 80078ac:	080078db 	.word	0x080078db
 80078b0:	080078d3 	.word	0x080078d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b4:	f7fd fa32 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 80078b8:	61b8      	str	r0, [r7, #24]
        break;
 80078ba:	e013      	b.n	80078e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078bc:	f7fd fa42 	bl	8004d44 <HAL_RCC_GetPCLK2Freq>
 80078c0:	61b8      	str	r0, [r7, #24]
        break;
 80078c2:	e00f      	b.n	80078e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c4:	4b1d      	ldr	r3, [pc, #116]	; (800793c <UART_SetConfig+0x4c4>)
 80078c6:	61bb      	str	r3, [r7, #24]
        break;
 80078c8:	e00c      	b.n	80078e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ca:	f7fd f915 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 80078ce:	61b8      	str	r0, [r7, #24]
        break;
 80078d0:	e008      	b.n	80078e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d6:	61bb      	str	r3, [r7, #24]
        break;
 80078d8:	e004      	b.n	80078e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	77bb      	strb	r3, [r7, #30]
        break;
 80078e2:	bf00      	nop
    }

    if (pclk != 0U)
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d018      	beq.n	800791c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	085a      	lsrs	r2, r3, #1
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	441a      	add	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b0f      	cmp	r3, #15
 8007902:	d909      	bls.n	8007918 <UART_SetConfig+0x4a0>
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800790a:	d205      	bcs.n	8007918 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	b29a      	uxth	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	e001      	b.n	800791c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007928:	7fbb      	ldrb	r3, [r7, #30]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40007c00 	.word	0x40007c00
 8007938:	40023800 	.word	0x40023800
 800793c:	00f42400 	.word	0x00f42400

08007940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	f003 0308 	and.w	r3, r3, #8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01a      	beq.n	8007a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a3e:	d10a      	bne.n	8007a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00a      	beq.n	8007a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	605a      	str	r2, [r3, #4]
  }
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a94:	f7fb f892 	bl	8002bbc <HAL_GetTick>
 8007a98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d10e      	bne.n	8007ac6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f831 	bl	8007b1e <UART_WaitOnFlagUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e027      	b.n	8007b16 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d10e      	bne.n	8007af2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f81b 	bl	8007b1e <UART_WaitOnFlagUntilTimeout>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e011      	b.n	8007b16 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b09c      	sub	sp, #112	; 0x70
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2e:	e0a7      	b.n	8007c80 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b36:	f000 80a3 	beq.w	8007c80 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b3a:	f7fb f83f 	bl	8002bbc <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d302      	bcc.n	8007b50 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d13f      	bne.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b64:	667b      	str	r3, [r7, #100]	; 0x64
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e6      	bne.n	8007b50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3308      	adds	r3, #8
 8007b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	663b      	str	r3, [r7, #96]	; 0x60
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ba2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ba4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e5      	bne.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e068      	b.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d050      	beq.n	8007c80 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bec:	d148      	bne.n	8007c80 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bf6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c16:	637b      	str	r3, [r7, #52]	; 0x34
 8007c18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e6      	bne.n	8007bf8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f023 0301 	bic.w	r3, r3, #1
 8007c40:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3308      	adds	r3, #8
 8007c48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c4a:	623a      	str	r2, [r7, #32]
 8007c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4e:	69f9      	ldr	r1, [r7, #28]
 8007c50:	6a3a      	ldr	r2, [r7, #32]
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1e5      	bne.n	8007c2a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2220      	movs	r2, #32
 8007c62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e010      	b.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69da      	ldr	r2, [r3, #28]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	bf0c      	ite	eq
 8007c90:	2301      	moveq	r3, #1
 8007c92:	2300      	movne	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	f43f af48 	beq.w	8007b30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3770      	adds	r7, #112	; 0x70
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <__cvt>:
 8007caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cac:	ed2d 8b02 	vpush	{d8}
 8007cb0:	eeb0 8b40 	vmov.f64	d8, d0
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	4617      	mov	r7, r2
 8007cb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007cba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007cbc:	ee18 2a90 	vmov	r2, s17
 8007cc0:	f025 0520 	bic.w	r5, r5, #32
 8007cc4:	2a00      	cmp	r2, #0
 8007cc6:	bfb6      	itet	lt
 8007cc8:	222d      	movlt	r2, #45	; 0x2d
 8007cca:	2200      	movge	r2, #0
 8007ccc:	eeb1 8b40 	vneglt.f64	d8, d0
 8007cd0:	2d46      	cmp	r5, #70	; 0x46
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	d004      	beq.n	8007ce2 <__cvt+0x38>
 8007cd8:	2d45      	cmp	r5, #69	; 0x45
 8007cda:	d100      	bne.n	8007cde <__cvt+0x34>
 8007cdc:	3401      	adds	r4, #1
 8007cde:	2102      	movs	r1, #2
 8007ce0:	e000      	b.n	8007ce4 <__cvt+0x3a>
 8007ce2:	2103      	movs	r1, #3
 8007ce4:	ab03      	add	r3, sp, #12
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	ab02      	add	r3, sp, #8
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4622      	mov	r2, r4
 8007cee:	4633      	mov	r3, r6
 8007cf0:	eeb0 0b48 	vmov.f64	d0, d8
 8007cf4:	f000 ff34 	bl	8008b60 <_dtoa_r>
 8007cf8:	2d47      	cmp	r5, #71	; 0x47
 8007cfa:	d101      	bne.n	8007d00 <__cvt+0x56>
 8007cfc:	07fb      	lsls	r3, r7, #31
 8007cfe:	d51a      	bpl.n	8007d36 <__cvt+0x8c>
 8007d00:	2d46      	cmp	r5, #70	; 0x46
 8007d02:	eb00 0204 	add.w	r2, r0, r4
 8007d06:	d10c      	bne.n	8007d22 <__cvt+0x78>
 8007d08:	7803      	ldrb	r3, [r0, #0]
 8007d0a:	2b30      	cmp	r3, #48	; 0x30
 8007d0c:	d107      	bne.n	8007d1e <__cvt+0x74>
 8007d0e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d16:	bf1c      	itt	ne
 8007d18:	f1c4 0401 	rsbne	r4, r4, #1
 8007d1c:	6034      	strne	r4, [r6, #0]
 8007d1e:	6833      	ldr	r3, [r6, #0]
 8007d20:	441a      	add	r2, r3
 8007d22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2a:	bf08      	it	eq
 8007d2c:	9203      	streq	r2, [sp, #12]
 8007d2e:	2130      	movs	r1, #48	; 0x30
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d307      	bcc.n	8007d46 <__cvt+0x9c>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d3a:	1a1b      	subs	r3, r3, r0
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	b005      	add	sp, #20
 8007d40:	ecbd 8b02 	vpop	{d8}
 8007d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d46:	1c5c      	adds	r4, r3, #1
 8007d48:	9403      	str	r4, [sp, #12]
 8007d4a:	7019      	strb	r1, [r3, #0]
 8007d4c:	e7f0      	b.n	8007d30 <__cvt+0x86>

08007d4e <__exponent>:
 8007d4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d50:	4603      	mov	r3, r0
 8007d52:	2900      	cmp	r1, #0
 8007d54:	bfb8      	it	lt
 8007d56:	4249      	neglt	r1, r1
 8007d58:	f803 2b02 	strb.w	r2, [r3], #2
 8007d5c:	bfb4      	ite	lt
 8007d5e:	222d      	movlt	r2, #45	; 0x2d
 8007d60:	222b      	movge	r2, #43	; 0x2b
 8007d62:	2909      	cmp	r1, #9
 8007d64:	7042      	strb	r2, [r0, #1]
 8007d66:	dd2a      	ble.n	8007dbe <__exponent+0x70>
 8007d68:	f10d 0207 	add.w	r2, sp, #7
 8007d6c:	4617      	mov	r7, r2
 8007d6e:	260a      	movs	r6, #10
 8007d70:	4694      	mov	ip, r2
 8007d72:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d76:	fb06 1415 	mls	r4, r6, r5, r1
 8007d7a:	3430      	adds	r4, #48	; 0x30
 8007d7c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007d80:	460c      	mov	r4, r1
 8007d82:	2c63      	cmp	r4, #99	; 0x63
 8007d84:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007d88:	4629      	mov	r1, r5
 8007d8a:	dcf1      	bgt.n	8007d70 <__exponent+0x22>
 8007d8c:	3130      	adds	r1, #48	; 0x30
 8007d8e:	f1ac 0402 	sub.w	r4, ip, #2
 8007d92:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d96:	1c41      	adds	r1, r0, #1
 8007d98:	4622      	mov	r2, r4
 8007d9a:	42ba      	cmp	r2, r7
 8007d9c:	d30a      	bcc.n	8007db4 <__exponent+0x66>
 8007d9e:	f10d 0209 	add.w	r2, sp, #9
 8007da2:	eba2 020c 	sub.w	r2, r2, ip
 8007da6:	42bc      	cmp	r4, r7
 8007da8:	bf88      	it	hi
 8007daa:	2200      	movhi	r2, #0
 8007dac:	4413      	add	r3, r2
 8007dae:	1a18      	subs	r0, r3, r0
 8007db0:	b003      	add	sp, #12
 8007db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007db8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007dbc:	e7ed      	b.n	8007d9a <__exponent+0x4c>
 8007dbe:	2330      	movs	r3, #48	; 0x30
 8007dc0:	3130      	adds	r1, #48	; 0x30
 8007dc2:	7083      	strb	r3, [r0, #2]
 8007dc4:	70c1      	strb	r1, [r0, #3]
 8007dc6:	1d03      	adds	r3, r0, #4
 8007dc8:	e7f1      	b.n	8007dae <__exponent+0x60>
 8007dca:	0000      	movs	r0, r0
 8007dcc:	0000      	movs	r0, r0
	...

08007dd0 <_printf_float>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	b08b      	sub	sp, #44	; 0x2c
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007ddc:	4616      	mov	r6, r2
 8007dde:	461f      	mov	r7, r3
 8007de0:	4605      	mov	r5, r0
 8007de2:	f000 fdaf 	bl	8008944 <_localeconv_r>
 8007de6:	f8d0 b000 	ldr.w	fp, [r0]
 8007dea:	4658      	mov	r0, fp
 8007dec:	f7f8 fa78 	bl	80002e0 <strlen>
 8007df0:	2300      	movs	r3, #0
 8007df2:	9308      	str	r3, [sp, #32]
 8007df4:	f8d8 3000 	ldr.w	r3, [r8]
 8007df8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	3307      	adds	r3, #7
 8007e00:	f023 0307 	bic.w	r3, r3, #7
 8007e04:	f103 0108 	add.w	r1, r3, #8
 8007e08:	f8c8 1000 	str.w	r1, [r8]
 8007e0c:	ed93 0b00 	vldr	d0, [r3]
 8007e10:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008070 <_printf_float+0x2a0>
 8007e14:	eeb0 7bc0 	vabs.f64	d7, d0
 8007e18:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e20:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8007e24:	4682      	mov	sl, r0
 8007e26:	dd24      	ble.n	8007e72 <_printf_float+0xa2>
 8007e28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e30:	d502      	bpl.n	8007e38 <_printf_float+0x68>
 8007e32:	232d      	movs	r3, #45	; 0x2d
 8007e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e38:	498f      	ldr	r1, [pc, #572]	; (8008078 <_printf_float+0x2a8>)
 8007e3a:	4b90      	ldr	r3, [pc, #576]	; (800807c <_printf_float+0x2ac>)
 8007e3c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007e40:	bf94      	ite	ls
 8007e42:	4688      	movls	r8, r1
 8007e44:	4698      	movhi	r8, r3
 8007e46:	2303      	movs	r3, #3
 8007e48:	6123      	str	r3, [r4, #16]
 8007e4a:	f022 0204 	bic.w	r2, r2, #4
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6022      	str	r2, [r4, #0]
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	9700      	str	r7, [sp, #0]
 8007e56:	4633      	mov	r3, r6
 8007e58:	aa09      	add	r2, sp, #36	; 0x24
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f000 f9d1 	bl	8008204 <_printf_common>
 8007e62:	3001      	adds	r0, #1
 8007e64:	f040 808a 	bne.w	8007f7c <_printf_float+0x1ac>
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e6c:	b00b      	add	sp, #44	; 0x2c
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	eeb4 0b40 	vcmp.f64	d0, d0
 8007e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7a:	d709      	bvc.n	8007e90 <_printf_float+0xc0>
 8007e7c:	ee10 3a90 	vmov	r3, s1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bfbc      	itt	lt
 8007e84:	232d      	movlt	r3, #45	; 0x2d
 8007e86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e8a:	497d      	ldr	r1, [pc, #500]	; (8008080 <_printf_float+0x2b0>)
 8007e8c:	4b7d      	ldr	r3, [pc, #500]	; (8008084 <_printf_float+0x2b4>)
 8007e8e:	e7d5      	b.n	8007e3c <_printf_float+0x6c>
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007e96:	9104      	str	r1, [sp, #16]
 8007e98:	1c59      	adds	r1, r3, #1
 8007e9a:	d13c      	bne.n	8007f16 <_printf_float+0x146>
 8007e9c:	2306      	movs	r3, #6
 8007e9e:	6063      	str	r3, [r4, #4]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9303      	str	r3, [sp, #12]
 8007ea4:	ab08      	add	r3, sp, #32
 8007ea6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007eaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eae:	ab07      	add	r3, sp, #28
 8007eb0:	6861      	ldr	r1, [r4, #4]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	6022      	str	r2, [r4, #0]
 8007eb6:	f10d 031b 	add.w	r3, sp, #27
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f7ff fef5 	bl	8007caa <__cvt>
 8007ec0:	9b04      	ldr	r3, [sp, #16]
 8007ec2:	9907      	ldr	r1, [sp, #28]
 8007ec4:	2b47      	cmp	r3, #71	; 0x47
 8007ec6:	4680      	mov	r8, r0
 8007ec8:	d108      	bne.n	8007edc <_printf_float+0x10c>
 8007eca:	1cc8      	adds	r0, r1, #3
 8007ecc:	db02      	blt.n	8007ed4 <_printf_float+0x104>
 8007ece:	6863      	ldr	r3, [r4, #4]
 8007ed0:	4299      	cmp	r1, r3
 8007ed2:	dd41      	ble.n	8007f58 <_printf_float+0x188>
 8007ed4:	f1a9 0902 	sub.w	r9, r9, #2
 8007ed8:	fa5f f989 	uxtb.w	r9, r9
 8007edc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ee0:	d820      	bhi.n	8007f24 <_printf_float+0x154>
 8007ee2:	3901      	subs	r1, #1
 8007ee4:	464a      	mov	r2, r9
 8007ee6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007eea:	9107      	str	r1, [sp, #28]
 8007eec:	f7ff ff2f 	bl	8007d4e <__exponent>
 8007ef0:	9a08      	ldr	r2, [sp, #32]
 8007ef2:	9004      	str	r0, [sp, #16]
 8007ef4:	1813      	adds	r3, r2, r0
 8007ef6:	2a01      	cmp	r2, #1
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	dc02      	bgt.n	8007f02 <_printf_float+0x132>
 8007efc:	6822      	ldr	r2, [r4, #0]
 8007efe:	07d2      	lsls	r2, r2, #31
 8007f00:	d501      	bpl.n	8007f06 <_printf_float+0x136>
 8007f02:	3301      	adds	r3, #1
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0a2      	beq.n	8007e54 <_printf_float+0x84>
 8007f0e:	232d      	movs	r3, #45	; 0x2d
 8007f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f14:	e79e      	b.n	8007e54 <_printf_float+0x84>
 8007f16:	9904      	ldr	r1, [sp, #16]
 8007f18:	2947      	cmp	r1, #71	; 0x47
 8007f1a:	d1c1      	bne.n	8007ea0 <_printf_float+0xd0>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1bf      	bne.n	8007ea0 <_printf_float+0xd0>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e7bc      	b.n	8007e9e <_printf_float+0xce>
 8007f24:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007f28:	d118      	bne.n	8007f5c <_printf_float+0x18c>
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	dd0b      	ble.n	8007f48 <_printf_float+0x178>
 8007f30:	6121      	str	r1, [r4, #16]
 8007f32:	b913      	cbnz	r3, 8007f3a <_printf_float+0x16a>
 8007f34:	6822      	ldr	r2, [r4, #0]
 8007f36:	07d0      	lsls	r0, r2, #31
 8007f38:	d502      	bpl.n	8007f40 <_printf_float+0x170>
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	440b      	add	r3, r1
 8007f3e:	6123      	str	r3, [r4, #16]
 8007f40:	2300      	movs	r3, #0
 8007f42:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	e7de      	b.n	8007f06 <_printf_float+0x136>
 8007f48:	b913      	cbnz	r3, 8007f50 <_printf_float+0x180>
 8007f4a:	6822      	ldr	r2, [r4, #0]
 8007f4c:	07d2      	lsls	r2, r2, #31
 8007f4e:	d501      	bpl.n	8007f54 <_printf_float+0x184>
 8007f50:	3302      	adds	r3, #2
 8007f52:	e7f4      	b.n	8007f3e <_printf_float+0x16e>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e7f2      	b.n	8007f3e <_printf_float+0x16e>
 8007f58:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007f5c:	9b08      	ldr	r3, [sp, #32]
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	db05      	blt.n	8007f6e <_printf_float+0x19e>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	6121      	str	r1, [r4, #16]
 8007f66:	07d8      	lsls	r0, r3, #31
 8007f68:	d5ea      	bpl.n	8007f40 <_printf_float+0x170>
 8007f6a:	1c4b      	adds	r3, r1, #1
 8007f6c:	e7e7      	b.n	8007f3e <_printf_float+0x16e>
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	bfd4      	ite	le
 8007f72:	f1c1 0202 	rsble	r2, r1, #2
 8007f76:	2201      	movgt	r2, #1
 8007f78:	4413      	add	r3, r2
 8007f7a:	e7e0      	b.n	8007f3e <_printf_float+0x16e>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	055a      	lsls	r2, r3, #21
 8007f80:	d407      	bmi.n	8007f92 <_printf_float+0x1c2>
 8007f82:	6923      	ldr	r3, [r4, #16]
 8007f84:	4642      	mov	r2, r8
 8007f86:	4631      	mov	r1, r6
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b8      	blx	r7
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d12a      	bne.n	8007fe6 <_printf_float+0x216>
 8007f90:	e76a      	b.n	8007e68 <_printf_float+0x98>
 8007f92:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f96:	f240 80e0 	bls.w	800815a <_printf_float+0x38a>
 8007f9a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007f9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa6:	d133      	bne.n	8008010 <_printf_float+0x240>
 8007fa8:	4a37      	ldr	r2, [pc, #220]	; (8008088 <_printf_float+0x2b8>)
 8007faa:	2301      	movs	r3, #1
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f af58 	beq.w	8007e68 <_printf_float+0x98>
 8007fb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	db02      	blt.n	8007fc6 <_printf_float+0x1f6>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	07d8      	lsls	r0, r3, #31
 8007fc4:	d50f      	bpl.n	8007fe6 <_printf_float+0x216>
 8007fc6:	4653      	mov	r3, sl
 8007fc8:	465a      	mov	r2, fp
 8007fca:	4631      	mov	r1, r6
 8007fcc:	4628      	mov	r0, r5
 8007fce:	47b8      	blx	r7
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	f43f af49 	beq.w	8007e68 <_printf_float+0x98>
 8007fd6:	f04f 0800 	mov.w	r8, #0
 8007fda:	f104 091a 	add.w	r9, r4, #26
 8007fde:	9b08      	ldr	r3, [sp, #32]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	4543      	cmp	r3, r8
 8007fe4:	dc09      	bgt.n	8007ffa <_printf_float+0x22a>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	079b      	lsls	r3, r3, #30
 8007fea:	f100 8106 	bmi.w	80081fa <_printf_float+0x42a>
 8007fee:	68e0      	ldr	r0, [r4, #12]
 8007ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff2:	4298      	cmp	r0, r3
 8007ff4:	bfb8      	it	lt
 8007ff6:	4618      	movlt	r0, r3
 8007ff8:	e738      	b.n	8007e6c <_printf_float+0x9c>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	464a      	mov	r2, r9
 8007ffe:	4631      	mov	r1, r6
 8008000:	4628      	mov	r0, r5
 8008002:	47b8      	blx	r7
 8008004:	3001      	adds	r0, #1
 8008006:	f43f af2f 	beq.w	8007e68 <_printf_float+0x98>
 800800a:	f108 0801 	add.w	r8, r8, #1
 800800e:	e7e6      	b.n	8007fde <_printf_float+0x20e>
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	2b00      	cmp	r3, #0
 8008014:	dc3a      	bgt.n	800808c <_printf_float+0x2bc>
 8008016:	4a1c      	ldr	r2, [pc, #112]	; (8008088 <_printf_float+0x2b8>)
 8008018:	2301      	movs	r3, #1
 800801a:	4631      	mov	r1, r6
 800801c:	4628      	mov	r0, r5
 800801e:	47b8      	blx	r7
 8008020:	3001      	adds	r0, #1
 8008022:	f43f af21 	beq.w	8007e68 <_printf_float+0x98>
 8008026:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800802a:	4313      	orrs	r3, r2
 800802c:	d102      	bne.n	8008034 <_printf_float+0x264>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	07d9      	lsls	r1, r3, #31
 8008032:	d5d8      	bpl.n	8007fe6 <_printf_float+0x216>
 8008034:	4653      	mov	r3, sl
 8008036:	465a      	mov	r2, fp
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	47b8      	blx	r7
 800803e:	3001      	adds	r0, #1
 8008040:	f43f af12 	beq.w	8007e68 <_printf_float+0x98>
 8008044:	f04f 0900 	mov.w	r9, #0
 8008048:	f104 0a1a 	add.w	sl, r4, #26
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	425b      	negs	r3, r3
 8008050:	454b      	cmp	r3, r9
 8008052:	dc01      	bgt.n	8008058 <_printf_float+0x288>
 8008054:	9b08      	ldr	r3, [sp, #32]
 8008056:	e795      	b.n	8007f84 <_printf_float+0x1b4>
 8008058:	2301      	movs	r3, #1
 800805a:	4652      	mov	r2, sl
 800805c:	4631      	mov	r1, r6
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	f43f af00 	beq.w	8007e68 <_printf_float+0x98>
 8008068:	f109 0901 	add.w	r9, r9, #1
 800806c:	e7ee      	b.n	800804c <_printf_float+0x27c>
 800806e:	bf00      	nop
 8008070:	ffffffff 	.word	0xffffffff
 8008074:	7fefffff 	.word	0x7fefffff
 8008078:	0800a610 	.word	0x0800a610
 800807c:	0800a614 	.word	0x0800a614
 8008080:	0800a618 	.word	0x0800a618
 8008084:	0800a61c 	.word	0x0800a61c
 8008088:	0800a620 	.word	0x0800a620
 800808c:	9a08      	ldr	r2, [sp, #32]
 800808e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008090:	429a      	cmp	r2, r3
 8008092:	bfa8      	it	ge
 8008094:	461a      	movge	r2, r3
 8008096:	2a00      	cmp	r2, #0
 8008098:	4691      	mov	r9, r2
 800809a:	dc38      	bgt.n	800810e <_printf_float+0x33e>
 800809c:	2300      	movs	r3, #0
 800809e:	9305      	str	r3, [sp, #20]
 80080a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080a4:	f104 021a 	add.w	r2, r4, #26
 80080a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080aa:	9905      	ldr	r1, [sp, #20]
 80080ac:	9304      	str	r3, [sp, #16]
 80080ae:	eba3 0309 	sub.w	r3, r3, r9
 80080b2:	428b      	cmp	r3, r1
 80080b4:	dc33      	bgt.n	800811e <_printf_float+0x34e>
 80080b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	db3c      	blt.n	8008138 <_printf_float+0x368>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	07da      	lsls	r2, r3, #31
 80080c2:	d439      	bmi.n	8008138 <_printf_float+0x368>
 80080c4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80080c8:	eba2 0903 	sub.w	r9, r2, r3
 80080cc:	9b04      	ldr	r3, [sp, #16]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	4591      	cmp	r9, r2
 80080d2:	bfa8      	it	ge
 80080d4:	4691      	movge	r9, r2
 80080d6:	f1b9 0f00 	cmp.w	r9, #0
 80080da:	dc35      	bgt.n	8008148 <_printf_float+0x378>
 80080dc:	f04f 0800 	mov.w	r8, #0
 80080e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080e4:	f104 0a1a 	add.w	sl, r4, #26
 80080e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	eba3 0309 	sub.w	r3, r3, r9
 80080f2:	4543      	cmp	r3, r8
 80080f4:	f77f af77 	ble.w	8007fe6 <_printf_float+0x216>
 80080f8:	2301      	movs	r3, #1
 80080fa:	4652      	mov	r2, sl
 80080fc:	4631      	mov	r1, r6
 80080fe:	4628      	mov	r0, r5
 8008100:	47b8      	blx	r7
 8008102:	3001      	adds	r0, #1
 8008104:	f43f aeb0 	beq.w	8007e68 <_printf_float+0x98>
 8008108:	f108 0801 	add.w	r8, r8, #1
 800810c:	e7ec      	b.n	80080e8 <_printf_float+0x318>
 800810e:	4613      	mov	r3, r2
 8008110:	4631      	mov	r1, r6
 8008112:	4642      	mov	r2, r8
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	d1bf      	bne.n	800809c <_printf_float+0x2cc>
 800811c:	e6a4      	b.n	8007e68 <_printf_float+0x98>
 800811e:	2301      	movs	r3, #1
 8008120:	4631      	mov	r1, r6
 8008122:	4628      	mov	r0, r5
 8008124:	9204      	str	r2, [sp, #16]
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	f43f ae9d 	beq.w	8007e68 <_printf_float+0x98>
 800812e:	9b05      	ldr	r3, [sp, #20]
 8008130:	9a04      	ldr	r2, [sp, #16]
 8008132:	3301      	adds	r3, #1
 8008134:	9305      	str	r3, [sp, #20]
 8008136:	e7b7      	b.n	80080a8 <_printf_float+0x2d8>
 8008138:	4653      	mov	r3, sl
 800813a:	465a      	mov	r2, fp
 800813c:	4631      	mov	r1, r6
 800813e:	4628      	mov	r0, r5
 8008140:	47b8      	blx	r7
 8008142:	3001      	adds	r0, #1
 8008144:	d1be      	bne.n	80080c4 <_printf_float+0x2f4>
 8008146:	e68f      	b.n	8007e68 <_printf_float+0x98>
 8008148:	9a04      	ldr	r2, [sp, #16]
 800814a:	464b      	mov	r3, r9
 800814c:	4442      	add	r2, r8
 800814e:	4631      	mov	r1, r6
 8008150:	4628      	mov	r0, r5
 8008152:	47b8      	blx	r7
 8008154:	3001      	adds	r0, #1
 8008156:	d1c1      	bne.n	80080dc <_printf_float+0x30c>
 8008158:	e686      	b.n	8007e68 <_printf_float+0x98>
 800815a:	9a08      	ldr	r2, [sp, #32]
 800815c:	2a01      	cmp	r2, #1
 800815e:	dc01      	bgt.n	8008164 <_printf_float+0x394>
 8008160:	07db      	lsls	r3, r3, #31
 8008162:	d537      	bpl.n	80081d4 <_printf_float+0x404>
 8008164:	2301      	movs	r3, #1
 8008166:	4642      	mov	r2, r8
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	47b8      	blx	r7
 800816e:	3001      	adds	r0, #1
 8008170:	f43f ae7a 	beq.w	8007e68 <_printf_float+0x98>
 8008174:	4653      	mov	r3, sl
 8008176:	465a      	mov	r2, fp
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f ae72 	beq.w	8007e68 <_printf_float+0x98>
 8008184:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008188:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800818c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008190:	9b08      	ldr	r3, [sp, #32]
 8008192:	d01a      	beq.n	80081ca <_printf_float+0x3fa>
 8008194:	3b01      	subs	r3, #1
 8008196:	f108 0201 	add.w	r2, r8, #1
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	47b8      	blx	r7
 80081a0:	3001      	adds	r0, #1
 80081a2:	d10e      	bne.n	80081c2 <_printf_float+0x3f2>
 80081a4:	e660      	b.n	8007e68 <_printf_float+0x98>
 80081a6:	2301      	movs	r3, #1
 80081a8:	464a      	mov	r2, r9
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	47b8      	blx	r7
 80081b0:	3001      	adds	r0, #1
 80081b2:	f43f ae59 	beq.w	8007e68 <_printf_float+0x98>
 80081b6:	f108 0801 	add.w	r8, r8, #1
 80081ba:	9b08      	ldr	r3, [sp, #32]
 80081bc:	3b01      	subs	r3, #1
 80081be:	4543      	cmp	r3, r8
 80081c0:	dcf1      	bgt.n	80081a6 <_printf_float+0x3d6>
 80081c2:	9b04      	ldr	r3, [sp, #16]
 80081c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081c8:	e6dd      	b.n	8007f86 <_printf_float+0x1b6>
 80081ca:	f04f 0800 	mov.w	r8, #0
 80081ce:	f104 091a 	add.w	r9, r4, #26
 80081d2:	e7f2      	b.n	80081ba <_printf_float+0x3ea>
 80081d4:	2301      	movs	r3, #1
 80081d6:	4642      	mov	r2, r8
 80081d8:	e7df      	b.n	800819a <_printf_float+0x3ca>
 80081da:	2301      	movs	r3, #1
 80081dc:	464a      	mov	r2, r9
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	f43f ae3f 	beq.w	8007e68 <_printf_float+0x98>
 80081ea:	f108 0801 	add.w	r8, r8, #1
 80081ee:	68e3      	ldr	r3, [r4, #12]
 80081f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081f2:	1a5b      	subs	r3, r3, r1
 80081f4:	4543      	cmp	r3, r8
 80081f6:	dcf0      	bgt.n	80081da <_printf_float+0x40a>
 80081f8:	e6f9      	b.n	8007fee <_printf_float+0x21e>
 80081fa:	f04f 0800 	mov.w	r8, #0
 80081fe:	f104 0919 	add.w	r9, r4, #25
 8008202:	e7f4      	b.n	80081ee <_printf_float+0x41e>

08008204 <_printf_common>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	4616      	mov	r6, r2
 800820a:	4699      	mov	r9, r3
 800820c:	688a      	ldr	r2, [r1, #8]
 800820e:	690b      	ldr	r3, [r1, #16]
 8008210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008214:	4293      	cmp	r3, r2
 8008216:	bfb8      	it	lt
 8008218:	4613      	movlt	r3, r2
 800821a:	6033      	str	r3, [r6, #0]
 800821c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008220:	4607      	mov	r7, r0
 8008222:	460c      	mov	r4, r1
 8008224:	b10a      	cbz	r2, 800822a <_printf_common+0x26>
 8008226:	3301      	adds	r3, #1
 8008228:	6033      	str	r3, [r6, #0]
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	0699      	lsls	r1, r3, #26
 800822e:	bf42      	ittt	mi
 8008230:	6833      	ldrmi	r3, [r6, #0]
 8008232:	3302      	addmi	r3, #2
 8008234:	6033      	strmi	r3, [r6, #0]
 8008236:	6825      	ldr	r5, [r4, #0]
 8008238:	f015 0506 	ands.w	r5, r5, #6
 800823c:	d106      	bne.n	800824c <_printf_common+0x48>
 800823e:	f104 0a19 	add.w	sl, r4, #25
 8008242:	68e3      	ldr	r3, [r4, #12]
 8008244:	6832      	ldr	r2, [r6, #0]
 8008246:	1a9b      	subs	r3, r3, r2
 8008248:	42ab      	cmp	r3, r5
 800824a:	dc26      	bgt.n	800829a <_printf_common+0x96>
 800824c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008250:	1e13      	subs	r3, r2, #0
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	bf18      	it	ne
 8008256:	2301      	movne	r3, #1
 8008258:	0692      	lsls	r2, r2, #26
 800825a:	d42b      	bmi.n	80082b4 <_printf_common+0xb0>
 800825c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008260:	4649      	mov	r1, r9
 8008262:	4638      	mov	r0, r7
 8008264:	47c0      	blx	r8
 8008266:	3001      	adds	r0, #1
 8008268:	d01e      	beq.n	80082a8 <_printf_common+0xa4>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	6922      	ldr	r2, [r4, #16]
 800826e:	f003 0306 	and.w	r3, r3, #6
 8008272:	2b04      	cmp	r3, #4
 8008274:	bf02      	ittt	eq
 8008276:	68e5      	ldreq	r5, [r4, #12]
 8008278:	6833      	ldreq	r3, [r6, #0]
 800827a:	1aed      	subeq	r5, r5, r3
 800827c:	68a3      	ldr	r3, [r4, #8]
 800827e:	bf0c      	ite	eq
 8008280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008284:	2500      	movne	r5, #0
 8008286:	4293      	cmp	r3, r2
 8008288:	bfc4      	itt	gt
 800828a:	1a9b      	subgt	r3, r3, r2
 800828c:	18ed      	addgt	r5, r5, r3
 800828e:	2600      	movs	r6, #0
 8008290:	341a      	adds	r4, #26
 8008292:	42b5      	cmp	r5, r6
 8008294:	d11a      	bne.n	80082cc <_printf_common+0xc8>
 8008296:	2000      	movs	r0, #0
 8008298:	e008      	b.n	80082ac <_printf_common+0xa8>
 800829a:	2301      	movs	r3, #1
 800829c:	4652      	mov	r2, sl
 800829e:	4649      	mov	r1, r9
 80082a0:	4638      	mov	r0, r7
 80082a2:	47c0      	blx	r8
 80082a4:	3001      	adds	r0, #1
 80082a6:	d103      	bne.n	80082b0 <_printf_common+0xac>
 80082a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b0:	3501      	adds	r5, #1
 80082b2:	e7c6      	b.n	8008242 <_printf_common+0x3e>
 80082b4:	18e1      	adds	r1, r4, r3
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	2030      	movs	r0, #48	; 0x30
 80082ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082be:	4422      	add	r2, r4
 80082c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082c8:	3302      	adds	r3, #2
 80082ca:	e7c7      	b.n	800825c <_printf_common+0x58>
 80082cc:	2301      	movs	r3, #1
 80082ce:	4622      	mov	r2, r4
 80082d0:	4649      	mov	r1, r9
 80082d2:	4638      	mov	r0, r7
 80082d4:	47c0      	blx	r8
 80082d6:	3001      	adds	r0, #1
 80082d8:	d0e6      	beq.n	80082a8 <_printf_common+0xa4>
 80082da:	3601      	adds	r6, #1
 80082dc:	e7d9      	b.n	8008292 <_printf_common+0x8e>
	...

080082e0 <_printf_i>:
 80082e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	7e0f      	ldrb	r7, [r1, #24]
 80082e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082e8:	2f78      	cmp	r7, #120	; 0x78
 80082ea:	4691      	mov	r9, r2
 80082ec:	4680      	mov	r8, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	469a      	mov	sl, r3
 80082f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082f6:	d807      	bhi.n	8008308 <_printf_i+0x28>
 80082f8:	2f62      	cmp	r7, #98	; 0x62
 80082fa:	d80a      	bhi.n	8008312 <_printf_i+0x32>
 80082fc:	2f00      	cmp	r7, #0
 80082fe:	f000 80d4 	beq.w	80084aa <_printf_i+0x1ca>
 8008302:	2f58      	cmp	r7, #88	; 0x58
 8008304:	f000 80c0 	beq.w	8008488 <_printf_i+0x1a8>
 8008308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800830c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008310:	e03a      	b.n	8008388 <_printf_i+0xa8>
 8008312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008316:	2b15      	cmp	r3, #21
 8008318:	d8f6      	bhi.n	8008308 <_printf_i+0x28>
 800831a:	a101      	add	r1, pc, #4	; (adr r1, 8008320 <_printf_i+0x40>)
 800831c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008320:	08008379 	.word	0x08008379
 8008324:	0800838d 	.word	0x0800838d
 8008328:	08008309 	.word	0x08008309
 800832c:	08008309 	.word	0x08008309
 8008330:	08008309 	.word	0x08008309
 8008334:	08008309 	.word	0x08008309
 8008338:	0800838d 	.word	0x0800838d
 800833c:	08008309 	.word	0x08008309
 8008340:	08008309 	.word	0x08008309
 8008344:	08008309 	.word	0x08008309
 8008348:	08008309 	.word	0x08008309
 800834c:	08008491 	.word	0x08008491
 8008350:	080083b9 	.word	0x080083b9
 8008354:	0800844b 	.word	0x0800844b
 8008358:	08008309 	.word	0x08008309
 800835c:	08008309 	.word	0x08008309
 8008360:	080084b3 	.word	0x080084b3
 8008364:	08008309 	.word	0x08008309
 8008368:	080083b9 	.word	0x080083b9
 800836c:	08008309 	.word	0x08008309
 8008370:	08008309 	.word	0x08008309
 8008374:	08008453 	.word	0x08008453
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	1d1a      	adds	r2, r3, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	602a      	str	r2, [r5, #0]
 8008380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008388:	2301      	movs	r3, #1
 800838a:	e09f      	b.n	80084cc <_printf_i+0x1ec>
 800838c:	6820      	ldr	r0, [r4, #0]
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	0607      	lsls	r7, r0, #24
 8008392:	f103 0104 	add.w	r1, r3, #4
 8008396:	6029      	str	r1, [r5, #0]
 8008398:	d501      	bpl.n	800839e <_printf_i+0xbe>
 800839a:	681e      	ldr	r6, [r3, #0]
 800839c:	e003      	b.n	80083a6 <_printf_i+0xc6>
 800839e:	0646      	lsls	r6, r0, #25
 80083a0:	d5fb      	bpl.n	800839a <_printf_i+0xba>
 80083a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80083a6:	2e00      	cmp	r6, #0
 80083a8:	da03      	bge.n	80083b2 <_printf_i+0xd2>
 80083aa:	232d      	movs	r3, #45	; 0x2d
 80083ac:	4276      	negs	r6, r6
 80083ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b2:	485a      	ldr	r0, [pc, #360]	; (800851c <_printf_i+0x23c>)
 80083b4:	230a      	movs	r3, #10
 80083b6:	e012      	b.n	80083de <_printf_i+0xfe>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	6820      	ldr	r0, [r4, #0]
 80083bc:	1d19      	adds	r1, r3, #4
 80083be:	6029      	str	r1, [r5, #0]
 80083c0:	0605      	lsls	r5, r0, #24
 80083c2:	d501      	bpl.n	80083c8 <_printf_i+0xe8>
 80083c4:	681e      	ldr	r6, [r3, #0]
 80083c6:	e002      	b.n	80083ce <_printf_i+0xee>
 80083c8:	0641      	lsls	r1, r0, #25
 80083ca:	d5fb      	bpl.n	80083c4 <_printf_i+0xe4>
 80083cc:	881e      	ldrh	r6, [r3, #0]
 80083ce:	4853      	ldr	r0, [pc, #332]	; (800851c <_printf_i+0x23c>)
 80083d0:	2f6f      	cmp	r7, #111	; 0x6f
 80083d2:	bf0c      	ite	eq
 80083d4:	2308      	moveq	r3, #8
 80083d6:	230a      	movne	r3, #10
 80083d8:	2100      	movs	r1, #0
 80083da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083de:	6865      	ldr	r5, [r4, #4]
 80083e0:	60a5      	str	r5, [r4, #8]
 80083e2:	2d00      	cmp	r5, #0
 80083e4:	bfa2      	ittt	ge
 80083e6:	6821      	ldrge	r1, [r4, #0]
 80083e8:	f021 0104 	bicge.w	r1, r1, #4
 80083ec:	6021      	strge	r1, [r4, #0]
 80083ee:	b90e      	cbnz	r6, 80083f4 <_printf_i+0x114>
 80083f0:	2d00      	cmp	r5, #0
 80083f2:	d04b      	beq.n	800848c <_printf_i+0x1ac>
 80083f4:	4615      	mov	r5, r2
 80083f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80083fa:	fb03 6711 	mls	r7, r3, r1, r6
 80083fe:	5dc7      	ldrb	r7, [r0, r7]
 8008400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008404:	4637      	mov	r7, r6
 8008406:	42bb      	cmp	r3, r7
 8008408:	460e      	mov	r6, r1
 800840a:	d9f4      	bls.n	80083f6 <_printf_i+0x116>
 800840c:	2b08      	cmp	r3, #8
 800840e:	d10b      	bne.n	8008428 <_printf_i+0x148>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	07de      	lsls	r6, r3, #31
 8008414:	d508      	bpl.n	8008428 <_printf_i+0x148>
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	6861      	ldr	r1, [r4, #4]
 800841a:	4299      	cmp	r1, r3
 800841c:	bfde      	ittt	le
 800841e:	2330      	movle	r3, #48	; 0x30
 8008420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008424:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008428:	1b52      	subs	r2, r2, r5
 800842a:	6122      	str	r2, [r4, #16]
 800842c:	f8cd a000 	str.w	sl, [sp]
 8008430:	464b      	mov	r3, r9
 8008432:	aa03      	add	r2, sp, #12
 8008434:	4621      	mov	r1, r4
 8008436:	4640      	mov	r0, r8
 8008438:	f7ff fee4 	bl	8008204 <_printf_common>
 800843c:	3001      	adds	r0, #1
 800843e:	d14a      	bne.n	80084d6 <_printf_i+0x1f6>
 8008440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008444:	b004      	add	sp, #16
 8008446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	f043 0320 	orr.w	r3, r3, #32
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	4833      	ldr	r0, [pc, #204]	; (8008520 <_printf_i+0x240>)
 8008454:	2778      	movs	r7, #120	; 0x78
 8008456:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	6829      	ldr	r1, [r5, #0]
 800845e:	061f      	lsls	r7, r3, #24
 8008460:	f851 6b04 	ldr.w	r6, [r1], #4
 8008464:	d402      	bmi.n	800846c <_printf_i+0x18c>
 8008466:	065f      	lsls	r7, r3, #25
 8008468:	bf48      	it	mi
 800846a:	b2b6      	uxthmi	r6, r6
 800846c:	07df      	lsls	r7, r3, #31
 800846e:	bf48      	it	mi
 8008470:	f043 0320 	orrmi.w	r3, r3, #32
 8008474:	6029      	str	r1, [r5, #0]
 8008476:	bf48      	it	mi
 8008478:	6023      	strmi	r3, [r4, #0]
 800847a:	b91e      	cbnz	r6, 8008484 <_printf_i+0x1a4>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	f023 0320 	bic.w	r3, r3, #32
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	2310      	movs	r3, #16
 8008486:	e7a7      	b.n	80083d8 <_printf_i+0xf8>
 8008488:	4824      	ldr	r0, [pc, #144]	; (800851c <_printf_i+0x23c>)
 800848a:	e7e4      	b.n	8008456 <_printf_i+0x176>
 800848c:	4615      	mov	r5, r2
 800848e:	e7bd      	b.n	800840c <_printf_i+0x12c>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	6826      	ldr	r6, [r4, #0]
 8008494:	6961      	ldr	r1, [r4, #20]
 8008496:	1d18      	adds	r0, r3, #4
 8008498:	6028      	str	r0, [r5, #0]
 800849a:	0635      	lsls	r5, r6, #24
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	d501      	bpl.n	80084a4 <_printf_i+0x1c4>
 80084a0:	6019      	str	r1, [r3, #0]
 80084a2:	e002      	b.n	80084aa <_printf_i+0x1ca>
 80084a4:	0670      	lsls	r0, r6, #25
 80084a6:	d5fb      	bpl.n	80084a0 <_printf_i+0x1c0>
 80084a8:	8019      	strh	r1, [r3, #0]
 80084aa:	2300      	movs	r3, #0
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	4615      	mov	r5, r2
 80084b0:	e7bc      	b.n	800842c <_printf_i+0x14c>
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	602a      	str	r2, [r5, #0]
 80084b8:	681d      	ldr	r5, [r3, #0]
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	2100      	movs	r1, #0
 80084be:	4628      	mov	r0, r5
 80084c0:	f7f7 febe 	bl	8000240 <memchr>
 80084c4:	b108      	cbz	r0, 80084ca <_printf_i+0x1ea>
 80084c6:	1b40      	subs	r0, r0, r5
 80084c8:	6060      	str	r0, [r4, #4]
 80084ca:	6863      	ldr	r3, [r4, #4]
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	2300      	movs	r3, #0
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d4:	e7aa      	b.n	800842c <_printf_i+0x14c>
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	462a      	mov	r2, r5
 80084da:	4649      	mov	r1, r9
 80084dc:	4640      	mov	r0, r8
 80084de:	47d0      	blx	sl
 80084e0:	3001      	adds	r0, #1
 80084e2:	d0ad      	beq.n	8008440 <_printf_i+0x160>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	079b      	lsls	r3, r3, #30
 80084e8:	d413      	bmi.n	8008512 <_printf_i+0x232>
 80084ea:	68e0      	ldr	r0, [r4, #12]
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	4298      	cmp	r0, r3
 80084f0:	bfb8      	it	lt
 80084f2:	4618      	movlt	r0, r3
 80084f4:	e7a6      	b.n	8008444 <_printf_i+0x164>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4632      	mov	r2, r6
 80084fa:	4649      	mov	r1, r9
 80084fc:	4640      	mov	r0, r8
 80084fe:	47d0      	blx	sl
 8008500:	3001      	adds	r0, #1
 8008502:	d09d      	beq.n	8008440 <_printf_i+0x160>
 8008504:	3501      	adds	r5, #1
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	9903      	ldr	r1, [sp, #12]
 800850a:	1a5b      	subs	r3, r3, r1
 800850c:	42ab      	cmp	r3, r5
 800850e:	dcf2      	bgt.n	80084f6 <_printf_i+0x216>
 8008510:	e7eb      	b.n	80084ea <_printf_i+0x20a>
 8008512:	2500      	movs	r5, #0
 8008514:	f104 0619 	add.w	r6, r4, #25
 8008518:	e7f5      	b.n	8008506 <_printf_i+0x226>
 800851a:	bf00      	nop
 800851c:	0800a622 	.word	0x0800a622
 8008520:	0800a633 	.word	0x0800a633

08008524 <std>:
 8008524:	2300      	movs	r3, #0
 8008526:	b510      	push	{r4, lr}
 8008528:	4604      	mov	r4, r0
 800852a:	e9c0 3300 	strd	r3, r3, [r0]
 800852e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008532:	6083      	str	r3, [r0, #8]
 8008534:	8181      	strh	r1, [r0, #12]
 8008536:	6643      	str	r3, [r0, #100]	; 0x64
 8008538:	81c2      	strh	r2, [r0, #14]
 800853a:	6183      	str	r3, [r0, #24]
 800853c:	4619      	mov	r1, r3
 800853e:	2208      	movs	r2, #8
 8008540:	305c      	adds	r0, #92	; 0x5c
 8008542:	f000 f9f7 	bl	8008934 <memset>
 8008546:	4b0d      	ldr	r3, [pc, #52]	; (800857c <std+0x58>)
 8008548:	6263      	str	r3, [r4, #36]	; 0x24
 800854a:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <std+0x5c>)
 800854c:	62a3      	str	r3, [r4, #40]	; 0x28
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <std+0x60>)
 8008550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <std+0x64>)
 8008554:	6323      	str	r3, [r4, #48]	; 0x30
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <std+0x68>)
 8008558:	6224      	str	r4, [r4, #32]
 800855a:	429c      	cmp	r4, r3
 800855c:	d006      	beq.n	800856c <std+0x48>
 800855e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008562:	4294      	cmp	r4, r2
 8008564:	d002      	beq.n	800856c <std+0x48>
 8008566:	33d0      	adds	r3, #208	; 0xd0
 8008568:	429c      	cmp	r4, r3
 800856a:	d105      	bne.n	8008578 <std+0x54>
 800856c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008574:	f000 ba5a 	b.w	8008a2c <__retarget_lock_init_recursive>
 8008578:	bd10      	pop	{r4, pc}
 800857a:	bf00      	nop
 800857c:	08008785 	.word	0x08008785
 8008580:	080087a7 	.word	0x080087a7
 8008584:	080087df 	.word	0x080087df
 8008588:	08008803 	.word	0x08008803
 800858c:	200009a0 	.word	0x200009a0

08008590 <stdio_exit_handler>:
 8008590:	4a02      	ldr	r2, [pc, #8]	; (800859c <stdio_exit_handler+0xc>)
 8008592:	4903      	ldr	r1, [pc, #12]	; (80085a0 <stdio_exit_handler+0x10>)
 8008594:	4803      	ldr	r0, [pc, #12]	; (80085a4 <stdio_exit_handler+0x14>)
 8008596:	f000 b869 	b.w	800866c <_fwalk_sglue>
 800859a:	bf00      	nop
 800859c:	2000001c 	.word	0x2000001c
 80085a0:	0800a2c5 	.word	0x0800a2c5
 80085a4:	20000028 	.word	0x20000028

080085a8 <cleanup_stdio>:
 80085a8:	6841      	ldr	r1, [r0, #4]
 80085aa:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <cleanup_stdio+0x34>)
 80085ac:	4299      	cmp	r1, r3
 80085ae:	b510      	push	{r4, lr}
 80085b0:	4604      	mov	r4, r0
 80085b2:	d001      	beq.n	80085b8 <cleanup_stdio+0x10>
 80085b4:	f001 fe86 	bl	800a2c4 <_fflush_r>
 80085b8:	68a1      	ldr	r1, [r4, #8]
 80085ba:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <cleanup_stdio+0x38>)
 80085bc:	4299      	cmp	r1, r3
 80085be:	d002      	beq.n	80085c6 <cleanup_stdio+0x1e>
 80085c0:	4620      	mov	r0, r4
 80085c2:	f001 fe7f 	bl	800a2c4 <_fflush_r>
 80085c6:	68e1      	ldr	r1, [r4, #12]
 80085c8:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <cleanup_stdio+0x3c>)
 80085ca:	4299      	cmp	r1, r3
 80085cc:	d004      	beq.n	80085d8 <cleanup_stdio+0x30>
 80085ce:	4620      	mov	r0, r4
 80085d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d4:	f001 be76 	b.w	800a2c4 <_fflush_r>
 80085d8:	bd10      	pop	{r4, pc}
 80085da:	bf00      	nop
 80085dc:	200009a0 	.word	0x200009a0
 80085e0:	20000a08 	.word	0x20000a08
 80085e4:	20000a70 	.word	0x20000a70

080085e8 <global_stdio_init.part.0>:
 80085e8:	b510      	push	{r4, lr}
 80085ea:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <global_stdio_init.part.0+0x30>)
 80085ec:	4c0b      	ldr	r4, [pc, #44]	; (800861c <global_stdio_init.part.0+0x34>)
 80085ee:	4a0c      	ldr	r2, [pc, #48]	; (8008620 <global_stdio_init.part.0+0x38>)
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	4620      	mov	r0, r4
 80085f4:	2200      	movs	r2, #0
 80085f6:	2104      	movs	r1, #4
 80085f8:	f7ff ff94 	bl	8008524 <std>
 80085fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008600:	2201      	movs	r2, #1
 8008602:	2109      	movs	r1, #9
 8008604:	f7ff ff8e 	bl	8008524 <std>
 8008608:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800860c:	2202      	movs	r2, #2
 800860e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008612:	2112      	movs	r1, #18
 8008614:	f7ff bf86 	b.w	8008524 <std>
 8008618:	20000ad8 	.word	0x20000ad8
 800861c:	200009a0 	.word	0x200009a0
 8008620:	08008591 	.word	0x08008591

08008624 <__sfp_lock_acquire>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__sfp_lock_acquire+0x8>)
 8008626:	f000 ba02 	b.w	8008a2e <__retarget_lock_acquire_recursive>
 800862a:	bf00      	nop
 800862c:	20000ae1 	.word	0x20000ae1

08008630 <__sfp_lock_release>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sfp_lock_release+0x8>)
 8008632:	f000 b9fd 	b.w	8008a30 <__retarget_lock_release_recursive>
 8008636:	bf00      	nop
 8008638:	20000ae1 	.word	0x20000ae1

0800863c <__sinit>:
 800863c:	b510      	push	{r4, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	f7ff fff0 	bl	8008624 <__sfp_lock_acquire>
 8008644:	6a23      	ldr	r3, [r4, #32]
 8008646:	b11b      	cbz	r3, 8008650 <__sinit+0x14>
 8008648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864c:	f7ff bff0 	b.w	8008630 <__sfp_lock_release>
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <__sinit+0x28>)
 8008652:	6223      	str	r3, [r4, #32]
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <__sinit+0x2c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1f5      	bne.n	8008648 <__sinit+0xc>
 800865c:	f7ff ffc4 	bl	80085e8 <global_stdio_init.part.0>
 8008660:	e7f2      	b.n	8008648 <__sinit+0xc>
 8008662:	bf00      	nop
 8008664:	080085a9 	.word	0x080085a9
 8008668:	20000ad8 	.word	0x20000ad8

0800866c <_fwalk_sglue>:
 800866c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008670:	4607      	mov	r7, r0
 8008672:	4688      	mov	r8, r1
 8008674:	4614      	mov	r4, r2
 8008676:	2600      	movs	r6, #0
 8008678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800867c:	f1b9 0901 	subs.w	r9, r9, #1
 8008680:	d505      	bpl.n	800868e <_fwalk_sglue+0x22>
 8008682:	6824      	ldr	r4, [r4, #0]
 8008684:	2c00      	cmp	r4, #0
 8008686:	d1f7      	bne.n	8008678 <_fwalk_sglue+0xc>
 8008688:	4630      	mov	r0, r6
 800868a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868e:	89ab      	ldrh	r3, [r5, #12]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d907      	bls.n	80086a4 <_fwalk_sglue+0x38>
 8008694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008698:	3301      	adds	r3, #1
 800869a:	d003      	beq.n	80086a4 <_fwalk_sglue+0x38>
 800869c:	4629      	mov	r1, r5
 800869e:	4638      	mov	r0, r7
 80086a0:	47c0      	blx	r8
 80086a2:	4306      	orrs	r6, r0
 80086a4:	3568      	adds	r5, #104	; 0x68
 80086a6:	e7e9      	b.n	800867c <_fwalk_sglue+0x10>

080086a8 <iprintf>:
 80086a8:	b40f      	push	{r0, r1, r2, r3}
 80086aa:	b507      	push	{r0, r1, r2, lr}
 80086ac:	4906      	ldr	r1, [pc, #24]	; (80086c8 <iprintf+0x20>)
 80086ae:	ab04      	add	r3, sp, #16
 80086b0:	6808      	ldr	r0, [r1, #0]
 80086b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b6:	6881      	ldr	r1, [r0, #8]
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	f001 fc63 	bl	8009f84 <_vfiprintf_r>
 80086be:	b003      	add	sp, #12
 80086c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086c4:	b004      	add	sp, #16
 80086c6:	4770      	bx	lr
 80086c8:	20000074 	.word	0x20000074

080086cc <_puts_r>:
 80086cc:	6a03      	ldr	r3, [r0, #32]
 80086ce:	b570      	push	{r4, r5, r6, lr}
 80086d0:	6884      	ldr	r4, [r0, #8]
 80086d2:	4605      	mov	r5, r0
 80086d4:	460e      	mov	r6, r1
 80086d6:	b90b      	cbnz	r3, 80086dc <_puts_r+0x10>
 80086d8:	f7ff ffb0 	bl	800863c <__sinit>
 80086dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086de:	07db      	lsls	r3, r3, #31
 80086e0:	d405      	bmi.n	80086ee <_puts_r+0x22>
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	0598      	lsls	r0, r3, #22
 80086e6:	d402      	bmi.n	80086ee <_puts_r+0x22>
 80086e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ea:	f000 f9a0 	bl	8008a2e <__retarget_lock_acquire_recursive>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	0719      	lsls	r1, r3, #28
 80086f2:	d513      	bpl.n	800871c <_puts_r+0x50>
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	b18b      	cbz	r3, 800871c <_puts_r+0x50>
 80086f8:	3e01      	subs	r6, #1
 80086fa:	68a3      	ldr	r3, [r4, #8]
 80086fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008700:	3b01      	subs	r3, #1
 8008702:	60a3      	str	r3, [r4, #8]
 8008704:	b9e9      	cbnz	r1, 8008742 <_puts_r+0x76>
 8008706:	2b00      	cmp	r3, #0
 8008708:	da2e      	bge.n	8008768 <_puts_r+0x9c>
 800870a:	4622      	mov	r2, r4
 800870c:	210a      	movs	r1, #10
 800870e:	4628      	mov	r0, r5
 8008710:	f000 f87b 	bl	800880a <__swbuf_r>
 8008714:	3001      	adds	r0, #1
 8008716:	d007      	beq.n	8008728 <_puts_r+0x5c>
 8008718:	250a      	movs	r5, #10
 800871a:	e007      	b.n	800872c <_puts_r+0x60>
 800871c:	4621      	mov	r1, r4
 800871e:	4628      	mov	r0, r5
 8008720:	f000 f8b0 	bl	8008884 <__swsetup_r>
 8008724:	2800      	cmp	r0, #0
 8008726:	d0e7      	beq.n	80086f8 <_puts_r+0x2c>
 8008728:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800872c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800872e:	07da      	lsls	r2, r3, #31
 8008730:	d405      	bmi.n	800873e <_puts_r+0x72>
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	059b      	lsls	r3, r3, #22
 8008736:	d402      	bmi.n	800873e <_puts_r+0x72>
 8008738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800873a:	f000 f979 	bl	8008a30 <__retarget_lock_release_recursive>
 800873e:	4628      	mov	r0, r5
 8008740:	bd70      	pop	{r4, r5, r6, pc}
 8008742:	2b00      	cmp	r3, #0
 8008744:	da04      	bge.n	8008750 <_puts_r+0x84>
 8008746:	69a2      	ldr	r2, [r4, #24]
 8008748:	429a      	cmp	r2, r3
 800874a:	dc06      	bgt.n	800875a <_puts_r+0x8e>
 800874c:	290a      	cmp	r1, #10
 800874e:	d004      	beq.n	800875a <_puts_r+0x8e>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	6022      	str	r2, [r4, #0]
 8008756:	7019      	strb	r1, [r3, #0]
 8008758:	e7cf      	b.n	80086fa <_puts_r+0x2e>
 800875a:	4622      	mov	r2, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f000 f854 	bl	800880a <__swbuf_r>
 8008762:	3001      	adds	r0, #1
 8008764:	d1c9      	bne.n	80086fa <_puts_r+0x2e>
 8008766:	e7df      	b.n	8008728 <_puts_r+0x5c>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	250a      	movs	r5, #10
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	701d      	strb	r5, [r3, #0]
 8008772:	e7db      	b.n	800872c <_puts_r+0x60>

08008774 <puts>:
 8008774:	4b02      	ldr	r3, [pc, #8]	; (8008780 <puts+0xc>)
 8008776:	4601      	mov	r1, r0
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	f7ff bfa7 	b.w	80086cc <_puts_r>
 800877e:	bf00      	nop
 8008780:	20000074 	.word	0x20000074

08008784 <__sread>:
 8008784:	b510      	push	{r4, lr}
 8008786:	460c      	mov	r4, r1
 8008788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878c:	f000 f900 	bl	8008990 <_read_r>
 8008790:	2800      	cmp	r0, #0
 8008792:	bfab      	itete	ge
 8008794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008796:	89a3      	ldrhlt	r3, [r4, #12]
 8008798:	181b      	addge	r3, r3, r0
 800879a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800879e:	bfac      	ite	ge
 80087a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80087a2:	81a3      	strhlt	r3, [r4, #12]
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <__swrite>:
 80087a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087aa:	461f      	mov	r7, r3
 80087ac:	898b      	ldrh	r3, [r1, #12]
 80087ae:	05db      	lsls	r3, r3, #23
 80087b0:	4605      	mov	r5, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	4616      	mov	r6, r2
 80087b6:	d505      	bpl.n	80087c4 <__swrite+0x1e>
 80087b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087bc:	2302      	movs	r3, #2
 80087be:	2200      	movs	r2, #0
 80087c0:	f000 f8d4 	bl	800896c <_lseek_r>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	4632      	mov	r2, r6
 80087d2:	463b      	mov	r3, r7
 80087d4:	4628      	mov	r0, r5
 80087d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087da:	f000 b8eb 	b.w	80089b4 <_write_r>

080087de <__sseek>:
 80087de:	b510      	push	{r4, lr}
 80087e0:	460c      	mov	r4, r1
 80087e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e6:	f000 f8c1 	bl	800896c <_lseek_r>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	bf15      	itete	ne
 80087f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80087f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087fa:	81a3      	strheq	r3, [r4, #12]
 80087fc:	bf18      	it	ne
 80087fe:	81a3      	strhne	r3, [r4, #12]
 8008800:	bd10      	pop	{r4, pc}

08008802 <__sclose>:
 8008802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008806:	f000 b8a1 	b.w	800894c <_close_r>

0800880a <__swbuf_r>:
 800880a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880c:	460e      	mov	r6, r1
 800880e:	4614      	mov	r4, r2
 8008810:	4605      	mov	r5, r0
 8008812:	b118      	cbz	r0, 800881c <__swbuf_r+0x12>
 8008814:	6a03      	ldr	r3, [r0, #32]
 8008816:	b90b      	cbnz	r3, 800881c <__swbuf_r+0x12>
 8008818:	f7ff ff10 	bl	800863c <__sinit>
 800881c:	69a3      	ldr	r3, [r4, #24]
 800881e:	60a3      	str	r3, [r4, #8]
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	071a      	lsls	r2, r3, #28
 8008824:	d525      	bpl.n	8008872 <__swbuf_r+0x68>
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	b31b      	cbz	r3, 8008872 <__swbuf_r+0x68>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	6922      	ldr	r2, [r4, #16]
 800882e:	1a98      	subs	r0, r3, r2
 8008830:	6963      	ldr	r3, [r4, #20]
 8008832:	b2f6      	uxtb	r6, r6
 8008834:	4283      	cmp	r3, r0
 8008836:	4637      	mov	r7, r6
 8008838:	dc04      	bgt.n	8008844 <__swbuf_r+0x3a>
 800883a:	4621      	mov	r1, r4
 800883c:	4628      	mov	r0, r5
 800883e:	f001 fd41 	bl	800a2c4 <_fflush_r>
 8008842:	b9e0      	cbnz	r0, 800887e <__swbuf_r+0x74>
 8008844:	68a3      	ldr	r3, [r4, #8]
 8008846:	3b01      	subs	r3, #1
 8008848:	60a3      	str	r3, [r4, #8]
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	6022      	str	r2, [r4, #0]
 8008850:	701e      	strb	r6, [r3, #0]
 8008852:	6962      	ldr	r2, [r4, #20]
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	429a      	cmp	r2, r3
 8008858:	d004      	beq.n	8008864 <__swbuf_r+0x5a>
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	07db      	lsls	r3, r3, #31
 800885e:	d506      	bpl.n	800886e <__swbuf_r+0x64>
 8008860:	2e0a      	cmp	r6, #10
 8008862:	d104      	bne.n	800886e <__swbuf_r+0x64>
 8008864:	4621      	mov	r1, r4
 8008866:	4628      	mov	r0, r5
 8008868:	f001 fd2c 	bl	800a2c4 <_fflush_r>
 800886c:	b938      	cbnz	r0, 800887e <__swbuf_r+0x74>
 800886e:	4638      	mov	r0, r7
 8008870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008872:	4621      	mov	r1, r4
 8008874:	4628      	mov	r0, r5
 8008876:	f000 f805 	bl	8008884 <__swsetup_r>
 800887a:	2800      	cmp	r0, #0
 800887c:	d0d5      	beq.n	800882a <__swbuf_r+0x20>
 800887e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008882:	e7f4      	b.n	800886e <__swbuf_r+0x64>

08008884 <__swsetup_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4b2a      	ldr	r3, [pc, #168]	; (8008930 <__swsetup_r+0xac>)
 8008888:	4605      	mov	r5, r0
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	460c      	mov	r4, r1
 800888e:	b118      	cbz	r0, 8008898 <__swsetup_r+0x14>
 8008890:	6a03      	ldr	r3, [r0, #32]
 8008892:	b90b      	cbnz	r3, 8008898 <__swsetup_r+0x14>
 8008894:	f7ff fed2 	bl	800863c <__sinit>
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800889e:	0718      	lsls	r0, r3, #28
 80088a0:	d422      	bmi.n	80088e8 <__swsetup_r+0x64>
 80088a2:	06d9      	lsls	r1, r3, #27
 80088a4:	d407      	bmi.n	80088b6 <__swsetup_r+0x32>
 80088a6:	2309      	movs	r3, #9
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b4:	e034      	b.n	8008920 <__swsetup_r+0x9c>
 80088b6:	0758      	lsls	r0, r3, #29
 80088b8:	d512      	bpl.n	80088e0 <__swsetup_r+0x5c>
 80088ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088bc:	b141      	cbz	r1, 80088d0 <__swsetup_r+0x4c>
 80088be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c2:	4299      	cmp	r1, r3
 80088c4:	d002      	beq.n	80088cc <__swsetup_r+0x48>
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 feb6 	bl	8009638 <_free_r>
 80088cc:	2300      	movs	r3, #0
 80088ce:	6363      	str	r3, [r4, #52]	; 0x34
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088d6:	81a3      	strh	r3, [r4, #12]
 80088d8:	2300      	movs	r3, #0
 80088da:	6063      	str	r3, [r4, #4]
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f043 0308 	orr.w	r3, r3, #8
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	b94b      	cbnz	r3, 8008900 <__swsetup_r+0x7c>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f6:	d003      	beq.n	8008900 <__swsetup_r+0x7c>
 80088f8:	4621      	mov	r1, r4
 80088fa:	4628      	mov	r0, r5
 80088fc:	f001 fd30 	bl	800a360 <__smakebuf_r>
 8008900:	89a0      	ldrh	r0, [r4, #12]
 8008902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008906:	f010 0301 	ands.w	r3, r0, #1
 800890a:	d00a      	beq.n	8008922 <__swsetup_r+0x9e>
 800890c:	2300      	movs	r3, #0
 800890e:	60a3      	str	r3, [r4, #8]
 8008910:	6963      	ldr	r3, [r4, #20]
 8008912:	425b      	negs	r3, r3
 8008914:	61a3      	str	r3, [r4, #24]
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	b943      	cbnz	r3, 800892c <__swsetup_r+0xa8>
 800891a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800891e:	d1c4      	bne.n	80088aa <__swsetup_r+0x26>
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	0781      	lsls	r1, r0, #30
 8008924:	bf58      	it	pl
 8008926:	6963      	ldrpl	r3, [r4, #20]
 8008928:	60a3      	str	r3, [r4, #8]
 800892a:	e7f4      	b.n	8008916 <__swsetup_r+0x92>
 800892c:	2000      	movs	r0, #0
 800892e:	e7f7      	b.n	8008920 <__swsetup_r+0x9c>
 8008930:	20000074 	.word	0x20000074

08008934 <memset>:
 8008934:	4402      	add	r2, r0
 8008936:	4603      	mov	r3, r0
 8008938:	4293      	cmp	r3, r2
 800893a:	d100      	bne.n	800893e <memset+0xa>
 800893c:	4770      	bx	lr
 800893e:	f803 1b01 	strb.w	r1, [r3], #1
 8008942:	e7f9      	b.n	8008938 <memset+0x4>

08008944 <_localeconv_r>:
 8008944:	4800      	ldr	r0, [pc, #0]	; (8008948 <_localeconv_r+0x4>)
 8008946:	4770      	bx	lr
 8008948:	20000168 	.word	0x20000168

0800894c <_close_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4d06      	ldr	r5, [pc, #24]	; (8008968 <_close_r+0x1c>)
 8008950:	2300      	movs	r3, #0
 8008952:	4604      	mov	r4, r0
 8008954:	4608      	mov	r0, r1
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	f7fa f835 	bl	80029c6 <_close>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_close_r+0x1a>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_close_r+0x1a>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20000adc 	.word	0x20000adc

0800896c <_lseek_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4d07      	ldr	r5, [pc, #28]	; (800898c <_lseek_r+0x20>)
 8008970:	4604      	mov	r4, r0
 8008972:	4608      	mov	r0, r1
 8008974:	4611      	mov	r1, r2
 8008976:	2200      	movs	r2, #0
 8008978:	602a      	str	r2, [r5, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f7fa f84a 	bl	8002a14 <_lseek>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_lseek_r+0x1e>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	b103      	cbz	r3, 800898a <_lseek_r+0x1e>
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	20000adc 	.word	0x20000adc

08008990 <_read_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d07      	ldr	r5, [pc, #28]	; (80089b0 <_read_r+0x20>)
 8008994:	4604      	mov	r4, r0
 8008996:	4608      	mov	r0, r1
 8008998:	4611      	mov	r1, r2
 800899a:	2200      	movs	r2, #0
 800899c:	602a      	str	r2, [r5, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f7f9 fff4 	bl	800298c <_read>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_read_r+0x1e>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_read_r+0x1e>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	20000adc 	.word	0x20000adc

080089b4 <_write_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d07      	ldr	r5, [pc, #28]	; (80089d4 <_write_r+0x20>)
 80089b8:	4604      	mov	r4, r0
 80089ba:	4608      	mov	r0, r1
 80089bc:	4611      	mov	r1, r2
 80089be:	2200      	movs	r2, #0
 80089c0:	602a      	str	r2, [r5, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f7f9 fa22 	bl	8001e0c <_write>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_write_r+0x1e>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_write_r+0x1e>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	20000adc 	.word	0x20000adc

080089d8 <__errno>:
 80089d8:	4b01      	ldr	r3, [pc, #4]	; (80089e0 <__errno+0x8>)
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	20000074 	.word	0x20000074

080089e4 <__libc_init_array>:
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	4d0d      	ldr	r5, [pc, #52]	; (8008a1c <__libc_init_array+0x38>)
 80089e8:	4c0d      	ldr	r4, [pc, #52]	; (8008a20 <__libc_init_array+0x3c>)
 80089ea:	1b64      	subs	r4, r4, r5
 80089ec:	10a4      	asrs	r4, r4, #2
 80089ee:	2600      	movs	r6, #0
 80089f0:	42a6      	cmp	r6, r4
 80089f2:	d109      	bne.n	8008a08 <__libc_init_array+0x24>
 80089f4:	4d0b      	ldr	r5, [pc, #44]	; (8008a24 <__libc_init_array+0x40>)
 80089f6:	4c0c      	ldr	r4, [pc, #48]	; (8008a28 <__libc_init_array+0x44>)
 80089f8:	f001 fdd2 	bl	800a5a0 <_init>
 80089fc:	1b64      	subs	r4, r4, r5
 80089fe:	10a4      	asrs	r4, r4, #2
 8008a00:	2600      	movs	r6, #0
 8008a02:	42a6      	cmp	r6, r4
 8008a04:	d105      	bne.n	8008a12 <__libc_init_array+0x2e>
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0c:	4798      	blx	r3
 8008a0e:	3601      	adds	r6, #1
 8008a10:	e7ee      	b.n	80089f0 <__libc_init_array+0xc>
 8008a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a16:	4798      	blx	r3
 8008a18:	3601      	adds	r6, #1
 8008a1a:	e7f2      	b.n	8008a02 <__libc_init_array+0x1e>
 8008a1c:	0800a98c 	.word	0x0800a98c
 8008a20:	0800a98c 	.word	0x0800a98c
 8008a24:	0800a98c 	.word	0x0800a98c
 8008a28:	0800a990 	.word	0x0800a990

08008a2c <__retarget_lock_init_recursive>:
 8008a2c:	4770      	bx	lr

08008a2e <__retarget_lock_acquire_recursive>:
 8008a2e:	4770      	bx	lr

08008a30 <__retarget_lock_release_recursive>:
 8008a30:	4770      	bx	lr

08008a32 <memcpy>:
 8008a32:	440a      	add	r2, r1
 8008a34:	4291      	cmp	r1, r2
 8008a36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a3a:	d100      	bne.n	8008a3e <memcpy+0xc>
 8008a3c:	4770      	bx	lr
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a48:	4291      	cmp	r1, r2
 8008a4a:	d1f9      	bne.n	8008a40 <memcpy+0xe>
 8008a4c:	bd10      	pop	{r4, pc}

08008a4e <quorem>:
 8008a4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a52:	6903      	ldr	r3, [r0, #16]
 8008a54:	690c      	ldr	r4, [r1, #16]
 8008a56:	42a3      	cmp	r3, r4
 8008a58:	4607      	mov	r7, r0
 8008a5a:	db7e      	blt.n	8008b5a <quorem+0x10c>
 8008a5c:	3c01      	subs	r4, #1
 8008a5e:	f101 0814 	add.w	r8, r1, #20
 8008a62:	f100 0514 	add.w	r5, r0, #20
 8008a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a74:	3301      	adds	r3, #1
 8008a76:	429a      	cmp	r2, r3
 8008a78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a80:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a84:	d331      	bcc.n	8008aea <quorem+0x9c>
 8008a86:	f04f 0e00 	mov.w	lr, #0
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	46ac      	mov	ip, r5
 8008a8e:	46f2      	mov	sl, lr
 8008a90:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a94:	b293      	uxth	r3, r2
 8008a96:	fb06 e303 	mla	r3, r6, r3, lr
 8008a9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a9e:	0c1a      	lsrs	r2, r3, #16
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	ebaa 0303 	sub.w	r3, sl, r3
 8008aa6:	f8dc a000 	ldr.w	sl, [ip]
 8008aaa:	fa13 f38a 	uxtah	r3, r3, sl
 8008aae:	fb06 220e 	mla	r2, r6, lr, r2
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	9b00      	ldr	r3, [sp, #0]
 8008ab6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008aba:	b292      	uxth	r2, r2
 8008abc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ac4:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ac8:	4581      	cmp	r9, r0
 8008aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ace:	f84c 3b04 	str.w	r3, [ip], #4
 8008ad2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ad6:	d2db      	bcs.n	8008a90 <quorem+0x42>
 8008ad8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008adc:	b92b      	cbnz	r3, 8008aea <quorem+0x9c>
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	3b04      	subs	r3, #4
 8008ae2:	429d      	cmp	r5, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	d32c      	bcc.n	8008b42 <quorem+0xf4>
 8008ae8:	613c      	str	r4, [r7, #16]
 8008aea:	4638      	mov	r0, r7
 8008aec:	f001 f920 	bl	8009d30 <__mcmp>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	db22      	blt.n	8008b3a <quorem+0xec>
 8008af4:	3601      	adds	r6, #1
 8008af6:	4629      	mov	r1, r5
 8008af8:	2000      	movs	r0, #0
 8008afa:	f858 2b04 	ldr.w	r2, [r8], #4
 8008afe:	f8d1 c000 	ldr.w	ip, [r1]
 8008b02:	b293      	uxth	r3, r2
 8008b04:	1ac3      	subs	r3, r0, r3
 8008b06:	0c12      	lsrs	r2, r2, #16
 8008b08:	fa13 f38c 	uxtah	r3, r3, ip
 8008b0c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b1a:	45c1      	cmp	r9, r8
 8008b1c:	f841 3b04 	str.w	r3, [r1], #4
 8008b20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b24:	d2e9      	bcs.n	8008afa <quorem+0xac>
 8008b26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b2e:	b922      	cbnz	r2, 8008b3a <quorem+0xec>
 8008b30:	3b04      	subs	r3, #4
 8008b32:	429d      	cmp	r5, r3
 8008b34:	461a      	mov	r2, r3
 8008b36:	d30a      	bcc.n	8008b4e <quorem+0x100>
 8008b38:	613c      	str	r4, [r7, #16]
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	b003      	add	sp, #12
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	3b04      	subs	r3, #4
 8008b46:	2a00      	cmp	r2, #0
 8008b48:	d1ce      	bne.n	8008ae8 <quorem+0x9a>
 8008b4a:	3c01      	subs	r4, #1
 8008b4c:	e7c9      	b.n	8008ae2 <quorem+0x94>
 8008b4e:	6812      	ldr	r2, [r2, #0]
 8008b50:	3b04      	subs	r3, #4
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	d1f0      	bne.n	8008b38 <quorem+0xea>
 8008b56:	3c01      	subs	r4, #1
 8008b58:	e7eb      	b.n	8008b32 <quorem+0xe4>
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e7ee      	b.n	8008b3c <quorem+0xee>
	...

08008b60 <_dtoa_r>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	ed2d 8b02 	vpush	{d8}
 8008b68:	69c5      	ldr	r5, [r0, #28]
 8008b6a:	b091      	sub	sp, #68	; 0x44
 8008b6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b70:	ec59 8b10 	vmov	r8, r9, d0
 8008b74:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008b76:	9106      	str	r1, [sp, #24]
 8008b78:	4606      	mov	r6, r0
 8008b7a:	9208      	str	r2, [sp, #32]
 8008b7c:	930c      	str	r3, [sp, #48]	; 0x30
 8008b7e:	b975      	cbnz	r5, 8008b9e <_dtoa_r+0x3e>
 8008b80:	2010      	movs	r0, #16
 8008b82:	f000 fda5 	bl	80096d0 <malloc>
 8008b86:	4602      	mov	r2, r0
 8008b88:	61f0      	str	r0, [r6, #28]
 8008b8a:	b920      	cbnz	r0, 8008b96 <_dtoa_r+0x36>
 8008b8c:	4ba6      	ldr	r3, [pc, #664]	; (8008e28 <_dtoa_r+0x2c8>)
 8008b8e:	21ef      	movs	r1, #239	; 0xef
 8008b90:	48a6      	ldr	r0, [pc, #664]	; (8008e2c <_dtoa_r+0x2cc>)
 8008b92:	f001 fc53 	bl	800a43c <__assert_func>
 8008b96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b9a:	6005      	str	r5, [r0, #0]
 8008b9c:	60c5      	str	r5, [r0, #12]
 8008b9e:	69f3      	ldr	r3, [r6, #28]
 8008ba0:	6819      	ldr	r1, [r3, #0]
 8008ba2:	b151      	cbz	r1, 8008bba <_dtoa_r+0x5a>
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	604a      	str	r2, [r1, #4]
 8008ba8:	2301      	movs	r3, #1
 8008baa:	4093      	lsls	r3, r2
 8008bac:	608b      	str	r3, [r1, #8]
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 fe82 	bl	80098b8 <_Bfree>
 8008bb4:	69f3      	ldr	r3, [r6, #28]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	f1b9 0300 	subs.w	r3, r9, #0
 8008bbe:	bfbb      	ittet	lt
 8008bc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bc4:	9303      	strlt	r3, [sp, #12]
 8008bc6:	2300      	movge	r3, #0
 8008bc8:	2201      	movlt	r2, #1
 8008bca:	bfac      	ite	ge
 8008bcc:	6023      	strge	r3, [r4, #0]
 8008bce:	6022      	strlt	r2, [r4, #0]
 8008bd0:	4b97      	ldr	r3, [pc, #604]	; (8008e30 <_dtoa_r+0x2d0>)
 8008bd2:	9c03      	ldr	r4, [sp, #12]
 8008bd4:	43a3      	bics	r3, r4
 8008bd6:	d11c      	bne.n	8008c12 <_dtoa_r+0xb2>
 8008bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bda:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008be4:	ea53 0308 	orrs.w	r3, r3, r8
 8008be8:	f000 84fb 	beq.w	80095e2 <_dtoa_r+0xa82>
 8008bec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bee:	b963      	cbnz	r3, 8008c0a <_dtoa_r+0xaa>
 8008bf0:	4b90      	ldr	r3, [pc, #576]	; (8008e34 <_dtoa_r+0x2d4>)
 8008bf2:	e020      	b.n	8008c36 <_dtoa_r+0xd6>
 8008bf4:	4b90      	ldr	r3, [pc, #576]	; (8008e38 <_dtoa_r+0x2d8>)
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	3308      	adds	r3, #8
 8008bfa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	9801      	ldr	r0, [sp, #4]
 8008c00:	b011      	add	sp, #68	; 0x44
 8008c02:	ecbd 8b02 	vpop	{d8}
 8008c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0a:	4b8a      	ldr	r3, [pc, #552]	; (8008e34 <_dtoa_r+0x2d4>)
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	3303      	adds	r3, #3
 8008c10:	e7f3      	b.n	8008bfa <_dtoa_r+0x9a>
 8008c12:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008c16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c1e:	d10c      	bne.n	8008c3a <_dtoa_r+0xda>
 8008c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c22:	2301      	movs	r3, #1
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 84d7 	beq.w	80095dc <_dtoa_r+0xa7c>
 8008c2e:	4b83      	ldr	r3, [pc, #524]	; (8008e3c <_dtoa_r+0x2dc>)
 8008c30:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	e7e1      	b.n	8008bfe <_dtoa_r+0x9e>
 8008c3a:	aa0e      	add	r2, sp, #56	; 0x38
 8008c3c:	a90f      	add	r1, sp, #60	; 0x3c
 8008c3e:	4630      	mov	r0, r6
 8008c40:	eeb0 0b48 	vmov.f64	d0, d8
 8008c44:	f001 f91a 	bl	8009e7c <__d2b>
 8008c48:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008c4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c4e:	4605      	mov	r5, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d046      	beq.n	8008ce2 <_dtoa_r+0x182>
 8008c54:	eeb0 7b48 	vmov.f64	d7, d8
 8008c58:	ee18 1a90 	vmov	r1, s17
 8008c5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008c60:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008c64:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008c68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	ee07 1a90 	vmov	s15, r1
 8008c72:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8008c76:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008e10 <_dtoa_r+0x2b0>
 8008c7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008c7e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008e18 <_dtoa_r+0x2b8>
 8008c82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008c86:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008e20 <_dtoa_r+0x2c0>
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008c92:	eeb0 7b46 	vmov.f64	d7, d6
 8008c96:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008c9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008c9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca6:	ee16 ba90 	vmov	fp, s13
 8008caa:	9009      	str	r0, [sp, #36]	; 0x24
 8008cac:	d508      	bpl.n	8008cc0 <_dtoa_r+0x160>
 8008cae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008cb2:	eeb4 6b47 	vcmp.f64	d6, d7
 8008cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cba:	bf18      	it	ne
 8008cbc:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8008cc0:	f1bb 0f16 	cmp.w	fp, #22
 8008cc4:	d82b      	bhi.n	8008d1e <_dtoa_r+0x1be>
 8008cc6:	495e      	ldr	r1, [pc, #376]	; (8008e40 <_dtoa_r+0x2e0>)
 8008cc8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008ccc:	ed91 7b00 	vldr	d7, [r1]
 8008cd0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd8:	d501      	bpl.n	8008cde <_dtoa_r+0x17e>
 8008cda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008cde:	2100      	movs	r1, #0
 8008ce0:	e01e      	b.n	8008d20 <_dtoa_r+0x1c0>
 8008ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8008cea:	2920      	cmp	r1, #32
 8008cec:	bfc1      	itttt	gt
 8008cee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8008cf2:	408c      	lslgt	r4, r1
 8008cf4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8008cf8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8008cfc:	bfd6      	itet	le
 8008cfe:	f1c1 0120 	rsble	r1, r1, #32
 8008d02:	4321      	orrgt	r1, r4
 8008d04:	fa08 f101 	lslle.w	r1, r8, r1
 8008d08:	ee07 1a90 	vmov	s15, r1
 8008d0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008d10:	3b01      	subs	r3, #1
 8008d12:	ee17 1a90 	vmov	r1, s15
 8008d16:	2001      	movs	r0, #1
 8008d18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008d1c:	e7a7      	b.n	8008c6e <_dtoa_r+0x10e>
 8008d1e:	2101      	movs	r1, #1
 8008d20:	1ad2      	subs	r2, r2, r3
 8008d22:	1e53      	subs	r3, r2, #1
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	bf45      	ittet	mi
 8008d28:	f1c2 0301 	rsbmi	r3, r2, #1
 8008d2c:	9304      	strmi	r3, [sp, #16]
 8008d2e:	2300      	movpl	r3, #0
 8008d30:	2300      	movmi	r3, #0
 8008d32:	bf4c      	ite	mi
 8008d34:	9305      	strmi	r3, [sp, #20]
 8008d36:	9304      	strpl	r3, [sp, #16]
 8008d38:	f1bb 0f00 	cmp.w	fp, #0
 8008d3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d3e:	db18      	blt.n	8008d72 <_dtoa_r+0x212>
 8008d40:	9b05      	ldr	r3, [sp, #20]
 8008d42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008d46:	445b      	add	r3, fp
 8008d48:	9305      	str	r3, [sp, #20]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9a06      	ldr	r2, [sp, #24]
 8008d4e:	2a09      	cmp	r2, #9
 8008d50:	d848      	bhi.n	8008de4 <_dtoa_r+0x284>
 8008d52:	2a05      	cmp	r2, #5
 8008d54:	bfc4      	itt	gt
 8008d56:	3a04      	subgt	r2, #4
 8008d58:	9206      	strgt	r2, [sp, #24]
 8008d5a:	9a06      	ldr	r2, [sp, #24]
 8008d5c:	f1a2 0202 	sub.w	r2, r2, #2
 8008d60:	bfcc      	ite	gt
 8008d62:	2400      	movgt	r4, #0
 8008d64:	2401      	movle	r4, #1
 8008d66:	2a03      	cmp	r2, #3
 8008d68:	d847      	bhi.n	8008dfa <_dtoa_r+0x29a>
 8008d6a:	e8df f002 	tbb	[pc, r2]
 8008d6e:	2d0b      	.short	0x2d0b
 8008d70:	392b      	.short	0x392b
 8008d72:	9b04      	ldr	r3, [sp, #16]
 8008d74:	2200      	movs	r2, #0
 8008d76:	eba3 030b 	sub.w	r3, r3, fp
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	920a      	str	r2, [sp, #40]	; 0x28
 8008d7e:	f1cb 0300 	rsb	r3, fp, #0
 8008d82:	e7e3      	b.n	8008d4c <_dtoa_r+0x1ec>
 8008d84:	2200      	movs	r2, #0
 8008d86:	9207      	str	r2, [sp, #28]
 8008d88:	9a08      	ldr	r2, [sp, #32]
 8008d8a:	2a00      	cmp	r2, #0
 8008d8c:	dc38      	bgt.n	8008e00 <_dtoa_r+0x2a0>
 8008d8e:	f04f 0a01 	mov.w	sl, #1
 8008d92:	46d1      	mov	r9, sl
 8008d94:	4652      	mov	r2, sl
 8008d96:	f8cd a020 	str.w	sl, [sp, #32]
 8008d9a:	69f7      	ldr	r7, [r6, #28]
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	2004      	movs	r0, #4
 8008da0:	f100 0c14 	add.w	ip, r0, #20
 8008da4:	4594      	cmp	ip, r2
 8008da6:	d930      	bls.n	8008e0a <_dtoa_r+0x2aa>
 8008da8:	6079      	str	r1, [r7, #4]
 8008daa:	4630      	mov	r0, r6
 8008dac:	930d      	str	r3, [sp, #52]	; 0x34
 8008dae:	f000 fd43 	bl	8009838 <_Balloc>
 8008db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008db4:	9001      	str	r0, [sp, #4]
 8008db6:	4602      	mov	r2, r0
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d145      	bne.n	8008e48 <_dtoa_r+0x2e8>
 8008dbc:	4b21      	ldr	r3, [pc, #132]	; (8008e44 <_dtoa_r+0x2e4>)
 8008dbe:	f240 11af 	movw	r1, #431	; 0x1af
 8008dc2:	e6e5      	b.n	8008b90 <_dtoa_r+0x30>
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	e7de      	b.n	8008d86 <_dtoa_r+0x226>
 8008dc8:	2200      	movs	r2, #0
 8008dca:	9207      	str	r2, [sp, #28]
 8008dcc:	9a08      	ldr	r2, [sp, #32]
 8008dce:	eb0b 0a02 	add.w	sl, fp, r2
 8008dd2:	f10a 0901 	add.w	r9, sl, #1
 8008dd6:	464a      	mov	r2, r9
 8008dd8:	2a01      	cmp	r2, #1
 8008dda:	bfb8      	it	lt
 8008ddc:	2201      	movlt	r2, #1
 8008dde:	e7dc      	b.n	8008d9a <_dtoa_r+0x23a>
 8008de0:	2201      	movs	r2, #1
 8008de2:	e7f2      	b.n	8008dca <_dtoa_r+0x26a>
 8008de4:	2401      	movs	r4, #1
 8008de6:	2200      	movs	r2, #0
 8008de8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008dec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008df0:	2100      	movs	r1, #0
 8008df2:	46d1      	mov	r9, sl
 8008df4:	2212      	movs	r2, #18
 8008df6:	9108      	str	r1, [sp, #32]
 8008df8:	e7cf      	b.n	8008d9a <_dtoa_r+0x23a>
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	9207      	str	r2, [sp, #28]
 8008dfe:	e7f5      	b.n	8008dec <_dtoa_r+0x28c>
 8008e00:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e04:	46d1      	mov	r9, sl
 8008e06:	4652      	mov	r2, sl
 8008e08:	e7c7      	b.n	8008d9a <_dtoa_r+0x23a>
 8008e0a:	3101      	adds	r1, #1
 8008e0c:	0040      	lsls	r0, r0, #1
 8008e0e:	e7c7      	b.n	8008da0 <_dtoa_r+0x240>
 8008e10:	636f4361 	.word	0x636f4361
 8008e14:	3fd287a7 	.word	0x3fd287a7
 8008e18:	8b60c8b3 	.word	0x8b60c8b3
 8008e1c:	3fc68a28 	.word	0x3fc68a28
 8008e20:	509f79fb 	.word	0x509f79fb
 8008e24:	3fd34413 	.word	0x3fd34413
 8008e28:	0800a651 	.word	0x0800a651
 8008e2c:	0800a668 	.word	0x0800a668
 8008e30:	7ff00000 	.word	0x7ff00000
 8008e34:	0800a64d 	.word	0x0800a64d
 8008e38:	0800a644 	.word	0x0800a644
 8008e3c:	0800a621 	.word	0x0800a621
 8008e40:	0800a758 	.word	0x0800a758
 8008e44:	0800a6c0 	.word	0x0800a6c0
 8008e48:	69f2      	ldr	r2, [r6, #28]
 8008e4a:	9901      	ldr	r1, [sp, #4]
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	f1b9 0f0e 	cmp.w	r9, #14
 8008e52:	d86c      	bhi.n	8008f2e <_dtoa_r+0x3ce>
 8008e54:	2c00      	cmp	r4, #0
 8008e56:	d06a      	beq.n	8008f2e <_dtoa_r+0x3ce>
 8008e58:	f1bb 0f00 	cmp.w	fp, #0
 8008e5c:	f340 80a0 	ble.w	8008fa0 <_dtoa_r+0x440>
 8008e60:	4ac1      	ldr	r2, [pc, #772]	; (8009168 <_dtoa_r+0x608>)
 8008e62:	f00b 010f 	and.w	r1, fp, #15
 8008e66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008e6a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e6e:	ed92 7b00 	vldr	d7, [r2]
 8008e72:	ea4f 122b 	mov.w	r2, fp, asr #4
 8008e76:	f000 8087 	beq.w	8008f88 <_dtoa_r+0x428>
 8008e7a:	49bc      	ldr	r1, [pc, #752]	; (800916c <_dtoa_r+0x60c>)
 8008e7c:	ed91 6b08 	vldr	d6, [r1, #32]
 8008e80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008e84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008e88:	f002 020f 	and.w	r2, r2, #15
 8008e8c:	2103      	movs	r1, #3
 8008e8e:	48b7      	ldr	r0, [pc, #732]	; (800916c <_dtoa_r+0x60c>)
 8008e90:	2a00      	cmp	r2, #0
 8008e92:	d17b      	bne.n	8008f8c <_dtoa_r+0x42c>
 8008e94:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008e98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008e9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ea2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ea6:	2a00      	cmp	r2, #0
 8008ea8:	f000 80a0 	beq.w	8008fec <_dtoa_r+0x48c>
 8008eac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008eb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb8:	f140 8098 	bpl.w	8008fec <_dtoa_r+0x48c>
 8008ebc:	f1b9 0f00 	cmp.w	r9, #0
 8008ec0:	f000 8094 	beq.w	8008fec <_dtoa_r+0x48c>
 8008ec4:	f1ba 0f00 	cmp.w	sl, #0
 8008ec8:	dd2f      	ble.n	8008f2a <_dtoa_r+0x3ca>
 8008eca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008ece:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ed2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ed6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008eda:	3101      	adds	r1, #1
 8008edc:	4654      	mov	r4, sl
 8008ede:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008ee2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008ee6:	ee07 1a90 	vmov	s15, r1
 8008eea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008eee:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008ef2:	ee15 7a90 	vmov	r7, s11
 8008ef6:	ec51 0b15 	vmov	r0, r1, d5
 8008efa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	d177      	bne.n	8008ff2 <_dtoa_r+0x492>
 8008f02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008f06:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008f0a:	ec41 0b17 	vmov	d7, r0, r1
 8008f0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f16:	f300 826a 	bgt.w	80093ee <_dtoa_r+0x88e>
 8008f1a:	eeb1 7b47 	vneg.f64	d7, d7
 8008f1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f26:	f100 8260 	bmi.w	80093ea <_dtoa_r+0x88a>
 8008f2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f30:	2a00      	cmp	r2, #0
 8008f32:	f2c0 811d 	blt.w	8009170 <_dtoa_r+0x610>
 8008f36:	f1bb 0f0e 	cmp.w	fp, #14
 8008f3a:	f300 8119 	bgt.w	8009170 <_dtoa_r+0x610>
 8008f3e:	4b8a      	ldr	r3, [pc, #552]	; (8009168 <_dtoa_r+0x608>)
 8008f40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f44:	ed93 6b00 	vldr	d6, [r3]
 8008f48:	9b08      	ldr	r3, [sp, #32]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f280 80b7 	bge.w	80090be <_dtoa_r+0x55e>
 8008f50:	f1b9 0f00 	cmp.w	r9, #0
 8008f54:	f300 80b3 	bgt.w	80090be <_dtoa_r+0x55e>
 8008f58:	f040 8246 	bne.w	80093e8 <_dtoa_r+0x888>
 8008f5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008f60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008f64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f70:	464c      	mov	r4, r9
 8008f72:	464f      	mov	r7, r9
 8008f74:	f280 821c 	bge.w	80093b0 <_dtoa_r+0x850>
 8008f78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f7c:	2331      	movs	r3, #49	; 0x31
 8008f7e:	f808 3b01 	strb.w	r3, [r8], #1
 8008f82:	f10b 0b01 	add.w	fp, fp, #1
 8008f86:	e218      	b.n	80093ba <_dtoa_r+0x85a>
 8008f88:	2102      	movs	r1, #2
 8008f8a:	e780      	b.n	8008e8e <_dtoa_r+0x32e>
 8008f8c:	07d4      	lsls	r4, r2, #31
 8008f8e:	d504      	bpl.n	8008f9a <_dtoa_r+0x43a>
 8008f90:	ed90 6b00 	vldr	d6, [r0]
 8008f94:	3101      	adds	r1, #1
 8008f96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f9a:	1052      	asrs	r2, r2, #1
 8008f9c:	3008      	adds	r0, #8
 8008f9e:	e777      	b.n	8008e90 <_dtoa_r+0x330>
 8008fa0:	d022      	beq.n	8008fe8 <_dtoa_r+0x488>
 8008fa2:	f1cb 0200 	rsb	r2, fp, #0
 8008fa6:	4970      	ldr	r1, [pc, #448]	; (8009168 <_dtoa_r+0x608>)
 8008fa8:	f002 000f 	and.w	r0, r2, #15
 8008fac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008fb0:	ed91 7b00 	vldr	d7, [r1]
 8008fb4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008fb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fbc:	486b      	ldr	r0, [pc, #428]	; (800916c <_dtoa_r+0x60c>)
 8008fbe:	1112      	asrs	r2, r2, #4
 8008fc0:	2400      	movs	r4, #0
 8008fc2:	2102      	movs	r1, #2
 8008fc4:	b92a      	cbnz	r2, 8008fd2 <_dtoa_r+0x472>
 8008fc6:	2c00      	cmp	r4, #0
 8008fc8:	f43f af6a 	beq.w	8008ea0 <_dtoa_r+0x340>
 8008fcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fd0:	e766      	b.n	8008ea0 <_dtoa_r+0x340>
 8008fd2:	07d7      	lsls	r7, r2, #31
 8008fd4:	d505      	bpl.n	8008fe2 <_dtoa_r+0x482>
 8008fd6:	ed90 6b00 	vldr	d6, [r0]
 8008fda:	3101      	adds	r1, #1
 8008fdc:	2401      	movs	r4, #1
 8008fde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fe2:	1052      	asrs	r2, r2, #1
 8008fe4:	3008      	adds	r0, #8
 8008fe6:	e7ed      	b.n	8008fc4 <_dtoa_r+0x464>
 8008fe8:	2102      	movs	r1, #2
 8008fea:	e759      	b.n	8008ea0 <_dtoa_r+0x340>
 8008fec:	465a      	mov	r2, fp
 8008fee:	464c      	mov	r4, r9
 8008ff0:	e775      	b.n	8008ede <_dtoa_r+0x37e>
 8008ff2:	ec41 0b17 	vmov	d7, r0, r1
 8008ff6:	495c      	ldr	r1, [pc, #368]	; (8009168 <_dtoa_r+0x608>)
 8008ff8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008ffc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009000:	9901      	ldr	r1, [sp, #4]
 8009002:	440c      	add	r4, r1
 8009004:	9907      	ldr	r1, [sp, #28]
 8009006:	b351      	cbz	r1, 800905e <_dtoa_r+0x4fe>
 8009008:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800900c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009010:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009014:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009018:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800901c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009020:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009024:	ee14 1a90 	vmov	r1, s9
 8009028:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800902c:	3130      	adds	r1, #48	; 0x30
 800902e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009032:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903a:	f808 1b01 	strb.w	r1, [r8], #1
 800903e:	d439      	bmi.n	80090b4 <_dtoa_r+0x554>
 8009040:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009044:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904c:	d472      	bmi.n	8009134 <_dtoa_r+0x5d4>
 800904e:	45a0      	cmp	r8, r4
 8009050:	f43f af6b 	beq.w	8008f2a <_dtoa_r+0x3ca>
 8009054:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009058:	ee26 6b03 	vmul.f64	d6, d6, d3
 800905c:	e7e0      	b.n	8009020 <_dtoa_r+0x4c0>
 800905e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009062:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009066:	4620      	mov	r0, r4
 8009068:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800906c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009070:	ee14 1a90 	vmov	r1, s9
 8009074:	3130      	adds	r1, #48	; 0x30
 8009076:	f808 1b01 	strb.w	r1, [r8], #1
 800907a:	45a0      	cmp	r8, r4
 800907c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009080:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009084:	d118      	bne.n	80090b8 <_dtoa_r+0x558>
 8009086:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800908a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800908e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009096:	dc4d      	bgt.n	8009134 <_dtoa_r+0x5d4>
 8009098:	ee35 5b47 	vsub.f64	d5, d5, d7
 800909c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80090a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a4:	f57f af41 	bpl.w	8008f2a <_dtoa_r+0x3ca>
 80090a8:	4680      	mov	r8, r0
 80090aa:	3801      	subs	r0, #1
 80090ac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80090b0:	2b30      	cmp	r3, #48	; 0x30
 80090b2:	d0f9      	beq.n	80090a8 <_dtoa_r+0x548>
 80090b4:	4693      	mov	fp, r2
 80090b6:	e02a      	b.n	800910e <_dtoa_r+0x5ae>
 80090b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80090bc:	e7d6      	b.n	800906c <_dtoa_r+0x50c>
 80090be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80090c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80090ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80090ce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80090d2:	ee15 3a10 	vmov	r3, s10
 80090d6:	3330      	adds	r3, #48	; 0x30
 80090d8:	f808 3b01 	strb.w	r3, [r8], #1
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	eba8 0303 	sub.w	r3, r8, r3
 80090e2:	4599      	cmp	r9, r3
 80090e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80090e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80090ec:	d133      	bne.n	8009156 <_dtoa_r+0x5f6>
 80090ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80090f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80090f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fa:	dc1a      	bgt.n	8009132 <_dtoa_r+0x5d2>
 80090fc:	eeb4 7b46 	vcmp.f64	d7, d6
 8009100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009104:	d103      	bne.n	800910e <_dtoa_r+0x5ae>
 8009106:	ee15 3a10 	vmov	r3, s10
 800910a:	07d9      	lsls	r1, r3, #31
 800910c:	d411      	bmi.n	8009132 <_dtoa_r+0x5d2>
 800910e:	4629      	mov	r1, r5
 8009110:	4630      	mov	r0, r6
 8009112:	f000 fbd1 	bl	80098b8 <_Bfree>
 8009116:	2300      	movs	r3, #0
 8009118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800911a:	f888 3000 	strb.w	r3, [r8]
 800911e:	f10b 0301 	add.w	r3, fp, #1
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009126:	2b00      	cmp	r3, #0
 8009128:	f43f ad69 	beq.w	8008bfe <_dtoa_r+0x9e>
 800912c:	f8c3 8000 	str.w	r8, [r3]
 8009130:	e565      	b.n	8008bfe <_dtoa_r+0x9e>
 8009132:	465a      	mov	r2, fp
 8009134:	4643      	mov	r3, r8
 8009136:	4698      	mov	r8, r3
 8009138:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800913c:	2939      	cmp	r1, #57	; 0x39
 800913e:	d106      	bne.n	800914e <_dtoa_r+0x5ee>
 8009140:	9901      	ldr	r1, [sp, #4]
 8009142:	4299      	cmp	r1, r3
 8009144:	d1f7      	bne.n	8009136 <_dtoa_r+0x5d6>
 8009146:	9801      	ldr	r0, [sp, #4]
 8009148:	2130      	movs	r1, #48	; 0x30
 800914a:	3201      	adds	r2, #1
 800914c:	7001      	strb	r1, [r0, #0]
 800914e:	7819      	ldrb	r1, [r3, #0]
 8009150:	3101      	adds	r1, #1
 8009152:	7019      	strb	r1, [r3, #0]
 8009154:	e7ae      	b.n	80090b4 <_dtoa_r+0x554>
 8009156:	ee27 7b04 	vmul.f64	d7, d7, d4
 800915a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009162:	d1b2      	bne.n	80090ca <_dtoa_r+0x56a>
 8009164:	e7d3      	b.n	800910e <_dtoa_r+0x5ae>
 8009166:	bf00      	nop
 8009168:	0800a758 	.word	0x0800a758
 800916c:	0800a730 	.word	0x0800a730
 8009170:	9907      	ldr	r1, [sp, #28]
 8009172:	2900      	cmp	r1, #0
 8009174:	f000 80d0 	beq.w	8009318 <_dtoa_r+0x7b8>
 8009178:	9906      	ldr	r1, [sp, #24]
 800917a:	2901      	cmp	r1, #1
 800917c:	f300 80b4 	bgt.w	80092e8 <_dtoa_r+0x788>
 8009180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009182:	2900      	cmp	r1, #0
 8009184:	f000 80ac 	beq.w	80092e0 <_dtoa_r+0x780>
 8009188:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800918c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009190:	461c      	mov	r4, r3
 8009192:	9309      	str	r3, [sp, #36]	; 0x24
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	4413      	add	r3, r2
 8009198:	9304      	str	r3, [sp, #16]
 800919a:	9b05      	ldr	r3, [sp, #20]
 800919c:	2101      	movs	r1, #1
 800919e:	4413      	add	r3, r2
 80091a0:	4630      	mov	r0, r6
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	f000 fc3e 	bl	8009a24 <__i2b>
 80091a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091aa:	4607      	mov	r7, r0
 80091ac:	f1b8 0f00 	cmp.w	r8, #0
 80091b0:	d00d      	beq.n	80091ce <_dtoa_r+0x66e>
 80091b2:	9a05      	ldr	r2, [sp, #20]
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	dd0a      	ble.n	80091ce <_dtoa_r+0x66e>
 80091b8:	4542      	cmp	r2, r8
 80091ba:	9904      	ldr	r1, [sp, #16]
 80091bc:	bfa8      	it	ge
 80091be:	4642      	movge	r2, r8
 80091c0:	1a89      	subs	r1, r1, r2
 80091c2:	9104      	str	r1, [sp, #16]
 80091c4:	9905      	ldr	r1, [sp, #20]
 80091c6:	eba8 0802 	sub.w	r8, r8, r2
 80091ca:	1a8a      	subs	r2, r1, r2
 80091cc:	9205      	str	r2, [sp, #20]
 80091ce:	b303      	cbz	r3, 8009212 <_dtoa_r+0x6b2>
 80091d0:	9a07      	ldr	r2, [sp, #28]
 80091d2:	2a00      	cmp	r2, #0
 80091d4:	f000 80a5 	beq.w	8009322 <_dtoa_r+0x7c2>
 80091d8:	2c00      	cmp	r4, #0
 80091da:	dd13      	ble.n	8009204 <_dtoa_r+0x6a4>
 80091dc:	4639      	mov	r1, r7
 80091de:	4622      	mov	r2, r4
 80091e0:	4630      	mov	r0, r6
 80091e2:	930d      	str	r3, [sp, #52]	; 0x34
 80091e4:	f000 fcde 	bl	8009ba4 <__pow5mult>
 80091e8:	462a      	mov	r2, r5
 80091ea:	4601      	mov	r1, r0
 80091ec:	4607      	mov	r7, r0
 80091ee:	4630      	mov	r0, r6
 80091f0:	f000 fc2e 	bl	8009a50 <__multiply>
 80091f4:	4629      	mov	r1, r5
 80091f6:	9009      	str	r0, [sp, #36]	; 0x24
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 fb5d 	bl	80098b8 <_Bfree>
 80091fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009202:	4615      	mov	r5, r2
 8009204:	1b1a      	subs	r2, r3, r4
 8009206:	d004      	beq.n	8009212 <_dtoa_r+0x6b2>
 8009208:	4629      	mov	r1, r5
 800920a:	4630      	mov	r0, r6
 800920c:	f000 fcca 	bl	8009ba4 <__pow5mult>
 8009210:	4605      	mov	r5, r0
 8009212:	2101      	movs	r1, #1
 8009214:	4630      	mov	r0, r6
 8009216:	f000 fc05 	bl	8009a24 <__i2b>
 800921a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921c:	2b00      	cmp	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	f340 8081 	ble.w	8009326 <_dtoa_r+0x7c6>
 8009224:	461a      	mov	r2, r3
 8009226:	4601      	mov	r1, r0
 8009228:	4630      	mov	r0, r6
 800922a:	f000 fcbb 	bl	8009ba4 <__pow5mult>
 800922e:	9b06      	ldr	r3, [sp, #24]
 8009230:	2b01      	cmp	r3, #1
 8009232:	4604      	mov	r4, r0
 8009234:	dd7a      	ble.n	800932c <_dtoa_r+0x7cc>
 8009236:	2300      	movs	r3, #0
 8009238:	9309      	str	r3, [sp, #36]	; 0x24
 800923a:	6922      	ldr	r2, [r4, #16]
 800923c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009240:	6910      	ldr	r0, [r2, #16]
 8009242:	f000 fba1 	bl	8009988 <__hi0bits>
 8009246:	f1c0 0020 	rsb	r0, r0, #32
 800924a:	9b05      	ldr	r3, [sp, #20]
 800924c:	4418      	add	r0, r3
 800924e:	f010 001f 	ands.w	r0, r0, #31
 8009252:	f000 8093 	beq.w	800937c <_dtoa_r+0x81c>
 8009256:	f1c0 0220 	rsb	r2, r0, #32
 800925a:	2a04      	cmp	r2, #4
 800925c:	f340 8085 	ble.w	800936a <_dtoa_r+0x80a>
 8009260:	9b04      	ldr	r3, [sp, #16]
 8009262:	f1c0 001c 	rsb	r0, r0, #28
 8009266:	4403      	add	r3, r0
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	9b05      	ldr	r3, [sp, #20]
 800926c:	4480      	add	r8, r0
 800926e:	4403      	add	r3, r0
 8009270:	9305      	str	r3, [sp, #20]
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	dd05      	ble.n	8009284 <_dtoa_r+0x724>
 8009278:	4629      	mov	r1, r5
 800927a:	461a      	mov	r2, r3
 800927c:	4630      	mov	r0, r6
 800927e:	f000 fceb 	bl	8009c58 <__lshift>
 8009282:	4605      	mov	r5, r0
 8009284:	9b05      	ldr	r3, [sp, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd05      	ble.n	8009296 <_dtoa_r+0x736>
 800928a:	4621      	mov	r1, r4
 800928c:	461a      	mov	r2, r3
 800928e:	4630      	mov	r0, r6
 8009290:	f000 fce2 	bl	8009c58 <__lshift>
 8009294:	4604      	mov	r4, r0
 8009296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009298:	2b00      	cmp	r3, #0
 800929a:	d071      	beq.n	8009380 <_dtoa_r+0x820>
 800929c:	4621      	mov	r1, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 fd46 	bl	8009d30 <__mcmp>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	da6b      	bge.n	8009380 <_dtoa_r+0x820>
 80092a8:	2300      	movs	r3, #0
 80092aa:	4629      	mov	r1, r5
 80092ac:	220a      	movs	r2, #10
 80092ae:	4630      	mov	r0, r6
 80092b0:	f000 fb24 	bl	80098fc <__multadd>
 80092b4:	9b07      	ldr	r3, [sp, #28]
 80092b6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80092ba:	4605      	mov	r5, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8197 	beq.w	80095f0 <_dtoa_r+0xa90>
 80092c2:	4639      	mov	r1, r7
 80092c4:	2300      	movs	r3, #0
 80092c6:	220a      	movs	r2, #10
 80092c8:	4630      	mov	r0, r6
 80092ca:	f000 fb17 	bl	80098fc <__multadd>
 80092ce:	f1ba 0f00 	cmp.w	sl, #0
 80092d2:	4607      	mov	r7, r0
 80092d4:	f300 8093 	bgt.w	80093fe <_dtoa_r+0x89e>
 80092d8:	9b06      	ldr	r3, [sp, #24]
 80092da:	2b02      	cmp	r3, #2
 80092dc:	dc57      	bgt.n	800938e <_dtoa_r+0x82e>
 80092de:	e08e      	b.n	80093fe <_dtoa_r+0x89e>
 80092e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092e6:	e751      	b.n	800918c <_dtoa_r+0x62c>
 80092e8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	bfbf      	itttt	lt
 80092f0:	1ae2      	sublt	r2, r4, r3
 80092f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80092f4:	189b      	addlt	r3, r3, r2
 80092f6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80092f8:	bfae      	itee	ge
 80092fa:	1b1c      	subge	r4, r3, r4
 80092fc:	4623      	movlt	r3, r4
 80092fe:	2400      	movlt	r4, #0
 8009300:	f1b9 0f00 	cmp.w	r9, #0
 8009304:	bfb5      	itete	lt
 8009306:	9a04      	ldrlt	r2, [sp, #16]
 8009308:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800930c:	eba2 0809 	sublt.w	r8, r2, r9
 8009310:	464a      	movge	r2, r9
 8009312:	bfb8      	it	lt
 8009314:	2200      	movlt	r2, #0
 8009316:	e73c      	b.n	8009192 <_dtoa_r+0x632>
 8009318:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800931c:	9f07      	ldr	r7, [sp, #28]
 800931e:	461c      	mov	r4, r3
 8009320:	e744      	b.n	80091ac <_dtoa_r+0x64c>
 8009322:	461a      	mov	r2, r3
 8009324:	e770      	b.n	8009208 <_dtoa_r+0x6a8>
 8009326:	9b06      	ldr	r3, [sp, #24]
 8009328:	2b01      	cmp	r3, #1
 800932a:	dc18      	bgt.n	800935e <_dtoa_r+0x7fe>
 800932c:	9b02      	ldr	r3, [sp, #8]
 800932e:	b9b3      	cbnz	r3, 800935e <_dtoa_r+0x7fe>
 8009330:	9b03      	ldr	r3, [sp, #12]
 8009332:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009336:	b9a2      	cbnz	r2, 8009362 <_dtoa_r+0x802>
 8009338:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800933c:	0d12      	lsrs	r2, r2, #20
 800933e:	0512      	lsls	r2, r2, #20
 8009340:	b18a      	cbz	r2, 8009366 <_dtoa_r+0x806>
 8009342:	9b04      	ldr	r3, [sp, #16]
 8009344:	3301      	adds	r3, #1
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	3301      	adds	r3, #1
 800934c:	9305      	str	r3, [sp, #20]
 800934e:	2301      	movs	r3, #1
 8009350:	9309      	str	r3, [sp, #36]	; 0x24
 8009352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009354:	2b00      	cmp	r3, #0
 8009356:	f47f af70 	bne.w	800923a <_dtoa_r+0x6da>
 800935a:	2001      	movs	r0, #1
 800935c:	e775      	b.n	800924a <_dtoa_r+0x6ea>
 800935e:	2300      	movs	r3, #0
 8009360:	e7f6      	b.n	8009350 <_dtoa_r+0x7f0>
 8009362:	9b02      	ldr	r3, [sp, #8]
 8009364:	e7f4      	b.n	8009350 <_dtoa_r+0x7f0>
 8009366:	9209      	str	r2, [sp, #36]	; 0x24
 8009368:	e7f3      	b.n	8009352 <_dtoa_r+0x7f2>
 800936a:	d082      	beq.n	8009272 <_dtoa_r+0x712>
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	321c      	adds	r2, #28
 8009370:	4413      	add	r3, r2
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	9b05      	ldr	r3, [sp, #20]
 8009376:	4490      	add	r8, r2
 8009378:	4413      	add	r3, r2
 800937a:	e779      	b.n	8009270 <_dtoa_r+0x710>
 800937c:	4602      	mov	r2, r0
 800937e:	e7f5      	b.n	800936c <_dtoa_r+0x80c>
 8009380:	f1b9 0f00 	cmp.w	r9, #0
 8009384:	dc36      	bgt.n	80093f4 <_dtoa_r+0x894>
 8009386:	9b06      	ldr	r3, [sp, #24]
 8009388:	2b02      	cmp	r3, #2
 800938a:	dd33      	ble.n	80093f4 <_dtoa_r+0x894>
 800938c:	46ca      	mov	sl, r9
 800938e:	f1ba 0f00 	cmp.w	sl, #0
 8009392:	d10d      	bne.n	80093b0 <_dtoa_r+0x850>
 8009394:	4621      	mov	r1, r4
 8009396:	4653      	mov	r3, sl
 8009398:	2205      	movs	r2, #5
 800939a:	4630      	mov	r0, r6
 800939c:	f000 faae 	bl	80098fc <__multadd>
 80093a0:	4601      	mov	r1, r0
 80093a2:	4604      	mov	r4, r0
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 fcc3 	bl	8009d30 <__mcmp>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	f73f ade4 	bgt.w	8008f78 <_dtoa_r+0x418>
 80093b0:	9b08      	ldr	r3, [sp, #32]
 80093b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093b6:	ea6f 0b03 	mvn.w	fp, r3
 80093ba:	f04f 0900 	mov.w	r9, #0
 80093be:	4621      	mov	r1, r4
 80093c0:	4630      	mov	r0, r6
 80093c2:	f000 fa79 	bl	80098b8 <_Bfree>
 80093c6:	2f00      	cmp	r7, #0
 80093c8:	f43f aea1 	beq.w	800910e <_dtoa_r+0x5ae>
 80093cc:	f1b9 0f00 	cmp.w	r9, #0
 80093d0:	d005      	beq.n	80093de <_dtoa_r+0x87e>
 80093d2:	45b9      	cmp	r9, r7
 80093d4:	d003      	beq.n	80093de <_dtoa_r+0x87e>
 80093d6:	4649      	mov	r1, r9
 80093d8:	4630      	mov	r0, r6
 80093da:	f000 fa6d 	bl	80098b8 <_Bfree>
 80093de:	4639      	mov	r1, r7
 80093e0:	4630      	mov	r0, r6
 80093e2:	f000 fa69 	bl	80098b8 <_Bfree>
 80093e6:	e692      	b.n	800910e <_dtoa_r+0x5ae>
 80093e8:	2400      	movs	r4, #0
 80093ea:	4627      	mov	r7, r4
 80093ec:	e7e0      	b.n	80093b0 <_dtoa_r+0x850>
 80093ee:	4693      	mov	fp, r2
 80093f0:	4627      	mov	r7, r4
 80093f2:	e5c1      	b.n	8008f78 <_dtoa_r+0x418>
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	46ca      	mov	sl, r9
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 8100 	beq.w	80095fe <_dtoa_r+0xa9e>
 80093fe:	f1b8 0f00 	cmp.w	r8, #0
 8009402:	dd05      	ble.n	8009410 <_dtoa_r+0x8b0>
 8009404:	4639      	mov	r1, r7
 8009406:	4642      	mov	r2, r8
 8009408:	4630      	mov	r0, r6
 800940a:	f000 fc25 	bl	8009c58 <__lshift>
 800940e:	4607      	mov	r7, r0
 8009410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009412:	2b00      	cmp	r3, #0
 8009414:	d05d      	beq.n	80094d2 <_dtoa_r+0x972>
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	4630      	mov	r0, r6
 800941a:	f000 fa0d 	bl	8009838 <_Balloc>
 800941e:	4680      	mov	r8, r0
 8009420:	b928      	cbnz	r0, 800942e <_dtoa_r+0x8ce>
 8009422:	4b82      	ldr	r3, [pc, #520]	; (800962c <_dtoa_r+0xacc>)
 8009424:	4602      	mov	r2, r0
 8009426:	f240 21ef 	movw	r1, #751	; 0x2ef
 800942a:	f7ff bbb1 	b.w	8008b90 <_dtoa_r+0x30>
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	3202      	adds	r2, #2
 8009432:	0092      	lsls	r2, r2, #2
 8009434:	f107 010c 	add.w	r1, r7, #12
 8009438:	300c      	adds	r0, #12
 800943a:	f7ff fafa 	bl	8008a32 <memcpy>
 800943e:	2201      	movs	r2, #1
 8009440:	4641      	mov	r1, r8
 8009442:	4630      	mov	r0, r6
 8009444:	f000 fc08 	bl	8009c58 <__lshift>
 8009448:	9b01      	ldr	r3, [sp, #4]
 800944a:	3301      	adds	r3, #1
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	9b01      	ldr	r3, [sp, #4]
 8009450:	4453      	add	r3, sl
 8009452:	9308      	str	r3, [sp, #32]
 8009454:	9b02      	ldr	r3, [sp, #8]
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	46b9      	mov	r9, r7
 800945c:	9307      	str	r3, [sp, #28]
 800945e:	4607      	mov	r7, r0
 8009460:	9b04      	ldr	r3, [sp, #16]
 8009462:	4621      	mov	r1, r4
 8009464:	3b01      	subs	r3, #1
 8009466:	4628      	mov	r0, r5
 8009468:	9302      	str	r3, [sp, #8]
 800946a:	f7ff faf0 	bl	8008a4e <quorem>
 800946e:	4603      	mov	r3, r0
 8009470:	3330      	adds	r3, #48	; 0x30
 8009472:	9005      	str	r0, [sp, #20]
 8009474:	4649      	mov	r1, r9
 8009476:	4628      	mov	r0, r5
 8009478:	9309      	str	r3, [sp, #36]	; 0x24
 800947a:	f000 fc59 	bl	8009d30 <__mcmp>
 800947e:	463a      	mov	r2, r7
 8009480:	4682      	mov	sl, r0
 8009482:	4621      	mov	r1, r4
 8009484:	4630      	mov	r0, r6
 8009486:	f000 fc6f 	bl	8009d68 <__mdiff>
 800948a:	68c2      	ldr	r2, [r0, #12]
 800948c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948e:	4680      	mov	r8, r0
 8009490:	bb0a      	cbnz	r2, 80094d6 <_dtoa_r+0x976>
 8009492:	4601      	mov	r1, r0
 8009494:	4628      	mov	r0, r5
 8009496:	f000 fc4b 	bl	8009d30 <__mcmp>
 800949a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800949c:	4602      	mov	r2, r0
 800949e:	4641      	mov	r1, r8
 80094a0:	4630      	mov	r0, r6
 80094a2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80094a6:	f000 fa07 	bl	80098b8 <_Bfree>
 80094aa:	9b06      	ldr	r3, [sp, #24]
 80094ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80094b2:	ea43 0102 	orr.w	r1, r3, r2
 80094b6:	9b07      	ldr	r3, [sp, #28]
 80094b8:	4319      	orrs	r1, r3
 80094ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094bc:	d10d      	bne.n	80094da <_dtoa_r+0x97a>
 80094be:	2b39      	cmp	r3, #57	; 0x39
 80094c0:	d029      	beq.n	8009516 <_dtoa_r+0x9b6>
 80094c2:	f1ba 0f00 	cmp.w	sl, #0
 80094c6:	dd01      	ble.n	80094cc <_dtoa_r+0x96c>
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	3331      	adds	r3, #49	; 0x31
 80094cc:	9a02      	ldr	r2, [sp, #8]
 80094ce:	7013      	strb	r3, [r2, #0]
 80094d0:	e775      	b.n	80093be <_dtoa_r+0x85e>
 80094d2:	4638      	mov	r0, r7
 80094d4:	e7b8      	b.n	8009448 <_dtoa_r+0x8e8>
 80094d6:	2201      	movs	r2, #1
 80094d8:	e7e1      	b.n	800949e <_dtoa_r+0x93e>
 80094da:	f1ba 0f00 	cmp.w	sl, #0
 80094de:	db06      	blt.n	80094ee <_dtoa_r+0x98e>
 80094e0:	9906      	ldr	r1, [sp, #24]
 80094e2:	ea41 0a0a 	orr.w	sl, r1, sl
 80094e6:	9907      	ldr	r1, [sp, #28]
 80094e8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80094ec:	d120      	bne.n	8009530 <_dtoa_r+0x9d0>
 80094ee:	2a00      	cmp	r2, #0
 80094f0:	ddec      	ble.n	80094cc <_dtoa_r+0x96c>
 80094f2:	4629      	mov	r1, r5
 80094f4:	2201      	movs	r2, #1
 80094f6:	4630      	mov	r0, r6
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	f000 fbad 	bl	8009c58 <__lshift>
 80094fe:	4621      	mov	r1, r4
 8009500:	4605      	mov	r5, r0
 8009502:	f000 fc15 	bl	8009d30 <__mcmp>
 8009506:	2800      	cmp	r0, #0
 8009508:	9b04      	ldr	r3, [sp, #16]
 800950a:	dc02      	bgt.n	8009512 <_dtoa_r+0x9b2>
 800950c:	d1de      	bne.n	80094cc <_dtoa_r+0x96c>
 800950e:	07da      	lsls	r2, r3, #31
 8009510:	d5dc      	bpl.n	80094cc <_dtoa_r+0x96c>
 8009512:	2b39      	cmp	r3, #57	; 0x39
 8009514:	d1d8      	bne.n	80094c8 <_dtoa_r+0x968>
 8009516:	9a02      	ldr	r2, [sp, #8]
 8009518:	2339      	movs	r3, #57	; 0x39
 800951a:	7013      	strb	r3, [r2, #0]
 800951c:	4643      	mov	r3, r8
 800951e:	4698      	mov	r8, r3
 8009520:	3b01      	subs	r3, #1
 8009522:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009526:	2a39      	cmp	r2, #57	; 0x39
 8009528:	d051      	beq.n	80095ce <_dtoa_r+0xa6e>
 800952a:	3201      	adds	r2, #1
 800952c:	701a      	strb	r2, [r3, #0]
 800952e:	e746      	b.n	80093be <_dtoa_r+0x85e>
 8009530:	2a00      	cmp	r2, #0
 8009532:	dd03      	ble.n	800953c <_dtoa_r+0x9dc>
 8009534:	2b39      	cmp	r3, #57	; 0x39
 8009536:	d0ee      	beq.n	8009516 <_dtoa_r+0x9b6>
 8009538:	3301      	adds	r3, #1
 800953a:	e7c7      	b.n	80094cc <_dtoa_r+0x96c>
 800953c:	9a04      	ldr	r2, [sp, #16]
 800953e:	9908      	ldr	r1, [sp, #32]
 8009540:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009544:	428a      	cmp	r2, r1
 8009546:	d02b      	beq.n	80095a0 <_dtoa_r+0xa40>
 8009548:	4629      	mov	r1, r5
 800954a:	2300      	movs	r3, #0
 800954c:	220a      	movs	r2, #10
 800954e:	4630      	mov	r0, r6
 8009550:	f000 f9d4 	bl	80098fc <__multadd>
 8009554:	45b9      	cmp	r9, r7
 8009556:	4605      	mov	r5, r0
 8009558:	f04f 0300 	mov.w	r3, #0
 800955c:	f04f 020a 	mov.w	r2, #10
 8009560:	4649      	mov	r1, r9
 8009562:	4630      	mov	r0, r6
 8009564:	d107      	bne.n	8009576 <_dtoa_r+0xa16>
 8009566:	f000 f9c9 	bl	80098fc <__multadd>
 800956a:	4681      	mov	r9, r0
 800956c:	4607      	mov	r7, r0
 800956e:	9b04      	ldr	r3, [sp, #16]
 8009570:	3301      	adds	r3, #1
 8009572:	9304      	str	r3, [sp, #16]
 8009574:	e774      	b.n	8009460 <_dtoa_r+0x900>
 8009576:	f000 f9c1 	bl	80098fc <__multadd>
 800957a:	4639      	mov	r1, r7
 800957c:	4681      	mov	r9, r0
 800957e:	2300      	movs	r3, #0
 8009580:	220a      	movs	r2, #10
 8009582:	4630      	mov	r0, r6
 8009584:	f000 f9ba 	bl	80098fc <__multadd>
 8009588:	4607      	mov	r7, r0
 800958a:	e7f0      	b.n	800956e <_dtoa_r+0xa0e>
 800958c:	f1ba 0f00 	cmp.w	sl, #0
 8009590:	9a01      	ldr	r2, [sp, #4]
 8009592:	bfcc      	ite	gt
 8009594:	46d0      	movgt	r8, sl
 8009596:	f04f 0801 	movle.w	r8, #1
 800959a:	4490      	add	r8, r2
 800959c:	f04f 0900 	mov.w	r9, #0
 80095a0:	4629      	mov	r1, r5
 80095a2:	2201      	movs	r2, #1
 80095a4:	4630      	mov	r0, r6
 80095a6:	9302      	str	r3, [sp, #8]
 80095a8:	f000 fb56 	bl	8009c58 <__lshift>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4605      	mov	r5, r0
 80095b0:	f000 fbbe 	bl	8009d30 <__mcmp>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	dcb1      	bgt.n	800951c <_dtoa_r+0x9bc>
 80095b8:	d102      	bne.n	80095c0 <_dtoa_r+0xa60>
 80095ba:	9b02      	ldr	r3, [sp, #8]
 80095bc:	07db      	lsls	r3, r3, #31
 80095be:	d4ad      	bmi.n	800951c <_dtoa_r+0x9bc>
 80095c0:	4643      	mov	r3, r8
 80095c2:	4698      	mov	r8, r3
 80095c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095c8:	2a30      	cmp	r2, #48	; 0x30
 80095ca:	d0fa      	beq.n	80095c2 <_dtoa_r+0xa62>
 80095cc:	e6f7      	b.n	80093be <_dtoa_r+0x85e>
 80095ce:	9a01      	ldr	r2, [sp, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d1a4      	bne.n	800951e <_dtoa_r+0x9be>
 80095d4:	f10b 0b01 	add.w	fp, fp, #1
 80095d8:	2331      	movs	r3, #49	; 0x31
 80095da:	e778      	b.n	80094ce <_dtoa_r+0x96e>
 80095dc:	4b14      	ldr	r3, [pc, #80]	; (8009630 <_dtoa_r+0xad0>)
 80095de:	f7ff bb2a 	b.w	8008c36 <_dtoa_r+0xd6>
 80095e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f47f ab05 	bne.w	8008bf4 <_dtoa_r+0x94>
 80095ea:	4b12      	ldr	r3, [pc, #72]	; (8009634 <_dtoa_r+0xad4>)
 80095ec:	f7ff bb23 	b.w	8008c36 <_dtoa_r+0xd6>
 80095f0:	f1ba 0f00 	cmp.w	sl, #0
 80095f4:	dc03      	bgt.n	80095fe <_dtoa_r+0xa9e>
 80095f6:	9b06      	ldr	r3, [sp, #24]
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	f73f aec8 	bgt.w	800938e <_dtoa_r+0x82e>
 80095fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009602:	4621      	mov	r1, r4
 8009604:	4628      	mov	r0, r5
 8009606:	f7ff fa22 	bl	8008a4e <quorem>
 800960a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800960e:	f808 3b01 	strb.w	r3, [r8], #1
 8009612:	9a01      	ldr	r2, [sp, #4]
 8009614:	eba8 0202 	sub.w	r2, r8, r2
 8009618:	4592      	cmp	sl, r2
 800961a:	ddb7      	ble.n	800958c <_dtoa_r+0xa2c>
 800961c:	4629      	mov	r1, r5
 800961e:	2300      	movs	r3, #0
 8009620:	220a      	movs	r2, #10
 8009622:	4630      	mov	r0, r6
 8009624:	f000 f96a 	bl	80098fc <__multadd>
 8009628:	4605      	mov	r5, r0
 800962a:	e7ea      	b.n	8009602 <_dtoa_r+0xaa2>
 800962c:	0800a6c0 	.word	0x0800a6c0
 8009630:	0800a620 	.word	0x0800a620
 8009634:	0800a644 	.word	0x0800a644

08009638 <_free_r>:
 8009638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800963a:	2900      	cmp	r1, #0
 800963c:	d044      	beq.n	80096c8 <_free_r+0x90>
 800963e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009642:	9001      	str	r0, [sp, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	f1a1 0404 	sub.w	r4, r1, #4
 800964a:	bfb8      	it	lt
 800964c:	18e4      	addlt	r4, r4, r3
 800964e:	f000 f8e7 	bl	8009820 <__malloc_lock>
 8009652:	4a1e      	ldr	r2, [pc, #120]	; (80096cc <_free_r+0x94>)
 8009654:	9801      	ldr	r0, [sp, #4]
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	b933      	cbnz	r3, 8009668 <_free_r+0x30>
 800965a:	6063      	str	r3, [r4, #4]
 800965c:	6014      	str	r4, [r2, #0]
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009664:	f000 b8e2 	b.w	800982c <__malloc_unlock>
 8009668:	42a3      	cmp	r3, r4
 800966a:	d908      	bls.n	800967e <_free_r+0x46>
 800966c:	6825      	ldr	r5, [r4, #0]
 800966e:	1961      	adds	r1, r4, r5
 8009670:	428b      	cmp	r3, r1
 8009672:	bf01      	itttt	eq
 8009674:	6819      	ldreq	r1, [r3, #0]
 8009676:	685b      	ldreq	r3, [r3, #4]
 8009678:	1949      	addeq	r1, r1, r5
 800967a:	6021      	streq	r1, [r4, #0]
 800967c:	e7ed      	b.n	800965a <_free_r+0x22>
 800967e:	461a      	mov	r2, r3
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	b10b      	cbz	r3, 8009688 <_free_r+0x50>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d9fa      	bls.n	800967e <_free_r+0x46>
 8009688:	6811      	ldr	r1, [r2, #0]
 800968a:	1855      	adds	r5, r2, r1
 800968c:	42a5      	cmp	r5, r4
 800968e:	d10b      	bne.n	80096a8 <_free_r+0x70>
 8009690:	6824      	ldr	r4, [r4, #0]
 8009692:	4421      	add	r1, r4
 8009694:	1854      	adds	r4, r2, r1
 8009696:	42a3      	cmp	r3, r4
 8009698:	6011      	str	r1, [r2, #0]
 800969a:	d1e0      	bne.n	800965e <_free_r+0x26>
 800969c:	681c      	ldr	r4, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	6053      	str	r3, [r2, #4]
 80096a2:	440c      	add	r4, r1
 80096a4:	6014      	str	r4, [r2, #0]
 80096a6:	e7da      	b.n	800965e <_free_r+0x26>
 80096a8:	d902      	bls.n	80096b0 <_free_r+0x78>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	e7d6      	b.n	800965e <_free_r+0x26>
 80096b0:	6825      	ldr	r5, [r4, #0]
 80096b2:	1961      	adds	r1, r4, r5
 80096b4:	428b      	cmp	r3, r1
 80096b6:	bf04      	itt	eq
 80096b8:	6819      	ldreq	r1, [r3, #0]
 80096ba:	685b      	ldreq	r3, [r3, #4]
 80096bc:	6063      	str	r3, [r4, #4]
 80096be:	bf04      	itt	eq
 80096c0:	1949      	addeq	r1, r1, r5
 80096c2:	6021      	streq	r1, [r4, #0]
 80096c4:	6054      	str	r4, [r2, #4]
 80096c6:	e7ca      	b.n	800965e <_free_r+0x26>
 80096c8:	b003      	add	sp, #12
 80096ca:	bd30      	pop	{r4, r5, pc}
 80096cc:	20000ae4 	.word	0x20000ae4

080096d0 <malloc>:
 80096d0:	4b02      	ldr	r3, [pc, #8]	; (80096dc <malloc+0xc>)
 80096d2:	4601      	mov	r1, r0
 80096d4:	6818      	ldr	r0, [r3, #0]
 80096d6:	f000 b823 	b.w	8009720 <_malloc_r>
 80096da:	bf00      	nop
 80096dc:	20000074 	.word	0x20000074

080096e0 <sbrk_aligned>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	4e0e      	ldr	r6, [pc, #56]	; (800971c <sbrk_aligned+0x3c>)
 80096e4:	460c      	mov	r4, r1
 80096e6:	6831      	ldr	r1, [r6, #0]
 80096e8:	4605      	mov	r5, r0
 80096ea:	b911      	cbnz	r1, 80096f2 <sbrk_aligned+0x12>
 80096ec:	f000 fe96 	bl	800a41c <_sbrk_r>
 80096f0:	6030      	str	r0, [r6, #0]
 80096f2:	4621      	mov	r1, r4
 80096f4:	4628      	mov	r0, r5
 80096f6:	f000 fe91 	bl	800a41c <_sbrk_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	d00a      	beq.n	8009714 <sbrk_aligned+0x34>
 80096fe:	1cc4      	adds	r4, r0, #3
 8009700:	f024 0403 	bic.w	r4, r4, #3
 8009704:	42a0      	cmp	r0, r4
 8009706:	d007      	beq.n	8009718 <sbrk_aligned+0x38>
 8009708:	1a21      	subs	r1, r4, r0
 800970a:	4628      	mov	r0, r5
 800970c:	f000 fe86 	bl	800a41c <_sbrk_r>
 8009710:	3001      	adds	r0, #1
 8009712:	d101      	bne.n	8009718 <sbrk_aligned+0x38>
 8009714:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009718:	4620      	mov	r0, r4
 800971a:	bd70      	pop	{r4, r5, r6, pc}
 800971c:	20000ae8 	.word	0x20000ae8

08009720 <_malloc_r>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	1ccd      	adds	r5, r1, #3
 8009726:	f025 0503 	bic.w	r5, r5, #3
 800972a:	3508      	adds	r5, #8
 800972c:	2d0c      	cmp	r5, #12
 800972e:	bf38      	it	cc
 8009730:	250c      	movcc	r5, #12
 8009732:	2d00      	cmp	r5, #0
 8009734:	4607      	mov	r7, r0
 8009736:	db01      	blt.n	800973c <_malloc_r+0x1c>
 8009738:	42a9      	cmp	r1, r5
 800973a:	d905      	bls.n	8009748 <_malloc_r+0x28>
 800973c:	230c      	movs	r3, #12
 800973e:	603b      	str	r3, [r7, #0]
 8009740:	2600      	movs	r6, #0
 8009742:	4630      	mov	r0, r6
 8009744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009748:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800981c <_malloc_r+0xfc>
 800974c:	f000 f868 	bl	8009820 <__malloc_lock>
 8009750:	f8d8 3000 	ldr.w	r3, [r8]
 8009754:	461c      	mov	r4, r3
 8009756:	bb5c      	cbnz	r4, 80097b0 <_malloc_r+0x90>
 8009758:	4629      	mov	r1, r5
 800975a:	4638      	mov	r0, r7
 800975c:	f7ff ffc0 	bl	80096e0 <sbrk_aligned>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	4604      	mov	r4, r0
 8009764:	d155      	bne.n	8009812 <_malloc_r+0xf2>
 8009766:	f8d8 4000 	ldr.w	r4, [r8]
 800976a:	4626      	mov	r6, r4
 800976c:	2e00      	cmp	r6, #0
 800976e:	d145      	bne.n	80097fc <_malloc_r+0xdc>
 8009770:	2c00      	cmp	r4, #0
 8009772:	d048      	beq.n	8009806 <_malloc_r+0xe6>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	4631      	mov	r1, r6
 8009778:	4638      	mov	r0, r7
 800977a:	eb04 0903 	add.w	r9, r4, r3
 800977e:	f000 fe4d 	bl	800a41c <_sbrk_r>
 8009782:	4581      	cmp	r9, r0
 8009784:	d13f      	bne.n	8009806 <_malloc_r+0xe6>
 8009786:	6821      	ldr	r1, [r4, #0]
 8009788:	1a6d      	subs	r5, r5, r1
 800978a:	4629      	mov	r1, r5
 800978c:	4638      	mov	r0, r7
 800978e:	f7ff ffa7 	bl	80096e0 <sbrk_aligned>
 8009792:	3001      	adds	r0, #1
 8009794:	d037      	beq.n	8009806 <_malloc_r+0xe6>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	442b      	add	r3, r5
 800979a:	6023      	str	r3, [r4, #0]
 800979c:	f8d8 3000 	ldr.w	r3, [r8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d038      	beq.n	8009816 <_malloc_r+0xf6>
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	42a2      	cmp	r2, r4
 80097a8:	d12b      	bne.n	8009802 <_malloc_r+0xe2>
 80097aa:	2200      	movs	r2, #0
 80097ac:	605a      	str	r2, [r3, #4]
 80097ae:	e00f      	b.n	80097d0 <_malloc_r+0xb0>
 80097b0:	6822      	ldr	r2, [r4, #0]
 80097b2:	1b52      	subs	r2, r2, r5
 80097b4:	d41f      	bmi.n	80097f6 <_malloc_r+0xd6>
 80097b6:	2a0b      	cmp	r2, #11
 80097b8:	d917      	bls.n	80097ea <_malloc_r+0xca>
 80097ba:	1961      	adds	r1, r4, r5
 80097bc:	42a3      	cmp	r3, r4
 80097be:	6025      	str	r5, [r4, #0]
 80097c0:	bf18      	it	ne
 80097c2:	6059      	strne	r1, [r3, #4]
 80097c4:	6863      	ldr	r3, [r4, #4]
 80097c6:	bf08      	it	eq
 80097c8:	f8c8 1000 	streq.w	r1, [r8]
 80097cc:	5162      	str	r2, [r4, r5]
 80097ce:	604b      	str	r3, [r1, #4]
 80097d0:	4638      	mov	r0, r7
 80097d2:	f104 060b 	add.w	r6, r4, #11
 80097d6:	f000 f829 	bl	800982c <__malloc_unlock>
 80097da:	f026 0607 	bic.w	r6, r6, #7
 80097de:	1d23      	adds	r3, r4, #4
 80097e0:	1af2      	subs	r2, r6, r3
 80097e2:	d0ae      	beq.n	8009742 <_malloc_r+0x22>
 80097e4:	1b9b      	subs	r3, r3, r6
 80097e6:	50a3      	str	r3, [r4, r2]
 80097e8:	e7ab      	b.n	8009742 <_malloc_r+0x22>
 80097ea:	42a3      	cmp	r3, r4
 80097ec:	6862      	ldr	r2, [r4, #4]
 80097ee:	d1dd      	bne.n	80097ac <_malloc_r+0x8c>
 80097f0:	f8c8 2000 	str.w	r2, [r8]
 80097f4:	e7ec      	b.n	80097d0 <_malloc_r+0xb0>
 80097f6:	4623      	mov	r3, r4
 80097f8:	6864      	ldr	r4, [r4, #4]
 80097fa:	e7ac      	b.n	8009756 <_malloc_r+0x36>
 80097fc:	4634      	mov	r4, r6
 80097fe:	6876      	ldr	r6, [r6, #4]
 8009800:	e7b4      	b.n	800976c <_malloc_r+0x4c>
 8009802:	4613      	mov	r3, r2
 8009804:	e7cc      	b.n	80097a0 <_malloc_r+0x80>
 8009806:	230c      	movs	r3, #12
 8009808:	603b      	str	r3, [r7, #0]
 800980a:	4638      	mov	r0, r7
 800980c:	f000 f80e 	bl	800982c <__malloc_unlock>
 8009810:	e797      	b.n	8009742 <_malloc_r+0x22>
 8009812:	6025      	str	r5, [r4, #0]
 8009814:	e7dc      	b.n	80097d0 <_malloc_r+0xb0>
 8009816:	605b      	str	r3, [r3, #4]
 8009818:	deff      	udf	#255	; 0xff
 800981a:	bf00      	nop
 800981c:	20000ae4 	.word	0x20000ae4

08009820 <__malloc_lock>:
 8009820:	4801      	ldr	r0, [pc, #4]	; (8009828 <__malloc_lock+0x8>)
 8009822:	f7ff b904 	b.w	8008a2e <__retarget_lock_acquire_recursive>
 8009826:	bf00      	nop
 8009828:	20000ae0 	.word	0x20000ae0

0800982c <__malloc_unlock>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__malloc_unlock+0x8>)
 800982e:	f7ff b8ff 	b.w	8008a30 <__retarget_lock_release_recursive>
 8009832:	bf00      	nop
 8009834:	20000ae0 	.word	0x20000ae0

08009838 <_Balloc>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	69c6      	ldr	r6, [r0, #28]
 800983c:	4604      	mov	r4, r0
 800983e:	460d      	mov	r5, r1
 8009840:	b976      	cbnz	r6, 8009860 <_Balloc+0x28>
 8009842:	2010      	movs	r0, #16
 8009844:	f7ff ff44 	bl	80096d0 <malloc>
 8009848:	4602      	mov	r2, r0
 800984a:	61e0      	str	r0, [r4, #28]
 800984c:	b920      	cbnz	r0, 8009858 <_Balloc+0x20>
 800984e:	4b18      	ldr	r3, [pc, #96]	; (80098b0 <_Balloc+0x78>)
 8009850:	4818      	ldr	r0, [pc, #96]	; (80098b4 <_Balloc+0x7c>)
 8009852:	216b      	movs	r1, #107	; 0x6b
 8009854:	f000 fdf2 	bl	800a43c <__assert_func>
 8009858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800985c:	6006      	str	r6, [r0, #0]
 800985e:	60c6      	str	r6, [r0, #12]
 8009860:	69e6      	ldr	r6, [r4, #28]
 8009862:	68f3      	ldr	r3, [r6, #12]
 8009864:	b183      	cbz	r3, 8009888 <_Balloc+0x50>
 8009866:	69e3      	ldr	r3, [r4, #28]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800986e:	b9b8      	cbnz	r0, 80098a0 <_Balloc+0x68>
 8009870:	2101      	movs	r1, #1
 8009872:	fa01 f605 	lsl.w	r6, r1, r5
 8009876:	1d72      	adds	r2, r6, #5
 8009878:	0092      	lsls	r2, r2, #2
 800987a:	4620      	mov	r0, r4
 800987c:	f000 fdfc 	bl	800a478 <_calloc_r>
 8009880:	b160      	cbz	r0, 800989c <_Balloc+0x64>
 8009882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009886:	e00e      	b.n	80098a6 <_Balloc+0x6e>
 8009888:	2221      	movs	r2, #33	; 0x21
 800988a:	2104      	movs	r1, #4
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fdf3 	bl	800a478 <_calloc_r>
 8009892:	69e3      	ldr	r3, [r4, #28]
 8009894:	60f0      	str	r0, [r6, #12]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1e4      	bne.n	8009866 <_Balloc+0x2e>
 800989c:	2000      	movs	r0, #0
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	6802      	ldr	r2, [r0, #0]
 80098a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098a6:	2300      	movs	r3, #0
 80098a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098ac:	e7f7      	b.n	800989e <_Balloc+0x66>
 80098ae:	bf00      	nop
 80098b0:	0800a651 	.word	0x0800a651
 80098b4:	0800a6d1 	.word	0x0800a6d1

080098b8 <_Bfree>:
 80098b8:	b570      	push	{r4, r5, r6, lr}
 80098ba:	69c6      	ldr	r6, [r0, #28]
 80098bc:	4605      	mov	r5, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	b976      	cbnz	r6, 80098e0 <_Bfree+0x28>
 80098c2:	2010      	movs	r0, #16
 80098c4:	f7ff ff04 	bl	80096d0 <malloc>
 80098c8:	4602      	mov	r2, r0
 80098ca:	61e8      	str	r0, [r5, #28]
 80098cc:	b920      	cbnz	r0, 80098d8 <_Bfree+0x20>
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <_Bfree+0x3c>)
 80098d0:	4809      	ldr	r0, [pc, #36]	; (80098f8 <_Bfree+0x40>)
 80098d2:	218f      	movs	r1, #143	; 0x8f
 80098d4:	f000 fdb2 	bl	800a43c <__assert_func>
 80098d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098dc:	6006      	str	r6, [r0, #0]
 80098de:	60c6      	str	r6, [r0, #12]
 80098e0:	b13c      	cbz	r4, 80098f2 <_Bfree+0x3a>
 80098e2:	69eb      	ldr	r3, [r5, #28]
 80098e4:	6862      	ldr	r2, [r4, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098ec:	6021      	str	r1, [r4, #0]
 80098ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	0800a651 	.word	0x0800a651
 80098f8:	0800a6d1 	.word	0x0800a6d1

080098fc <__multadd>:
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	690d      	ldr	r5, [r1, #16]
 8009902:	4607      	mov	r7, r0
 8009904:	460c      	mov	r4, r1
 8009906:	461e      	mov	r6, r3
 8009908:	f101 0c14 	add.w	ip, r1, #20
 800990c:	2000      	movs	r0, #0
 800990e:	f8dc 3000 	ldr.w	r3, [ip]
 8009912:	b299      	uxth	r1, r3
 8009914:	fb02 6101 	mla	r1, r2, r1, r6
 8009918:	0c1e      	lsrs	r6, r3, #16
 800991a:	0c0b      	lsrs	r3, r1, #16
 800991c:	fb02 3306 	mla	r3, r2, r6, r3
 8009920:	b289      	uxth	r1, r1
 8009922:	3001      	adds	r0, #1
 8009924:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009928:	4285      	cmp	r5, r0
 800992a:	f84c 1b04 	str.w	r1, [ip], #4
 800992e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009932:	dcec      	bgt.n	800990e <__multadd+0x12>
 8009934:	b30e      	cbz	r6, 800997a <__multadd+0x7e>
 8009936:	68a3      	ldr	r3, [r4, #8]
 8009938:	42ab      	cmp	r3, r5
 800993a:	dc19      	bgt.n	8009970 <__multadd+0x74>
 800993c:	6861      	ldr	r1, [r4, #4]
 800993e:	4638      	mov	r0, r7
 8009940:	3101      	adds	r1, #1
 8009942:	f7ff ff79 	bl	8009838 <_Balloc>
 8009946:	4680      	mov	r8, r0
 8009948:	b928      	cbnz	r0, 8009956 <__multadd+0x5a>
 800994a:	4602      	mov	r2, r0
 800994c:	4b0c      	ldr	r3, [pc, #48]	; (8009980 <__multadd+0x84>)
 800994e:	480d      	ldr	r0, [pc, #52]	; (8009984 <__multadd+0x88>)
 8009950:	21ba      	movs	r1, #186	; 0xba
 8009952:	f000 fd73 	bl	800a43c <__assert_func>
 8009956:	6922      	ldr	r2, [r4, #16]
 8009958:	3202      	adds	r2, #2
 800995a:	f104 010c 	add.w	r1, r4, #12
 800995e:	0092      	lsls	r2, r2, #2
 8009960:	300c      	adds	r0, #12
 8009962:	f7ff f866 	bl	8008a32 <memcpy>
 8009966:	4621      	mov	r1, r4
 8009968:	4638      	mov	r0, r7
 800996a:	f7ff ffa5 	bl	80098b8 <_Bfree>
 800996e:	4644      	mov	r4, r8
 8009970:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009974:	3501      	adds	r5, #1
 8009976:	615e      	str	r6, [r3, #20]
 8009978:	6125      	str	r5, [r4, #16]
 800997a:	4620      	mov	r0, r4
 800997c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009980:	0800a6c0 	.word	0x0800a6c0
 8009984:	0800a6d1 	.word	0x0800a6d1

08009988 <__hi0bits>:
 8009988:	0c03      	lsrs	r3, r0, #16
 800998a:	041b      	lsls	r3, r3, #16
 800998c:	b9d3      	cbnz	r3, 80099c4 <__hi0bits+0x3c>
 800998e:	0400      	lsls	r0, r0, #16
 8009990:	2310      	movs	r3, #16
 8009992:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009996:	bf04      	itt	eq
 8009998:	0200      	lsleq	r0, r0, #8
 800999a:	3308      	addeq	r3, #8
 800999c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099a0:	bf04      	itt	eq
 80099a2:	0100      	lsleq	r0, r0, #4
 80099a4:	3304      	addeq	r3, #4
 80099a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099aa:	bf04      	itt	eq
 80099ac:	0080      	lsleq	r0, r0, #2
 80099ae:	3302      	addeq	r3, #2
 80099b0:	2800      	cmp	r0, #0
 80099b2:	db05      	blt.n	80099c0 <__hi0bits+0x38>
 80099b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099b8:	f103 0301 	add.w	r3, r3, #1
 80099bc:	bf08      	it	eq
 80099be:	2320      	moveq	r3, #32
 80099c0:	4618      	mov	r0, r3
 80099c2:	4770      	bx	lr
 80099c4:	2300      	movs	r3, #0
 80099c6:	e7e4      	b.n	8009992 <__hi0bits+0xa>

080099c8 <__lo0bits>:
 80099c8:	6803      	ldr	r3, [r0, #0]
 80099ca:	f013 0207 	ands.w	r2, r3, #7
 80099ce:	d00c      	beq.n	80099ea <__lo0bits+0x22>
 80099d0:	07d9      	lsls	r1, r3, #31
 80099d2:	d422      	bmi.n	8009a1a <__lo0bits+0x52>
 80099d4:	079a      	lsls	r2, r3, #30
 80099d6:	bf49      	itett	mi
 80099d8:	085b      	lsrmi	r3, r3, #1
 80099da:	089b      	lsrpl	r3, r3, #2
 80099dc:	6003      	strmi	r3, [r0, #0]
 80099de:	2201      	movmi	r2, #1
 80099e0:	bf5c      	itt	pl
 80099e2:	6003      	strpl	r3, [r0, #0]
 80099e4:	2202      	movpl	r2, #2
 80099e6:	4610      	mov	r0, r2
 80099e8:	4770      	bx	lr
 80099ea:	b299      	uxth	r1, r3
 80099ec:	b909      	cbnz	r1, 80099f2 <__lo0bits+0x2a>
 80099ee:	0c1b      	lsrs	r3, r3, #16
 80099f0:	2210      	movs	r2, #16
 80099f2:	b2d9      	uxtb	r1, r3
 80099f4:	b909      	cbnz	r1, 80099fa <__lo0bits+0x32>
 80099f6:	3208      	adds	r2, #8
 80099f8:	0a1b      	lsrs	r3, r3, #8
 80099fa:	0719      	lsls	r1, r3, #28
 80099fc:	bf04      	itt	eq
 80099fe:	091b      	lsreq	r3, r3, #4
 8009a00:	3204      	addeq	r2, #4
 8009a02:	0799      	lsls	r1, r3, #30
 8009a04:	bf04      	itt	eq
 8009a06:	089b      	lsreq	r3, r3, #2
 8009a08:	3202      	addeq	r2, #2
 8009a0a:	07d9      	lsls	r1, r3, #31
 8009a0c:	d403      	bmi.n	8009a16 <__lo0bits+0x4e>
 8009a0e:	085b      	lsrs	r3, r3, #1
 8009a10:	f102 0201 	add.w	r2, r2, #1
 8009a14:	d003      	beq.n	8009a1e <__lo0bits+0x56>
 8009a16:	6003      	str	r3, [r0, #0]
 8009a18:	e7e5      	b.n	80099e6 <__lo0bits+0x1e>
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	e7e3      	b.n	80099e6 <__lo0bits+0x1e>
 8009a1e:	2220      	movs	r2, #32
 8009a20:	e7e1      	b.n	80099e6 <__lo0bits+0x1e>
	...

08009a24 <__i2b>:
 8009a24:	b510      	push	{r4, lr}
 8009a26:	460c      	mov	r4, r1
 8009a28:	2101      	movs	r1, #1
 8009a2a:	f7ff ff05 	bl	8009838 <_Balloc>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	b928      	cbnz	r0, 8009a3e <__i2b+0x1a>
 8009a32:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <__i2b+0x24>)
 8009a34:	4805      	ldr	r0, [pc, #20]	; (8009a4c <__i2b+0x28>)
 8009a36:	f240 1145 	movw	r1, #325	; 0x145
 8009a3a:	f000 fcff 	bl	800a43c <__assert_func>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	6144      	str	r4, [r0, #20]
 8009a42:	6103      	str	r3, [r0, #16]
 8009a44:	bd10      	pop	{r4, pc}
 8009a46:	bf00      	nop
 8009a48:	0800a6c0 	.word	0x0800a6c0
 8009a4c:	0800a6d1 	.word	0x0800a6d1

08009a50 <__multiply>:
 8009a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	4691      	mov	r9, r2
 8009a56:	690a      	ldr	r2, [r1, #16]
 8009a58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	bfb8      	it	lt
 8009a60:	460b      	movlt	r3, r1
 8009a62:	460c      	mov	r4, r1
 8009a64:	bfbc      	itt	lt
 8009a66:	464c      	movlt	r4, r9
 8009a68:	4699      	movlt	r9, r3
 8009a6a:	6927      	ldr	r7, [r4, #16]
 8009a6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a70:	68a3      	ldr	r3, [r4, #8]
 8009a72:	6861      	ldr	r1, [r4, #4]
 8009a74:	eb07 060a 	add.w	r6, r7, sl
 8009a78:	42b3      	cmp	r3, r6
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	bfb8      	it	lt
 8009a7e:	3101      	addlt	r1, #1
 8009a80:	f7ff feda 	bl	8009838 <_Balloc>
 8009a84:	b930      	cbnz	r0, 8009a94 <__multiply+0x44>
 8009a86:	4602      	mov	r2, r0
 8009a88:	4b44      	ldr	r3, [pc, #272]	; (8009b9c <__multiply+0x14c>)
 8009a8a:	4845      	ldr	r0, [pc, #276]	; (8009ba0 <__multiply+0x150>)
 8009a8c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009a90:	f000 fcd4 	bl	800a43c <__assert_func>
 8009a94:	f100 0514 	add.w	r5, r0, #20
 8009a98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	4543      	cmp	r3, r8
 8009aa2:	d321      	bcc.n	8009ae8 <__multiply+0x98>
 8009aa4:	f104 0314 	add.w	r3, r4, #20
 8009aa8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009aac:	f109 0314 	add.w	r3, r9, #20
 8009ab0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ab4:	9202      	str	r2, [sp, #8]
 8009ab6:	1b3a      	subs	r2, r7, r4
 8009ab8:	3a15      	subs	r2, #21
 8009aba:	f022 0203 	bic.w	r2, r2, #3
 8009abe:	3204      	adds	r2, #4
 8009ac0:	f104 0115 	add.w	r1, r4, #21
 8009ac4:	428f      	cmp	r7, r1
 8009ac6:	bf38      	it	cc
 8009ac8:	2204      	movcc	r2, #4
 8009aca:	9201      	str	r2, [sp, #4]
 8009acc:	9a02      	ldr	r2, [sp, #8]
 8009ace:	9303      	str	r3, [sp, #12]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d80c      	bhi.n	8009aee <__multiply+0x9e>
 8009ad4:	2e00      	cmp	r6, #0
 8009ad6:	dd03      	ble.n	8009ae0 <__multiply+0x90>
 8009ad8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d05b      	beq.n	8009b98 <__multiply+0x148>
 8009ae0:	6106      	str	r6, [r0, #16]
 8009ae2:	b005      	add	sp, #20
 8009ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	f843 2b04 	str.w	r2, [r3], #4
 8009aec:	e7d8      	b.n	8009aa0 <__multiply+0x50>
 8009aee:	f8b3 a000 	ldrh.w	sl, [r3]
 8009af2:	f1ba 0f00 	cmp.w	sl, #0
 8009af6:	d024      	beq.n	8009b42 <__multiply+0xf2>
 8009af8:	f104 0e14 	add.w	lr, r4, #20
 8009afc:	46a9      	mov	r9, r5
 8009afe:	f04f 0c00 	mov.w	ip, #0
 8009b02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b06:	f8d9 1000 	ldr.w	r1, [r9]
 8009b0a:	fa1f fb82 	uxth.w	fp, r2
 8009b0e:	b289      	uxth	r1, r1
 8009b10:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b18:	f8d9 2000 	ldr.w	r2, [r9]
 8009b1c:	4461      	add	r1, ip
 8009b1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b22:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b2a:	b289      	uxth	r1, r1
 8009b2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b30:	4577      	cmp	r7, lr
 8009b32:	f849 1b04 	str.w	r1, [r9], #4
 8009b36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b3a:	d8e2      	bhi.n	8009b02 <__multiply+0xb2>
 8009b3c:	9a01      	ldr	r2, [sp, #4]
 8009b3e:	f845 c002 	str.w	ip, [r5, r2]
 8009b42:	9a03      	ldr	r2, [sp, #12]
 8009b44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	f1b9 0f00 	cmp.w	r9, #0
 8009b4e:	d021      	beq.n	8009b94 <__multiply+0x144>
 8009b50:	6829      	ldr	r1, [r5, #0]
 8009b52:	f104 0c14 	add.w	ip, r4, #20
 8009b56:	46ae      	mov	lr, r5
 8009b58:	f04f 0a00 	mov.w	sl, #0
 8009b5c:	f8bc b000 	ldrh.w	fp, [ip]
 8009b60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b64:	fb09 220b 	mla	r2, r9, fp, r2
 8009b68:	4452      	add	r2, sl
 8009b6a:	b289      	uxth	r1, r1
 8009b6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b70:	f84e 1b04 	str.w	r1, [lr], #4
 8009b74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b7c:	f8be 1000 	ldrh.w	r1, [lr]
 8009b80:	fb09 110a 	mla	r1, r9, sl, r1
 8009b84:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009b88:	4567      	cmp	r7, ip
 8009b8a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b8e:	d8e5      	bhi.n	8009b5c <__multiply+0x10c>
 8009b90:	9a01      	ldr	r2, [sp, #4]
 8009b92:	50a9      	str	r1, [r5, r2]
 8009b94:	3504      	adds	r5, #4
 8009b96:	e799      	b.n	8009acc <__multiply+0x7c>
 8009b98:	3e01      	subs	r6, #1
 8009b9a:	e79b      	b.n	8009ad4 <__multiply+0x84>
 8009b9c:	0800a6c0 	.word	0x0800a6c0
 8009ba0:	0800a6d1 	.word	0x0800a6d1

08009ba4 <__pow5mult>:
 8009ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	4615      	mov	r5, r2
 8009baa:	f012 0203 	ands.w	r2, r2, #3
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460f      	mov	r7, r1
 8009bb2:	d007      	beq.n	8009bc4 <__pow5mult+0x20>
 8009bb4:	4c25      	ldr	r4, [pc, #148]	; (8009c4c <__pow5mult+0xa8>)
 8009bb6:	3a01      	subs	r2, #1
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bbe:	f7ff fe9d 	bl	80098fc <__multadd>
 8009bc2:	4607      	mov	r7, r0
 8009bc4:	10ad      	asrs	r5, r5, #2
 8009bc6:	d03d      	beq.n	8009c44 <__pow5mult+0xa0>
 8009bc8:	69f4      	ldr	r4, [r6, #28]
 8009bca:	b97c      	cbnz	r4, 8009bec <__pow5mult+0x48>
 8009bcc:	2010      	movs	r0, #16
 8009bce:	f7ff fd7f 	bl	80096d0 <malloc>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	61f0      	str	r0, [r6, #28]
 8009bd6:	b928      	cbnz	r0, 8009be4 <__pow5mult+0x40>
 8009bd8:	4b1d      	ldr	r3, [pc, #116]	; (8009c50 <__pow5mult+0xac>)
 8009bda:	481e      	ldr	r0, [pc, #120]	; (8009c54 <__pow5mult+0xb0>)
 8009bdc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009be0:	f000 fc2c 	bl	800a43c <__assert_func>
 8009be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009be8:	6004      	str	r4, [r0, #0]
 8009bea:	60c4      	str	r4, [r0, #12]
 8009bec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bf4:	b94c      	cbnz	r4, 8009c0a <__pow5mult+0x66>
 8009bf6:	f240 2171 	movw	r1, #625	; 0x271
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f7ff ff12 	bl	8009a24 <__i2b>
 8009c00:	2300      	movs	r3, #0
 8009c02:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c06:	4604      	mov	r4, r0
 8009c08:	6003      	str	r3, [r0, #0]
 8009c0a:	f04f 0900 	mov.w	r9, #0
 8009c0e:	07eb      	lsls	r3, r5, #31
 8009c10:	d50a      	bpl.n	8009c28 <__pow5mult+0x84>
 8009c12:	4639      	mov	r1, r7
 8009c14:	4622      	mov	r2, r4
 8009c16:	4630      	mov	r0, r6
 8009c18:	f7ff ff1a 	bl	8009a50 <__multiply>
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	4680      	mov	r8, r0
 8009c20:	4630      	mov	r0, r6
 8009c22:	f7ff fe49 	bl	80098b8 <_Bfree>
 8009c26:	4647      	mov	r7, r8
 8009c28:	106d      	asrs	r5, r5, #1
 8009c2a:	d00b      	beq.n	8009c44 <__pow5mult+0xa0>
 8009c2c:	6820      	ldr	r0, [r4, #0]
 8009c2e:	b938      	cbnz	r0, 8009c40 <__pow5mult+0x9c>
 8009c30:	4622      	mov	r2, r4
 8009c32:	4621      	mov	r1, r4
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff ff0b 	bl	8009a50 <__multiply>
 8009c3a:	6020      	str	r0, [r4, #0]
 8009c3c:	f8c0 9000 	str.w	r9, [r0]
 8009c40:	4604      	mov	r4, r0
 8009c42:	e7e4      	b.n	8009c0e <__pow5mult+0x6a>
 8009c44:	4638      	mov	r0, r7
 8009c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c4a:	bf00      	nop
 8009c4c:	0800a820 	.word	0x0800a820
 8009c50:	0800a651 	.word	0x0800a651
 8009c54:	0800a6d1 	.word	0x0800a6d1

08009c58 <__lshift>:
 8009c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	6849      	ldr	r1, [r1, #4]
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c66:	68a3      	ldr	r3, [r4, #8]
 8009c68:	4607      	mov	r7, r0
 8009c6a:	4691      	mov	r9, r2
 8009c6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c70:	f108 0601 	add.w	r6, r8, #1
 8009c74:	42b3      	cmp	r3, r6
 8009c76:	db0b      	blt.n	8009c90 <__lshift+0x38>
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f7ff fddd 	bl	8009838 <_Balloc>
 8009c7e:	4605      	mov	r5, r0
 8009c80:	b948      	cbnz	r0, 8009c96 <__lshift+0x3e>
 8009c82:	4602      	mov	r2, r0
 8009c84:	4b28      	ldr	r3, [pc, #160]	; (8009d28 <__lshift+0xd0>)
 8009c86:	4829      	ldr	r0, [pc, #164]	; (8009d2c <__lshift+0xd4>)
 8009c88:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009c8c:	f000 fbd6 	bl	800a43c <__assert_func>
 8009c90:	3101      	adds	r1, #1
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	e7ee      	b.n	8009c74 <__lshift+0x1c>
 8009c96:	2300      	movs	r3, #0
 8009c98:	f100 0114 	add.w	r1, r0, #20
 8009c9c:	f100 0210 	add.w	r2, r0, #16
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	4553      	cmp	r3, sl
 8009ca4:	db33      	blt.n	8009d0e <__lshift+0xb6>
 8009ca6:	6920      	ldr	r0, [r4, #16]
 8009ca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cac:	f104 0314 	add.w	r3, r4, #20
 8009cb0:	f019 091f 	ands.w	r9, r9, #31
 8009cb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cbc:	d02b      	beq.n	8009d16 <__lshift+0xbe>
 8009cbe:	f1c9 0e20 	rsb	lr, r9, #32
 8009cc2:	468a      	mov	sl, r1
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	fa00 f009 	lsl.w	r0, r0, r9
 8009ccc:	4310      	orrs	r0, r2
 8009cce:	f84a 0b04 	str.w	r0, [sl], #4
 8009cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd6:	459c      	cmp	ip, r3
 8009cd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cdc:	d8f3      	bhi.n	8009cc6 <__lshift+0x6e>
 8009cde:	ebac 0304 	sub.w	r3, ip, r4
 8009ce2:	3b15      	subs	r3, #21
 8009ce4:	f023 0303 	bic.w	r3, r3, #3
 8009ce8:	3304      	adds	r3, #4
 8009cea:	f104 0015 	add.w	r0, r4, #21
 8009cee:	4584      	cmp	ip, r0
 8009cf0:	bf38      	it	cc
 8009cf2:	2304      	movcc	r3, #4
 8009cf4:	50ca      	str	r2, [r1, r3]
 8009cf6:	b10a      	cbz	r2, 8009cfc <__lshift+0xa4>
 8009cf8:	f108 0602 	add.w	r6, r8, #2
 8009cfc:	3e01      	subs	r6, #1
 8009cfe:	4638      	mov	r0, r7
 8009d00:	612e      	str	r6, [r5, #16]
 8009d02:	4621      	mov	r1, r4
 8009d04:	f7ff fdd8 	bl	80098b8 <_Bfree>
 8009d08:	4628      	mov	r0, r5
 8009d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d12:	3301      	adds	r3, #1
 8009d14:	e7c5      	b.n	8009ca2 <__lshift+0x4a>
 8009d16:	3904      	subs	r1, #4
 8009d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d20:	459c      	cmp	ip, r3
 8009d22:	d8f9      	bhi.n	8009d18 <__lshift+0xc0>
 8009d24:	e7ea      	b.n	8009cfc <__lshift+0xa4>
 8009d26:	bf00      	nop
 8009d28:	0800a6c0 	.word	0x0800a6c0
 8009d2c:	0800a6d1 	.word	0x0800a6d1

08009d30 <__mcmp>:
 8009d30:	b530      	push	{r4, r5, lr}
 8009d32:	6902      	ldr	r2, [r0, #16]
 8009d34:	690c      	ldr	r4, [r1, #16]
 8009d36:	1b12      	subs	r2, r2, r4
 8009d38:	d10e      	bne.n	8009d58 <__mcmp+0x28>
 8009d3a:	f100 0314 	add.w	r3, r0, #20
 8009d3e:	3114      	adds	r1, #20
 8009d40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d50:	42a5      	cmp	r5, r4
 8009d52:	d003      	beq.n	8009d5c <__mcmp+0x2c>
 8009d54:	d305      	bcc.n	8009d62 <__mcmp+0x32>
 8009d56:	2201      	movs	r2, #1
 8009d58:	4610      	mov	r0, r2
 8009d5a:	bd30      	pop	{r4, r5, pc}
 8009d5c:	4283      	cmp	r3, r0
 8009d5e:	d3f3      	bcc.n	8009d48 <__mcmp+0x18>
 8009d60:	e7fa      	b.n	8009d58 <__mcmp+0x28>
 8009d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d66:	e7f7      	b.n	8009d58 <__mcmp+0x28>

08009d68 <__mdiff>:
 8009d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	4606      	mov	r6, r0
 8009d70:	4611      	mov	r1, r2
 8009d72:	4620      	mov	r0, r4
 8009d74:	4690      	mov	r8, r2
 8009d76:	f7ff ffdb 	bl	8009d30 <__mcmp>
 8009d7a:	1e05      	subs	r5, r0, #0
 8009d7c:	d110      	bne.n	8009da0 <__mdiff+0x38>
 8009d7e:	4629      	mov	r1, r5
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff fd59 	bl	8009838 <_Balloc>
 8009d86:	b930      	cbnz	r0, 8009d96 <__mdiff+0x2e>
 8009d88:	4b3a      	ldr	r3, [pc, #232]	; (8009e74 <__mdiff+0x10c>)
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	f240 2137 	movw	r1, #567	; 0x237
 8009d90:	4839      	ldr	r0, [pc, #228]	; (8009e78 <__mdiff+0x110>)
 8009d92:	f000 fb53 	bl	800a43c <__assert_func>
 8009d96:	2301      	movs	r3, #1
 8009d98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	bfa4      	itt	ge
 8009da2:	4643      	movge	r3, r8
 8009da4:	46a0      	movge	r8, r4
 8009da6:	4630      	mov	r0, r6
 8009da8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009dac:	bfa6      	itte	ge
 8009dae:	461c      	movge	r4, r3
 8009db0:	2500      	movge	r5, #0
 8009db2:	2501      	movlt	r5, #1
 8009db4:	f7ff fd40 	bl	8009838 <_Balloc>
 8009db8:	b920      	cbnz	r0, 8009dc4 <__mdiff+0x5c>
 8009dba:	4b2e      	ldr	r3, [pc, #184]	; (8009e74 <__mdiff+0x10c>)
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	f240 2145 	movw	r1, #581	; 0x245
 8009dc2:	e7e5      	b.n	8009d90 <__mdiff+0x28>
 8009dc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009dc8:	6926      	ldr	r6, [r4, #16]
 8009dca:	60c5      	str	r5, [r0, #12]
 8009dcc:	f104 0914 	add.w	r9, r4, #20
 8009dd0:	f108 0514 	add.w	r5, r8, #20
 8009dd4:	f100 0e14 	add.w	lr, r0, #20
 8009dd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ddc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009de0:	f108 0210 	add.w	r2, r8, #16
 8009de4:	46f2      	mov	sl, lr
 8009de6:	2100      	movs	r1, #0
 8009de8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009df0:	fa11 f88b 	uxtah	r8, r1, fp
 8009df4:	b299      	uxth	r1, r3
 8009df6:	0c1b      	lsrs	r3, r3, #16
 8009df8:	eba8 0801 	sub.w	r8, r8, r1
 8009dfc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e00:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e04:	fa1f f888 	uxth.w	r8, r8
 8009e08:	1419      	asrs	r1, r3, #16
 8009e0a:	454e      	cmp	r6, r9
 8009e0c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e10:	f84a 3b04 	str.w	r3, [sl], #4
 8009e14:	d8e8      	bhi.n	8009de8 <__mdiff+0x80>
 8009e16:	1b33      	subs	r3, r6, r4
 8009e18:	3b15      	subs	r3, #21
 8009e1a:	f023 0303 	bic.w	r3, r3, #3
 8009e1e:	3304      	adds	r3, #4
 8009e20:	3415      	adds	r4, #21
 8009e22:	42a6      	cmp	r6, r4
 8009e24:	bf38      	it	cc
 8009e26:	2304      	movcc	r3, #4
 8009e28:	441d      	add	r5, r3
 8009e2a:	4473      	add	r3, lr
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	462e      	mov	r6, r5
 8009e30:	4566      	cmp	r6, ip
 8009e32:	d30e      	bcc.n	8009e52 <__mdiff+0xea>
 8009e34:	f10c 0203 	add.w	r2, ip, #3
 8009e38:	1b52      	subs	r2, r2, r5
 8009e3a:	f022 0203 	bic.w	r2, r2, #3
 8009e3e:	3d03      	subs	r5, #3
 8009e40:	45ac      	cmp	ip, r5
 8009e42:	bf38      	it	cc
 8009e44:	2200      	movcc	r2, #0
 8009e46:	4413      	add	r3, r2
 8009e48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009e4c:	b17a      	cbz	r2, 8009e6e <__mdiff+0x106>
 8009e4e:	6107      	str	r7, [r0, #16]
 8009e50:	e7a4      	b.n	8009d9c <__mdiff+0x34>
 8009e52:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e56:	fa11 f288 	uxtah	r2, r1, r8
 8009e5a:	1414      	asrs	r4, r2, #16
 8009e5c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e60:	b292      	uxth	r2, r2
 8009e62:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e66:	f84e 2b04 	str.w	r2, [lr], #4
 8009e6a:	1421      	asrs	r1, r4, #16
 8009e6c:	e7e0      	b.n	8009e30 <__mdiff+0xc8>
 8009e6e:	3f01      	subs	r7, #1
 8009e70:	e7ea      	b.n	8009e48 <__mdiff+0xe0>
 8009e72:	bf00      	nop
 8009e74:	0800a6c0 	.word	0x0800a6c0
 8009e78:	0800a6d1 	.word	0x0800a6d1

08009e7c <__d2b>:
 8009e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e80:	460f      	mov	r7, r1
 8009e82:	2101      	movs	r1, #1
 8009e84:	ec59 8b10 	vmov	r8, r9, d0
 8009e88:	4616      	mov	r6, r2
 8009e8a:	f7ff fcd5 	bl	8009838 <_Balloc>
 8009e8e:	4604      	mov	r4, r0
 8009e90:	b930      	cbnz	r0, 8009ea0 <__d2b+0x24>
 8009e92:	4602      	mov	r2, r0
 8009e94:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <__d2b+0xac>)
 8009e96:	4825      	ldr	r0, [pc, #148]	; (8009f2c <__d2b+0xb0>)
 8009e98:	f240 310f 	movw	r1, #783	; 0x30f
 8009e9c:	f000 face 	bl	800a43c <__assert_func>
 8009ea0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ea4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ea8:	bb2d      	cbnz	r5, 8009ef6 <__d2b+0x7a>
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	f1b8 0300 	subs.w	r3, r8, #0
 8009eb0:	d026      	beq.n	8009f00 <__d2b+0x84>
 8009eb2:	4668      	mov	r0, sp
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	f7ff fd87 	bl	80099c8 <__lo0bits>
 8009eba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ebe:	b1e8      	cbz	r0, 8009efc <__d2b+0x80>
 8009ec0:	f1c0 0320 	rsb	r3, r0, #32
 8009ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec8:	430b      	orrs	r3, r1
 8009eca:	40c2      	lsrs	r2, r0
 8009ecc:	6163      	str	r3, [r4, #20]
 8009ece:	9201      	str	r2, [sp, #4]
 8009ed0:	9b01      	ldr	r3, [sp, #4]
 8009ed2:	61a3      	str	r3, [r4, #24]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	bf14      	ite	ne
 8009ed8:	2202      	movne	r2, #2
 8009eda:	2201      	moveq	r2, #1
 8009edc:	6122      	str	r2, [r4, #16]
 8009ede:	b1bd      	cbz	r5, 8009f10 <__d2b+0x94>
 8009ee0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ee4:	4405      	add	r5, r0
 8009ee6:	603d      	str	r5, [r7, #0]
 8009ee8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009eec:	6030      	str	r0, [r6, #0]
 8009eee:	4620      	mov	r0, r4
 8009ef0:	b003      	add	sp, #12
 8009ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009efa:	e7d6      	b.n	8009eaa <__d2b+0x2e>
 8009efc:	6161      	str	r1, [r4, #20]
 8009efe:	e7e7      	b.n	8009ed0 <__d2b+0x54>
 8009f00:	a801      	add	r0, sp, #4
 8009f02:	f7ff fd61 	bl	80099c8 <__lo0bits>
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	6163      	str	r3, [r4, #20]
 8009f0a:	3020      	adds	r0, #32
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	e7e5      	b.n	8009edc <__d2b+0x60>
 8009f10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f18:	6038      	str	r0, [r7, #0]
 8009f1a:	6918      	ldr	r0, [r3, #16]
 8009f1c:	f7ff fd34 	bl	8009988 <__hi0bits>
 8009f20:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f24:	e7e2      	b.n	8009eec <__d2b+0x70>
 8009f26:	bf00      	nop
 8009f28:	0800a6c0 	.word	0x0800a6c0
 8009f2c:	0800a6d1 	.word	0x0800a6d1

08009f30 <__sfputc_r>:
 8009f30:	6893      	ldr	r3, [r2, #8]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	b410      	push	{r4}
 8009f38:	6093      	str	r3, [r2, #8]
 8009f3a:	da08      	bge.n	8009f4e <__sfputc_r+0x1e>
 8009f3c:	6994      	ldr	r4, [r2, #24]
 8009f3e:	42a3      	cmp	r3, r4
 8009f40:	db01      	blt.n	8009f46 <__sfputc_r+0x16>
 8009f42:	290a      	cmp	r1, #10
 8009f44:	d103      	bne.n	8009f4e <__sfputc_r+0x1e>
 8009f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f4a:	f7fe bc5e 	b.w	800880a <__swbuf_r>
 8009f4e:	6813      	ldr	r3, [r2, #0]
 8009f50:	1c58      	adds	r0, r3, #1
 8009f52:	6010      	str	r0, [r2, #0]
 8009f54:	7019      	strb	r1, [r3, #0]
 8009f56:	4608      	mov	r0, r1
 8009f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <__sfputs_r>:
 8009f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f60:	4606      	mov	r6, r0
 8009f62:	460f      	mov	r7, r1
 8009f64:	4614      	mov	r4, r2
 8009f66:	18d5      	adds	r5, r2, r3
 8009f68:	42ac      	cmp	r4, r5
 8009f6a:	d101      	bne.n	8009f70 <__sfputs_r+0x12>
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	e007      	b.n	8009f80 <__sfputs_r+0x22>
 8009f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f74:	463a      	mov	r2, r7
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7ff ffda 	bl	8009f30 <__sfputc_r>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d1f3      	bne.n	8009f68 <__sfputs_r+0xa>
 8009f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f84 <_vfiprintf_r>:
 8009f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	460d      	mov	r5, r1
 8009f8a:	b09d      	sub	sp, #116	; 0x74
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	4698      	mov	r8, r3
 8009f90:	4606      	mov	r6, r0
 8009f92:	b118      	cbz	r0, 8009f9c <_vfiprintf_r+0x18>
 8009f94:	6a03      	ldr	r3, [r0, #32]
 8009f96:	b90b      	cbnz	r3, 8009f9c <_vfiprintf_r+0x18>
 8009f98:	f7fe fb50 	bl	800863c <__sinit>
 8009f9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f9e:	07d9      	lsls	r1, r3, #31
 8009fa0:	d405      	bmi.n	8009fae <_vfiprintf_r+0x2a>
 8009fa2:	89ab      	ldrh	r3, [r5, #12]
 8009fa4:	059a      	lsls	r2, r3, #22
 8009fa6:	d402      	bmi.n	8009fae <_vfiprintf_r+0x2a>
 8009fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009faa:	f7fe fd40 	bl	8008a2e <__retarget_lock_acquire_recursive>
 8009fae:	89ab      	ldrh	r3, [r5, #12]
 8009fb0:	071b      	lsls	r3, r3, #28
 8009fb2:	d501      	bpl.n	8009fb8 <_vfiprintf_r+0x34>
 8009fb4:	692b      	ldr	r3, [r5, #16]
 8009fb6:	b99b      	cbnz	r3, 8009fe0 <_vfiprintf_r+0x5c>
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7fe fc62 	bl	8008884 <__swsetup_r>
 8009fc0:	b170      	cbz	r0, 8009fe0 <_vfiprintf_r+0x5c>
 8009fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fc4:	07dc      	lsls	r4, r3, #31
 8009fc6:	d504      	bpl.n	8009fd2 <_vfiprintf_r+0x4e>
 8009fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fcc:	b01d      	add	sp, #116	; 0x74
 8009fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	0598      	lsls	r0, r3, #22
 8009fd6:	d4f7      	bmi.n	8009fc8 <_vfiprintf_r+0x44>
 8009fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fda:	f7fe fd29 	bl	8008a30 <__retarget_lock_release_recursive>
 8009fde:	e7f3      	b.n	8009fc8 <_vfiprintf_r+0x44>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe4:	2320      	movs	r3, #32
 8009fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fee:	2330      	movs	r3, #48	; 0x30
 8009ff0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a1a4 <_vfiprintf_r+0x220>
 8009ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ff8:	f04f 0901 	mov.w	r9, #1
 8009ffc:	4623      	mov	r3, r4
 8009ffe:	469a      	mov	sl, r3
 800a000:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a004:	b10a      	cbz	r2, 800a00a <_vfiprintf_r+0x86>
 800a006:	2a25      	cmp	r2, #37	; 0x25
 800a008:	d1f9      	bne.n	8009ffe <_vfiprintf_r+0x7a>
 800a00a:	ebba 0b04 	subs.w	fp, sl, r4
 800a00e:	d00b      	beq.n	800a028 <_vfiprintf_r+0xa4>
 800a010:	465b      	mov	r3, fp
 800a012:	4622      	mov	r2, r4
 800a014:	4629      	mov	r1, r5
 800a016:	4630      	mov	r0, r6
 800a018:	f7ff ffa1 	bl	8009f5e <__sfputs_r>
 800a01c:	3001      	adds	r0, #1
 800a01e:	f000 80a9 	beq.w	800a174 <_vfiprintf_r+0x1f0>
 800a022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a024:	445a      	add	r2, fp
 800a026:	9209      	str	r2, [sp, #36]	; 0x24
 800a028:	f89a 3000 	ldrb.w	r3, [sl]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 80a1 	beq.w	800a174 <_vfiprintf_r+0x1f0>
 800a032:	2300      	movs	r3, #0
 800a034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a03c:	f10a 0a01 	add.w	sl, sl, #1
 800a040:	9304      	str	r3, [sp, #16]
 800a042:	9307      	str	r3, [sp, #28]
 800a044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a048:	931a      	str	r3, [sp, #104]	; 0x68
 800a04a:	4654      	mov	r4, sl
 800a04c:	2205      	movs	r2, #5
 800a04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a052:	4854      	ldr	r0, [pc, #336]	; (800a1a4 <_vfiprintf_r+0x220>)
 800a054:	f7f6 f8f4 	bl	8000240 <memchr>
 800a058:	9a04      	ldr	r2, [sp, #16]
 800a05a:	b9d8      	cbnz	r0, 800a094 <_vfiprintf_r+0x110>
 800a05c:	06d1      	lsls	r1, r2, #27
 800a05e:	bf44      	itt	mi
 800a060:	2320      	movmi	r3, #32
 800a062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a066:	0713      	lsls	r3, r2, #28
 800a068:	bf44      	itt	mi
 800a06a:	232b      	movmi	r3, #43	; 0x2b
 800a06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a070:	f89a 3000 	ldrb.w	r3, [sl]
 800a074:	2b2a      	cmp	r3, #42	; 0x2a
 800a076:	d015      	beq.n	800a0a4 <_vfiprintf_r+0x120>
 800a078:	9a07      	ldr	r2, [sp, #28]
 800a07a:	4654      	mov	r4, sl
 800a07c:	2000      	movs	r0, #0
 800a07e:	f04f 0c0a 	mov.w	ip, #10
 800a082:	4621      	mov	r1, r4
 800a084:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a088:	3b30      	subs	r3, #48	; 0x30
 800a08a:	2b09      	cmp	r3, #9
 800a08c:	d94d      	bls.n	800a12a <_vfiprintf_r+0x1a6>
 800a08e:	b1b0      	cbz	r0, 800a0be <_vfiprintf_r+0x13a>
 800a090:	9207      	str	r2, [sp, #28]
 800a092:	e014      	b.n	800a0be <_vfiprintf_r+0x13a>
 800a094:	eba0 0308 	sub.w	r3, r0, r8
 800a098:	fa09 f303 	lsl.w	r3, r9, r3
 800a09c:	4313      	orrs	r3, r2
 800a09e:	9304      	str	r3, [sp, #16]
 800a0a0:	46a2      	mov	sl, r4
 800a0a2:	e7d2      	b.n	800a04a <_vfiprintf_r+0xc6>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	1d19      	adds	r1, r3, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	9103      	str	r1, [sp, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bfbb      	ittet	lt
 800a0b0:	425b      	neglt	r3, r3
 800a0b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a0b6:	9307      	strge	r3, [sp, #28]
 800a0b8:	9307      	strlt	r3, [sp, #28]
 800a0ba:	bfb8      	it	lt
 800a0bc:	9204      	strlt	r2, [sp, #16]
 800a0be:	7823      	ldrb	r3, [r4, #0]
 800a0c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a0c2:	d10c      	bne.n	800a0de <_vfiprintf_r+0x15a>
 800a0c4:	7863      	ldrb	r3, [r4, #1]
 800a0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c8:	d134      	bne.n	800a134 <_vfiprintf_r+0x1b0>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	1d1a      	adds	r2, r3, #4
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	9203      	str	r2, [sp, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bfb8      	it	lt
 800a0d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0da:	3402      	adds	r4, #2
 800a0dc:	9305      	str	r3, [sp, #20]
 800a0de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a1b4 <_vfiprintf_r+0x230>
 800a0e2:	7821      	ldrb	r1, [r4, #0]
 800a0e4:	2203      	movs	r2, #3
 800a0e6:	4650      	mov	r0, sl
 800a0e8:	f7f6 f8aa 	bl	8000240 <memchr>
 800a0ec:	b138      	cbz	r0, 800a0fe <_vfiprintf_r+0x17a>
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	eba0 000a 	sub.w	r0, r0, sl
 800a0f4:	2240      	movs	r2, #64	; 0x40
 800a0f6:	4082      	lsls	r2, r0
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	3401      	adds	r4, #1
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a102:	4829      	ldr	r0, [pc, #164]	; (800a1a8 <_vfiprintf_r+0x224>)
 800a104:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a108:	2206      	movs	r2, #6
 800a10a:	f7f6 f899 	bl	8000240 <memchr>
 800a10e:	2800      	cmp	r0, #0
 800a110:	d03f      	beq.n	800a192 <_vfiprintf_r+0x20e>
 800a112:	4b26      	ldr	r3, [pc, #152]	; (800a1ac <_vfiprintf_r+0x228>)
 800a114:	bb1b      	cbnz	r3, 800a15e <_vfiprintf_r+0x1da>
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	3307      	adds	r3, #7
 800a11a:	f023 0307 	bic.w	r3, r3, #7
 800a11e:	3308      	adds	r3, #8
 800a120:	9303      	str	r3, [sp, #12]
 800a122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a124:	443b      	add	r3, r7
 800a126:	9309      	str	r3, [sp, #36]	; 0x24
 800a128:	e768      	b.n	8009ffc <_vfiprintf_r+0x78>
 800a12a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a12e:	460c      	mov	r4, r1
 800a130:	2001      	movs	r0, #1
 800a132:	e7a6      	b.n	800a082 <_vfiprintf_r+0xfe>
 800a134:	2300      	movs	r3, #0
 800a136:	3401      	adds	r4, #1
 800a138:	9305      	str	r3, [sp, #20]
 800a13a:	4619      	mov	r1, r3
 800a13c:	f04f 0c0a 	mov.w	ip, #10
 800a140:	4620      	mov	r0, r4
 800a142:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a146:	3a30      	subs	r2, #48	; 0x30
 800a148:	2a09      	cmp	r2, #9
 800a14a:	d903      	bls.n	800a154 <_vfiprintf_r+0x1d0>
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d0c6      	beq.n	800a0de <_vfiprintf_r+0x15a>
 800a150:	9105      	str	r1, [sp, #20]
 800a152:	e7c4      	b.n	800a0de <_vfiprintf_r+0x15a>
 800a154:	fb0c 2101 	mla	r1, ip, r1, r2
 800a158:	4604      	mov	r4, r0
 800a15a:	2301      	movs	r3, #1
 800a15c:	e7f0      	b.n	800a140 <_vfiprintf_r+0x1bc>
 800a15e:	ab03      	add	r3, sp, #12
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	462a      	mov	r2, r5
 800a164:	4b12      	ldr	r3, [pc, #72]	; (800a1b0 <_vfiprintf_r+0x22c>)
 800a166:	a904      	add	r1, sp, #16
 800a168:	4630      	mov	r0, r6
 800a16a:	f7fd fe31 	bl	8007dd0 <_printf_float>
 800a16e:	4607      	mov	r7, r0
 800a170:	1c78      	adds	r0, r7, #1
 800a172:	d1d6      	bne.n	800a122 <_vfiprintf_r+0x19e>
 800a174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a176:	07d9      	lsls	r1, r3, #31
 800a178:	d405      	bmi.n	800a186 <_vfiprintf_r+0x202>
 800a17a:	89ab      	ldrh	r3, [r5, #12]
 800a17c:	059a      	lsls	r2, r3, #22
 800a17e:	d402      	bmi.n	800a186 <_vfiprintf_r+0x202>
 800a180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a182:	f7fe fc55 	bl	8008a30 <__retarget_lock_release_recursive>
 800a186:	89ab      	ldrh	r3, [r5, #12]
 800a188:	065b      	lsls	r3, r3, #25
 800a18a:	f53f af1d 	bmi.w	8009fc8 <_vfiprintf_r+0x44>
 800a18e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a190:	e71c      	b.n	8009fcc <_vfiprintf_r+0x48>
 800a192:	ab03      	add	r3, sp, #12
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	462a      	mov	r2, r5
 800a198:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <_vfiprintf_r+0x22c>)
 800a19a:	a904      	add	r1, sp, #16
 800a19c:	4630      	mov	r0, r6
 800a19e:	f7fe f89f 	bl	80082e0 <_printf_i>
 800a1a2:	e7e4      	b.n	800a16e <_vfiprintf_r+0x1ea>
 800a1a4:	0800a82c 	.word	0x0800a82c
 800a1a8:	0800a836 	.word	0x0800a836
 800a1ac:	08007dd1 	.word	0x08007dd1
 800a1b0:	08009f5f 	.word	0x08009f5f
 800a1b4:	0800a832 	.word	0x0800a832

0800a1b8 <__sflush_r>:
 800a1b8:	898a      	ldrh	r2, [r1, #12]
 800a1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1be:	4605      	mov	r5, r0
 800a1c0:	0710      	lsls	r0, r2, #28
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	d458      	bmi.n	800a278 <__sflush_r+0xc0>
 800a1c6:	684b      	ldr	r3, [r1, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	dc05      	bgt.n	800a1d8 <__sflush_r+0x20>
 800a1cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dc02      	bgt.n	800a1d8 <__sflush_r+0x20>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1da:	2e00      	cmp	r6, #0
 800a1dc:	d0f9      	beq.n	800a1d2 <__sflush_r+0x1a>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1e4:	682f      	ldr	r7, [r5, #0]
 800a1e6:	6a21      	ldr	r1, [r4, #32]
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	d032      	beq.n	800a252 <__sflush_r+0x9a>
 800a1ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1ee:	89a3      	ldrh	r3, [r4, #12]
 800a1f0:	075a      	lsls	r2, r3, #29
 800a1f2:	d505      	bpl.n	800a200 <__sflush_r+0x48>
 800a1f4:	6863      	ldr	r3, [r4, #4]
 800a1f6:	1ac0      	subs	r0, r0, r3
 800a1f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1fa:	b10b      	cbz	r3, 800a200 <__sflush_r+0x48>
 800a1fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1fe:	1ac0      	subs	r0, r0, r3
 800a200:	2300      	movs	r3, #0
 800a202:	4602      	mov	r2, r0
 800a204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a206:	6a21      	ldr	r1, [r4, #32]
 800a208:	4628      	mov	r0, r5
 800a20a:	47b0      	blx	r6
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	d106      	bne.n	800a220 <__sflush_r+0x68>
 800a212:	6829      	ldr	r1, [r5, #0]
 800a214:	291d      	cmp	r1, #29
 800a216:	d82b      	bhi.n	800a270 <__sflush_r+0xb8>
 800a218:	4a29      	ldr	r2, [pc, #164]	; (800a2c0 <__sflush_r+0x108>)
 800a21a:	410a      	asrs	r2, r1
 800a21c:	07d6      	lsls	r6, r2, #31
 800a21e:	d427      	bmi.n	800a270 <__sflush_r+0xb8>
 800a220:	2200      	movs	r2, #0
 800a222:	6062      	str	r2, [r4, #4]
 800a224:	04d9      	lsls	r1, r3, #19
 800a226:	6922      	ldr	r2, [r4, #16]
 800a228:	6022      	str	r2, [r4, #0]
 800a22a:	d504      	bpl.n	800a236 <__sflush_r+0x7e>
 800a22c:	1c42      	adds	r2, r0, #1
 800a22e:	d101      	bne.n	800a234 <__sflush_r+0x7c>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b903      	cbnz	r3, 800a236 <__sflush_r+0x7e>
 800a234:	6560      	str	r0, [r4, #84]	; 0x54
 800a236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a238:	602f      	str	r7, [r5, #0]
 800a23a:	2900      	cmp	r1, #0
 800a23c:	d0c9      	beq.n	800a1d2 <__sflush_r+0x1a>
 800a23e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a242:	4299      	cmp	r1, r3
 800a244:	d002      	beq.n	800a24c <__sflush_r+0x94>
 800a246:	4628      	mov	r0, r5
 800a248:	f7ff f9f6 	bl	8009638 <_free_r>
 800a24c:	2000      	movs	r0, #0
 800a24e:	6360      	str	r0, [r4, #52]	; 0x34
 800a250:	e7c0      	b.n	800a1d4 <__sflush_r+0x1c>
 800a252:	2301      	movs	r3, #1
 800a254:	4628      	mov	r0, r5
 800a256:	47b0      	blx	r6
 800a258:	1c41      	adds	r1, r0, #1
 800a25a:	d1c8      	bne.n	800a1ee <__sflush_r+0x36>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0c5      	beq.n	800a1ee <__sflush_r+0x36>
 800a262:	2b1d      	cmp	r3, #29
 800a264:	d001      	beq.n	800a26a <__sflush_r+0xb2>
 800a266:	2b16      	cmp	r3, #22
 800a268:	d101      	bne.n	800a26e <__sflush_r+0xb6>
 800a26a:	602f      	str	r7, [r5, #0]
 800a26c:	e7b1      	b.n	800a1d2 <__sflush_r+0x1a>
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a274:	81a3      	strh	r3, [r4, #12]
 800a276:	e7ad      	b.n	800a1d4 <__sflush_r+0x1c>
 800a278:	690f      	ldr	r7, [r1, #16]
 800a27a:	2f00      	cmp	r7, #0
 800a27c:	d0a9      	beq.n	800a1d2 <__sflush_r+0x1a>
 800a27e:	0793      	lsls	r3, r2, #30
 800a280:	680e      	ldr	r6, [r1, #0]
 800a282:	bf08      	it	eq
 800a284:	694b      	ldreq	r3, [r1, #20]
 800a286:	600f      	str	r7, [r1, #0]
 800a288:	bf18      	it	ne
 800a28a:	2300      	movne	r3, #0
 800a28c:	eba6 0807 	sub.w	r8, r6, r7
 800a290:	608b      	str	r3, [r1, #8]
 800a292:	f1b8 0f00 	cmp.w	r8, #0
 800a296:	dd9c      	ble.n	800a1d2 <__sflush_r+0x1a>
 800a298:	6a21      	ldr	r1, [r4, #32]
 800a29a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a29c:	4643      	mov	r3, r8
 800a29e:	463a      	mov	r2, r7
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	47b0      	blx	r6
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	dc06      	bgt.n	800a2b6 <__sflush_r+0xfe>
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ae:	81a3      	strh	r3, [r4, #12]
 800a2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2b4:	e78e      	b.n	800a1d4 <__sflush_r+0x1c>
 800a2b6:	4407      	add	r7, r0
 800a2b8:	eba8 0800 	sub.w	r8, r8, r0
 800a2bc:	e7e9      	b.n	800a292 <__sflush_r+0xda>
 800a2be:	bf00      	nop
 800a2c0:	dfbffffe 	.word	0xdfbffffe

0800a2c4 <_fflush_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	690b      	ldr	r3, [r1, #16]
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	b913      	cbnz	r3, 800a2d4 <_fflush_r+0x10>
 800a2ce:	2500      	movs	r5, #0
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	b118      	cbz	r0, 800a2de <_fflush_r+0x1a>
 800a2d6:	6a03      	ldr	r3, [r0, #32]
 800a2d8:	b90b      	cbnz	r3, 800a2de <_fflush_r+0x1a>
 800a2da:	f7fe f9af 	bl	800863c <__sinit>
 800a2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0f3      	beq.n	800a2ce <_fflush_r+0xa>
 800a2e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2e8:	07d0      	lsls	r0, r2, #31
 800a2ea:	d404      	bmi.n	800a2f6 <_fflush_r+0x32>
 800a2ec:	0599      	lsls	r1, r3, #22
 800a2ee:	d402      	bmi.n	800a2f6 <_fflush_r+0x32>
 800a2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2f2:	f7fe fb9c 	bl	8008a2e <__retarget_lock_acquire_recursive>
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	f7ff ff5d 	bl	800a1b8 <__sflush_r>
 800a2fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a300:	07da      	lsls	r2, r3, #31
 800a302:	4605      	mov	r5, r0
 800a304:	d4e4      	bmi.n	800a2d0 <_fflush_r+0xc>
 800a306:	89a3      	ldrh	r3, [r4, #12]
 800a308:	059b      	lsls	r3, r3, #22
 800a30a:	d4e1      	bmi.n	800a2d0 <_fflush_r+0xc>
 800a30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a30e:	f7fe fb8f 	bl	8008a30 <__retarget_lock_release_recursive>
 800a312:	e7dd      	b.n	800a2d0 <_fflush_r+0xc>

0800a314 <__swhatbuf_r>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	460c      	mov	r4, r1
 800a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31c:	2900      	cmp	r1, #0
 800a31e:	b096      	sub	sp, #88	; 0x58
 800a320:	4615      	mov	r5, r2
 800a322:	461e      	mov	r6, r3
 800a324:	da0d      	bge.n	800a342 <__swhatbuf_r+0x2e>
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a32c:	f04f 0100 	mov.w	r1, #0
 800a330:	bf0c      	ite	eq
 800a332:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a336:	2340      	movne	r3, #64	; 0x40
 800a338:	2000      	movs	r0, #0
 800a33a:	6031      	str	r1, [r6, #0]
 800a33c:	602b      	str	r3, [r5, #0]
 800a33e:	b016      	add	sp, #88	; 0x58
 800a340:	bd70      	pop	{r4, r5, r6, pc}
 800a342:	466a      	mov	r2, sp
 800a344:	f000 f848 	bl	800a3d8 <_fstat_r>
 800a348:	2800      	cmp	r0, #0
 800a34a:	dbec      	blt.n	800a326 <__swhatbuf_r+0x12>
 800a34c:	9901      	ldr	r1, [sp, #4]
 800a34e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a352:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a356:	4259      	negs	r1, r3
 800a358:	4159      	adcs	r1, r3
 800a35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a35e:	e7eb      	b.n	800a338 <__swhatbuf_r+0x24>

0800a360 <__smakebuf_r>:
 800a360:	898b      	ldrh	r3, [r1, #12]
 800a362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a364:	079d      	lsls	r5, r3, #30
 800a366:	4606      	mov	r6, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	d507      	bpl.n	800a37c <__smakebuf_r+0x1c>
 800a36c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	2301      	movs	r3, #1
 800a376:	6163      	str	r3, [r4, #20]
 800a378:	b002      	add	sp, #8
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	ab01      	add	r3, sp, #4
 800a37e:	466a      	mov	r2, sp
 800a380:	f7ff ffc8 	bl	800a314 <__swhatbuf_r>
 800a384:	9900      	ldr	r1, [sp, #0]
 800a386:	4605      	mov	r5, r0
 800a388:	4630      	mov	r0, r6
 800a38a:	f7ff f9c9 	bl	8009720 <_malloc_r>
 800a38e:	b948      	cbnz	r0, 800a3a4 <__smakebuf_r+0x44>
 800a390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a394:	059a      	lsls	r2, r3, #22
 800a396:	d4ef      	bmi.n	800a378 <__smakebuf_r+0x18>
 800a398:	f023 0303 	bic.w	r3, r3, #3
 800a39c:	f043 0302 	orr.w	r3, r3, #2
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	e7e3      	b.n	800a36c <__smakebuf_r+0xc>
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	6020      	str	r0, [r4, #0]
 800a3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	9b00      	ldr	r3, [sp, #0]
 800a3b0:	6163      	str	r3, [r4, #20]
 800a3b2:	9b01      	ldr	r3, [sp, #4]
 800a3b4:	6120      	str	r0, [r4, #16]
 800a3b6:	b15b      	cbz	r3, 800a3d0 <__smakebuf_r+0x70>
 800a3b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f000 f81d 	bl	800a3fc <_isatty_r>
 800a3c2:	b128      	cbz	r0, 800a3d0 <__smakebuf_r+0x70>
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	f023 0303 	bic.w	r3, r3, #3
 800a3ca:	f043 0301 	orr.w	r3, r3, #1
 800a3ce:	81a3      	strh	r3, [r4, #12]
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	431d      	orrs	r5, r3
 800a3d4:	81a5      	strh	r5, [r4, #12]
 800a3d6:	e7cf      	b.n	800a378 <__smakebuf_r+0x18>

0800a3d8 <_fstat_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4d07      	ldr	r5, [pc, #28]	; (800a3f8 <_fstat_r+0x20>)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	602b      	str	r3, [r5, #0]
 800a3e6:	f7f8 fafa 	bl	80029de <_fstat>
 800a3ea:	1c43      	adds	r3, r0, #1
 800a3ec:	d102      	bne.n	800a3f4 <_fstat_r+0x1c>
 800a3ee:	682b      	ldr	r3, [r5, #0]
 800a3f0:	b103      	cbz	r3, 800a3f4 <_fstat_r+0x1c>
 800a3f2:	6023      	str	r3, [r4, #0]
 800a3f4:	bd38      	pop	{r3, r4, r5, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000adc 	.word	0x20000adc

0800a3fc <_isatty_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d06      	ldr	r5, [pc, #24]	; (800a418 <_isatty_r+0x1c>)
 800a400:	2300      	movs	r3, #0
 800a402:	4604      	mov	r4, r0
 800a404:	4608      	mov	r0, r1
 800a406:	602b      	str	r3, [r5, #0]
 800a408:	f7f8 faf9 	bl	80029fe <_isatty>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d102      	bne.n	800a416 <_isatty_r+0x1a>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	b103      	cbz	r3, 800a416 <_isatty_r+0x1a>
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	20000adc 	.word	0x20000adc

0800a41c <_sbrk_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4d06      	ldr	r5, [pc, #24]	; (800a438 <_sbrk_r+0x1c>)
 800a420:	2300      	movs	r3, #0
 800a422:	4604      	mov	r4, r0
 800a424:	4608      	mov	r0, r1
 800a426:	602b      	str	r3, [r5, #0]
 800a428:	f7f8 fb02 	bl	8002a30 <_sbrk>
 800a42c:	1c43      	adds	r3, r0, #1
 800a42e:	d102      	bne.n	800a436 <_sbrk_r+0x1a>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	b103      	cbz	r3, 800a436 <_sbrk_r+0x1a>
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	20000adc 	.word	0x20000adc

0800a43c <__assert_func>:
 800a43c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a43e:	4614      	mov	r4, r2
 800a440:	461a      	mov	r2, r3
 800a442:	4b09      	ldr	r3, [pc, #36]	; (800a468 <__assert_func+0x2c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4605      	mov	r5, r0
 800a448:	68d8      	ldr	r0, [r3, #12]
 800a44a:	b14c      	cbz	r4, 800a460 <__assert_func+0x24>
 800a44c:	4b07      	ldr	r3, [pc, #28]	; (800a46c <__assert_func+0x30>)
 800a44e:	9100      	str	r1, [sp, #0]
 800a450:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a454:	4906      	ldr	r1, [pc, #24]	; (800a470 <__assert_func+0x34>)
 800a456:	462b      	mov	r3, r5
 800a458:	f000 f844 	bl	800a4e4 <fiprintf>
 800a45c:	f000 f854 	bl	800a508 <abort>
 800a460:	4b04      	ldr	r3, [pc, #16]	; (800a474 <__assert_func+0x38>)
 800a462:	461c      	mov	r4, r3
 800a464:	e7f3      	b.n	800a44e <__assert_func+0x12>
 800a466:	bf00      	nop
 800a468:	20000074 	.word	0x20000074
 800a46c:	0800a847 	.word	0x0800a847
 800a470:	0800a854 	.word	0x0800a854
 800a474:	0800a882 	.word	0x0800a882

0800a478 <_calloc_r>:
 800a478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a47a:	fba1 2402 	umull	r2, r4, r1, r2
 800a47e:	b94c      	cbnz	r4, 800a494 <_calloc_r+0x1c>
 800a480:	4611      	mov	r1, r2
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	f7ff f94c 	bl	8009720 <_malloc_r>
 800a488:	9a01      	ldr	r2, [sp, #4]
 800a48a:	4605      	mov	r5, r0
 800a48c:	b930      	cbnz	r0, 800a49c <_calloc_r+0x24>
 800a48e:	4628      	mov	r0, r5
 800a490:	b003      	add	sp, #12
 800a492:	bd30      	pop	{r4, r5, pc}
 800a494:	220c      	movs	r2, #12
 800a496:	6002      	str	r2, [r0, #0]
 800a498:	2500      	movs	r5, #0
 800a49a:	e7f8      	b.n	800a48e <_calloc_r+0x16>
 800a49c:	4621      	mov	r1, r4
 800a49e:	f7fe fa49 	bl	8008934 <memset>
 800a4a2:	e7f4      	b.n	800a48e <_calloc_r+0x16>

0800a4a4 <__ascii_mbtowc>:
 800a4a4:	b082      	sub	sp, #8
 800a4a6:	b901      	cbnz	r1, 800a4aa <__ascii_mbtowc+0x6>
 800a4a8:	a901      	add	r1, sp, #4
 800a4aa:	b142      	cbz	r2, 800a4be <__ascii_mbtowc+0x1a>
 800a4ac:	b14b      	cbz	r3, 800a4c2 <__ascii_mbtowc+0x1e>
 800a4ae:	7813      	ldrb	r3, [r2, #0]
 800a4b0:	600b      	str	r3, [r1, #0]
 800a4b2:	7812      	ldrb	r2, [r2, #0]
 800a4b4:	1e10      	subs	r0, r2, #0
 800a4b6:	bf18      	it	ne
 800a4b8:	2001      	movne	r0, #1
 800a4ba:	b002      	add	sp, #8
 800a4bc:	4770      	bx	lr
 800a4be:	4610      	mov	r0, r2
 800a4c0:	e7fb      	b.n	800a4ba <__ascii_mbtowc+0x16>
 800a4c2:	f06f 0001 	mvn.w	r0, #1
 800a4c6:	e7f8      	b.n	800a4ba <__ascii_mbtowc+0x16>

0800a4c8 <__ascii_wctomb>:
 800a4c8:	b149      	cbz	r1, 800a4de <__ascii_wctomb+0x16>
 800a4ca:	2aff      	cmp	r2, #255	; 0xff
 800a4cc:	bf85      	ittet	hi
 800a4ce:	238a      	movhi	r3, #138	; 0x8a
 800a4d0:	6003      	strhi	r3, [r0, #0]
 800a4d2:	700a      	strbls	r2, [r1, #0]
 800a4d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a4d8:	bf98      	it	ls
 800a4da:	2001      	movls	r0, #1
 800a4dc:	4770      	bx	lr
 800a4de:	4608      	mov	r0, r1
 800a4e0:	4770      	bx	lr
	...

0800a4e4 <fiprintf>:
 800a4e4:	b40e      	push	{r1, r2, r3}
 800a4e6:	b503      	push	{r0, r1, lr}
 800a4e8:	4601      	mov	r1, r0
 800a4ea:	ab03      	add	r3, sp, #12
 800a4ec:	4805      	ldr	r0, [pc, #20]	; (800a504 <fiprintf+0x20>)
 800a4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f2:	6800      	ldr	r0, [r0, #0]
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	f7ff fd45 	bl	8009f84 <_vfiprintf_r>
 800a4fa:	b002      	add	sp, #8
 800a4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a500:	b003      	add	sp, #12
 800a502:	4770      	bx	lr
 800a504:	20000074 	.word	0x20000074

0800a508 <abort>:
 800a508:	b508      	push	{r3, lr}
 800a50a:	2006      	movs	r0, #6
 800a50c:	f000 f82c 	bl	800a568 <raise>
 800a510:	2001      	movs	r0, #1
 800a512:	f7f8 fa31 	bl	8002978 <_exit>

0800a516 <_raise_r>:
 800a516:	291f      	cmp	r1, #31
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4604      	mov	r4, r0
 800a51c:	460d      	mov	r5, r1
 800a51e:	d904      	bls.n	800a52a <_raise_r+0x14>
 800a520:	2316      	movs	r3, #22
 800a522:	6003      	str	r3, [r0, #0]
 800a524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a52c:	b112      	cbz	r2, 800a534 <_raise_r+0x1e>
 800a52e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a532:	b94b      	cbnz	r3, 800a548 <_raise_r+0x32>
 800a534:	4620      	mov	r0, r4
 800a536:	f000 f831 	bl	800a59c <_getpid_r>
 800a53a:	462a      	mov	r2, r5
 800a53c:	4601      	mov	r1, r0
 800a53e:	4620      	mov	r0, r4
 800a540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a544:	f000 b818 	b.w	800a578 <_kill_r>
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d00a      	beq.n	800a562 <_raise_r+0x4c>
 800a54c:	1c59      	adds	r1, r3, #1
 800a54e:	d103      	bne.n	800a558 <_raise_r+0x42>
 800a550:	2316      	movs	r3, #22
 800a552:	6003      	str	r3, [r0, #0]
 800a554:	2001      	movs	r0, #1
 800a556:	e7e7      	b.n	800a528 <_raise_r+0x12>
 800a558:	2400      	movs	r4, #0
 800a55a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a55e:	4628      	mov	r0, r5
 800a560:	4798      	blx	r3
 800a562:	2000      	movs	r0, #0
 800a564:	e7e0      	b.n	800a528 <_raise_r+0x12>
	...

0800a568 <raise>:
 800a568:	4b02      	ldr	r3, [pc, #8]	; (800a574 <raise+0xc>)
 800a56a:	4601      	mov	r1, r0
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	f7ff bfd2 	b.w	800a516 <_raise_r>
 800a572:	bf00      	nop
 800a574:	20000074 	.word	0x20000074

0800a578 <_kill_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	4d07      	ldr	r5, [pc, #28]	; (800a598 <_kill_r+0x20>)
 800a57c:	2300      	movs	r3, #0
 800a57e:	4604      	mov	r4, r0
 800a580:	4608      	mov	r0, r1
 800a582:	4611      	mov	r1, r2
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	f7f8 f9e7 	bl	8002958 <_kill>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	d102      	bne.n	800a594 <_kill_r+0x1c>
 800a58e:	682b      	ldr	r3, [r5, #0]
 800a590:	b103      	cbz	r3, 800a594 <_kill_r+0x1c>
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	bd38      	pop	{r3, r4, r5, pc}
 800a596:	bf00      	nop
 800a598:	20000adc 	.word	0x20000adc

0800a59c <_getpid_r>:
 800a59c:	f7f8 b9d4 	b.w	8002948 <_getpid>

0800a5a0 <_init>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	bf00      	nop
 800a5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a6:	bc08      	pop	{r3}
 800a5a8:	469e      	mov	lr, r3
 800a5aa:	4770      	bx	lr

0800a5ac <_fini>:
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	bf00      	nop
 800a5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5b2:	bc08      	pop	{r3}
 800a5b4:	469e      	mov	lr, r3
 800a5b6:	4770      	bx	lr
